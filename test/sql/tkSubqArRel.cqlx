<CEP xmlns="http://xmlns.oracle.com/cep">

<!-- **************************** -->
<!--                              -->
<!-- ARCHIVED RELATION + SUBQUERY -->
<!--                              -->
<!-- ***************************  -->


<CEP_DDL>
CREATE ARCHIVED RELATION tkArchivedRelPhase2_Phase2TestTable(c1 integer, c2 float, c3 char(10), eid bigint) 
archiver BIArchiver entity 
"soainfra.Phase2TestTable" event identifier eid
</CEP_DDL>

<CEP_DDL>
CREATE ARCHIVED RELATION tkArchivedRelPhase2_Phase2TestTable1(c1 integer, c2 float, c3 char(10), eid bigint) 
archiver BIArchiver entity 
"soainfra.Phase2TestTable" event identifier eid
</CEP_DDL>

<CEP_DDL> <![CDATA[ alter relation tkArchivedRelPhase2_Phase2TestTable add source 
"<EndPointReference><Address>file://@TEST_DATA@/inpPhase2.txt</Address></EndPointReference>"]]>
</CEP_DDL>

<CEP_DDL> <![CDATA[ alter relation tkArchivedRelPhase2_Phase2TestTable1 add source 
"<EndPointReference><Address>file://@TEST_DATA@/inpPhase2.txt</Address></EndPointReference>"]]>  </CEP_DDL>

<!-- groupAggr is the query operator with group by clause. count(*) handling in query generation is also tested. arithmetic expression and constant expression is tested too. Also tests implicit conversion (int to float) where sql equivalent is empty string. -->
<CEP_DDL>
<![CDATA[ 
create query tkArchivedRelPhase2_q1 as select c3, c1+5, count(3.14), sum(c2+5), count(*), count(c2) 
from (select * from tkArchivedRelPhase2_Phase2TestTable) as foo 
group by c3, c1 
]]>
</CEP_DDL>

<!-- groupAggr is the query operator without group by clause. More arithmetic expressions and constants tested.-->
<CEP_DDL>
<![CDATA[
create query tkArchivedRelPhase2_q2 as select avg(c2), sum(-3*4), count((14/2)-4) 
from (select * from tkArchivedRelPhase2_Phase2TestTable) as foo 
]]> 
</CEP_DDL>

<!-- groupAggr cannot be query operator so travelling down the query plan and select becomes the query operator. string literal in query generation also tested.-->
<CEP_DDL>
<![CDATA[ 
create query tkArchivedRelPhase2_q3 as select sum(c2),max(c2) 
from (select * from tkArchivedRelPhase2_Phase2TestTable) as foo 
where c3="first" 
]]> 
</CEP_DDL>

<!-- groupAggr cannot be query operator due to median. So select becomes the query operator and where clause has different expressions. tests implicit conversions as well -->
<CEP_DDL>
<![CDATA[
create query tkArchivedRelPhase2_q4 as 
select median(c1) 
from (select * from tkArchivedRelPhase2_Phase2TestTable) as foo 
where 1.0 >= (case when ((c2 > 3.0) AND (c2 < 4.0)) then 0.5 when (c2+1.1 > 5.0) then 1.5 when (c2 is null) then 0.75 else 1.5 end) 
]]> 
</CEP_DDL>

<!-- groupAggr cannot be query operator due to min. So select becomes the query operator. The where clause condition does not pass any of the inputs and so tests archiver query not returning any rows. null output is generated by groupaggr and it passes having clause. -->
<CEP_DDL>
<![CDATA[ 
create query tkArchivedRelPhase2_q5 as select min(c2) 
from (select * from tkArchivedRelPhase2_Phase2TestTable) as foo 
where c3 is null having min(c2) is null 
]]></CEP_DDL>

<!-- distinct is the query operator. tests concatenation expression conversion. Also tests implicit datatype conversion (int to char) to_char function, during query generation. -->
<CEP_DDL>
<![CDATA[ 
create query tkArchivedRelPhase2_q6 as select distinct c3||"cep", c1||"cep" 
from (select * from tkArchivedRelPhase2_Phase2TestTable) as foo 
]]>
</CEP_DDL>

<!-- aggr distinct query. Query plan will have three branches from relsource. All thre branches independently  query the state from the archiver. -->
<CEP_DDL>
<![CDATA[ 
create query tkArchivedRelPhase2_q7 as select sum(distinct c1), count(distinct c2), avg(c1+1)  
from (select * from tkArchivedRelPhase2_Phase2TestTable) as foo 
group by c3 
]]></CEP_DDL>

<!-- aggr distinct query. first branch - distinct cannot be query operator as child(select) outputSQL has select * instead of attr names. second branch -  aggr already has the stateinitializationprocessing done flag true as select is identified as query operator. -->
<CEP_DDL>
<![CDATA[ 
create query tkArchivedRelPhase2_q8 as select sum(distinct c1), min(c1) 
from (select * from tkArchivedRelPhase2_Phase2TestTable) as foo 
where c1 > 1 
]]> 
</CEP_DDL>

<!-- OrderByTop and RelSource test. OrderByTop operator can never be query operator so RelSource becomes the query operator. Since relsource queries we have to use a relation different than the one which other queries use. -->
<CEP_DDL>
<![CDATA[ 
create query tkArchivedRelPhase2_q9 as 
select * 
from (select * from tkArchivedRelPhase2_Phase2TestTable1) as foo
partition by c3 order by c2 desc nulls last rows 2 
]]>
</CEP_DDL>

<!-- aggr distinct query. first branch identifies distinct as query operator. second branch aggr cannot query so reverts back to select which is common to both branches. Select becomes query operator and distinct is unmarked as query operator. The group by adds a project because of whic distinct could become query operator initially in the first branch. -->
<CEP_DDL>
<![CDATA[ 
create query tkArchivedRelPhase2_q10 as select sum(distinct c1), min(c1) 
from (select * from tkArchivedRelPhase2_Phase2TestTable) as foo 
where c1 > 1 group by c3
]]> 
</CEP_DDL>

<!-- update semantics on aggr over archived relation -->
<CEP_DDL>
<![CDATA[ 
create query tkArchivedRelPhase2_q11 as select c1, sum(c2) 
from (select * from tkArchivedRelPhase2_Phase2TestTable) as foo 
group by c1 primary key(c1) 
]]></CEP_DDL>

<CEP_DDL> <![CDATA[ alter query tkArchivedRelPhase2_q1 add destination 
"<EndPointReference><Address>file://@TEST_OUTPUT@/tkSubqArRel_q1.txt</Address></EndPointReference>"]]>  </CEP_DDL>
<CEP_DDL> <![CDATA[ alter query tkArchivedRelPhase2_q2 add destination 
"<EndPointReference><Address>file://@TEST_OUTPUT@/tkSubqArRel_q2.txt</Address></EndPointReference>"]]>  </CEP_DDL>
<CEP_DDL> <![CDATA[ alter query tkArchivedRelPhase2_q3 add destination 
"<EndPointReference><Address>file://@TEST_OUTPUT@/tkSubqArRel_q3.txt</Address></EndPointReference>"]]>  </CEP_DDL>
<CEP_DDL> <![CDATA[ alter query tkArchivedRelPhase2_q4 add destination 
"<EndPointReference><Address>file://@TEST_OUTPUT@/tkSubqArRel_q4.txt</Address></EndPointReference>"]]>  </CEP_DDL>
<CEP_DDL> <![CDATA[ alter query tkArchivedRelPhase2_q5 add destination 
"<EndPointReference><Address>file://@TEST_OUTPUT@/tkSubqArRel_q5.txt</Address></EndPointReference>"]]>  </CEP_DDL>
<CEP_DDL> <![CDATA[ alter query tkArchivedRelPhase2_q6 add destination 
"<EndPointReference><Address>file://@TEST_OUTPUT@/tkSubqArRel_q6.txt</Address></EndPointReference>"]]>  </CEP_DDL>
<CEP_DDL> <![CDATA[ alter query tkArchivedRelPhase2_q7 add destination 
"<EndPointReference><Address>file://@TEST_OUTPUT@/tkSubqArRel_q7.txt</Address></EndPointReference>"]]>  </CEP_DDL>
<CEP_DDL> <![CDATA[ alter query tkArchivedRelPhase2_q8 add destination 
"<EndPointReference><Address>file://@TEST_OUTPUT@/tkSubqArRel_q8.txt</Address></EndPointReference>"]]>  </CEP_DDL>
<CEP_DDL> <![CDATA[ alter query tkArchivedRelPhase2_q9 add destination 
"<EndPointReference><Address>file://@TEST_OUTPUT@/tkSubqArRel_q9.txt</Address></EndPointReference>"]]>  </CEP_DDL>
<CEP_DDL> <![CDATA[ alter query tkArchivedRelPhase2_q10 add destination 
"<EndPointReference><Address>file://@TEST_OUTPUT@/tkSubqArRel_q10.txt</Address></EndPointReference>"]]>  </CEP_DDL>
<CEP_DDL> <![CDATA[ alter query tkArchivedRelPhase2_q11 add destination 
"<EndPointReference><Address>file://@TEST_OUTPUT@/tkSubqArRel_q11.txt</Address></EndPointReference>" use update semantics ]]>  </CEP_DDL>

<!-- start_time specified here is assumed to be in milliseconds -->
<CEP_DDL> alter query tkArchivedRelPhase2_q1 set start_time 1000000000L</CEP_DDL>
<CEP_DDL> alter query tkArchivedRelPhase2_q2 set start_time 1000000000L</CEP_DDL>
<CEP_DDL> alter query tkArchivedRelPhase2_q3 set start_time 1000000000L</CEP_DDL>
<CEP_DDL> alter query tkArchivedRelPhase2_q4 set start_time 1000000000L</CEP_DDL>
<CEP_DDL> alter query tkArchivedRelPhase2_q5 set start_time 1000000000L</CEP_DDL>
<CEP_DDL> alter query tkArchivedRelPhase2_q6 set start_time 1000000000L</CEP_DDL>
<CEP_DDL> alter query tkArchivedRelPhase2_q7 set start_time 1000000000L</CEP_DDL>
<CEP_DDL> alter query tkArchivedRelPhase2_q8 set start_time 1000000000L</CEP_DDL>
<CEP_DDL> alter query tkArchivedRelPhase2_q9 set start_time 1000000000L</CEP_DDL>
<CEP_DDL> alter query tkArchivedRelPhase2_q10 set start_time 1000000000L</CEP_DDL>
<CEP_DDL> alter query tkArchivedRelPhase2_q11 set start_time 1000000000L</CEP_DDL>

<CEP_DDL>alter query tkArchivedRelPhase2_q1 start</CEP_DDL>
<CEP_DDL>alter query tkArchivedRelPhase2_q2 start</CEP_DDL>
<CEP_DDL>alter query tkArchivedRelPhase2_q3 start</CEP_DDL>
<CEP_DDL>alter query tkArchivedRelPhase2_q4 start</CEP_DDL>
<CEP_DDL>alter query tkArchivedRelPhase2_q5 start</CEP_DDL> 
<CEP_DDL>alter query tkArchivedRelPhase2_q6 start</CEP_DDL>
<CEP_DDL>alter query tkArchivedRelPhase2_q7 start</CEP_DDL>
<CEP_DDL>alter query tkArchivedRelPhase2_q9 start</CEP_DDL>
<CEP_DDL>alter query tkArchivedRelPhase2_q11 start</CEP_DDL>


<CEP_DDL>alter system run </CEP_DDL>
</CEP>
