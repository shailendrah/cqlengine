 oracle.cep.logging.LogUtil log
CONFIG: Metadata storage : oracle/work/cep/storage
 oracle.cep.logging.LogUtil log
CONFIG: Spill storage : oracle/work/cep/storage/data
 oracle.cep.logging.LogUtil log
CONFIG: ===  QueueSrcPolicy 
 oracle.cep.logging.LogUtil log
CONFIG: normalThreshold ,partialSpillThreshold ,fullSpillThreshold ,syncSpillThreshold 
 oracle.cep.logging.LogUtil log
CONFIG: window = 5
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  create stream tklog_S (c1 integer, c2 float) is application timestamped 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  create stream tklog_S1 (c1 integer) 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  create stream tklog_S5 (c1 integer, c2 float) 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  create stream tklog_SP3(c1 integer, name char(10)) 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  create stream tklog_S3 (c1 float) 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  create stream tklog_S12(c1 integer, c2 float) 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  alter stream tklog_SP3 add source "<EndPointReference><Address>file://pcbpel/cep/test/data/inpSP1.txt</Address></EndPointReference>" 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  create stream tklog_S0 (c1 integer, c2 float) 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  alter stream tklog_S0 add source "<EndPointReference><Address>file://pcbpel/cep/test/data/inpPattern0.txt</Address></EndPointReference>" 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  alter stream tklog_S5 add source "<EndPointReference><Address>file://pcbpel/cep/test/data/inpPattern5.txt</Address></EndPointReference>" 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  alter stream tklog_S3 add source "<EndPointReference><Address>file://pcbpel/cep/test/data/coverage3.txt</Address></EndPointReference>" 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  alter stream tklog_S12 add source "<EndPointReference><Address>file://pcbpel/cep/test/data/inpS12.txt</Address></EndPointReference>" 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  create relation tklog_R (d1 integer, d2 char(10)) is silent 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  create relation tklog_R1 (c1 integer, c2 float) is silent 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  alter stream tklog_S add source "<EndPointReference><Address>file://pcbpel/cep/test/data/inpS1000.txt</Address></EndPointReference>" 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  alter stream tklog_S1 add source "<EndPointReference><Address>file://pcbpel/cep/test/data/inpS1_data1.txt</Address></EndPointReference>" 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  alter relation tklog_R add source "<EndPointReference><Address>file://pcbpel/cep/test/data/inpR.txt</Address></EndPointReference>" 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  alter relation tklog_R1 add source "<EndPointReference><Address>file://pcbpel/cep/test/data/inpR-static.txt</Address></EndPointReference>" 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  create view tklog_v1 (c1 integer, c2 float) as select * from tklog_S[range 1] 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  create view tklog_v2 (c1 integer) as IStream(select * from tklog_S1[range 10 slide 10]) 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  create query tklog_q1 as select * from tklog_R, tklog_S[range 1] where tklog_S.c1 = tklog_R.d1 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  create query tklog_q2 as tklog_R1 union all tklog_v1 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  create query tklog_q3 as tklog_R1 except tklog_v1 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  create query tklog_q5 as select c1, element_time from tklog_v2 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  create function tklog_secondMax(c1 float) return float aggregate using "oracle.cep.test.userfunctions.TkUsrSecondMax" 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  create function tklog_secondMax(c1 char) return char aggregate using "oracle.cep.test.userfunctions.TkUsrSecondMax" 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  create function tklog_secondMax(c1 byte) return byte aggregate using "oracle.cep.test.userfunctions.TkUsrSecondMax" 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  create function tklog_secondMax(c1 timestamp) return timestamp aggregate using "oracle.cep.test.userfunctions.TkUsrSecondMax" 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  create function tklog_secondMax(c1 interval) return interval aggregate using "oracle.cep.test.userfunctions.TkUsrSecondMax" 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  create query tklog_uda_float_float as select tklog_secondMax(c1) from tklog_S3[range 7] 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  create window tklog_range_slide(winrange int, winslide int) implement using "oracle.cep.test.userfunctions.TkRangeSlide" 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  create query tklog_q79 as select * from tklog_S12 [tklog_range_slide(10,5)] 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  create query tklog_qp1 as select T.Ac1,T.Bc1,T.Dc1 from tklog_S0 MATCH_RECOGNIZE ( MEASURES A.c1 as Ac1, B.c1 as Bc1, D.c1 as Dc1 PATTERN(A B C* D) DEFINE A as A.c1 = 30, B as B.c2 = 10.0, C as C.c1 = 7, D as D.c1 = 40) as T 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  create query tklog_qp10 as select T.Ac1, T.sumB, T.Cc1 from tklog_S5 MATCH_RECOGNIZE ( MEASURES A.c1 as Ac1, sum(B.c1) as sumB, C.c1 as Cc1 PATTERN(A B* C) DEFINE A as A.c1 = 10, B as B.c1 > A.c1 , C as C.c1 > B.c1) as T 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  alter query tklog_qp1 add destination "<EndPointReference><Address>file://oracle/work/cep/patternout1.log</Address></EndPointReference>" 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  alter query tklog_qp10 add destination "<EndPointReference><Address>file://oracle/work/cep/patternout10.log</Address></EndPointReference>" 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  alter query tklog_q1 add destination "<EndPointReference><Address>file://oracle/work/cep/outSR1-static.log</Address></EndPointReference>" 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  alter query tklog_q2 add destination "<EndPointReference><Address>file://oracle/work/cep/outSR1-union-static.log</Address></EndPointReference>" 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  alter query tklog_q3 add destination "<EndPointReference><Address>file://oracle/work/cep/outSR1-except-static.log</Address></EndPointReference>" 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  alter query tklog_q5 add destination "<EndPointReference><Address>file://oracle/work/cep/outq5_data1.log</Address></EndPointReference>" 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  alter query tklog_uda_float_float add destination "<EndPointReference><Address>file://oracle/work/cep/outuda6_l.log</Address></EndPointReference>" 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  alter query tklog_q79 add destination "<EndPointReference><Address>file://oracle/work/cep/outS12great_rs_l.og</Address></EndPointReference>" 
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  alter query tklog_q1 start 
 oracle.cep.logging.LogUtil log
INFO: InterfaceManager: uriStr = file://pcbpel/cep/test/data/inpR.txt
 oracle.cep.logging.LogUtil log
INFO: InterfaceManager: uriStr = file://pcbpel/cep/test/data/inpS1000.txt
 oracle.cep.logging.LogUtil log
INFO: InterfaceManager: uriStr = file://oracle/work/cep/outSR1-static.log
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  alter query tklog_q2 start 
 oracle.cep.logging.LogUtil log
INFO: InterfaceManager: uriStr = file://pcbpel/cep/test/data/inpR-static.txt
 oracle.cep.logging.LogUtil log
INFO: InterfaceManager: uriStr = file://oracle/work/cep/outSR1-union-static.log
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  alter query tklog_q3 start 
 oracle.cep.logging.LogUtil log
INFO: InterfaceManager: uriStr = file://oracle/work/cep/outSR1-except-static.log
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  alter query tklog_q5 start 
 oracle.cep.logging.LogUtil log
INFO: InterfaceManager: uriStr = file://pcbpel/cep/test/data/inpS1_data1.txt
 oracle.cep.logging.LogUtil log
INFO: InterfaceManager: uriStr = file://oracle/work/cep/outq5_data1.log
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  alter query tklog_qp1 start 
 oracle.cep.logging.LogUtil log
INFO: InterfaceManager: uriStr = file://pcbpel/cep/test/data/inpPattern0.txt
 oracle.cep.logging.LogUtil log
INFO: InterfaceManager: uriStr = file://oracle/work/cep/patternout1.log
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  alter query tklog_qp10 start 
 oracle.cep.logging.LogUtil log
INFO: InterfaceManager: uriStr = file://pcbpel/cep/test/data/inpPattern5.txt
 oracle.cep.logging.LogUtil log
INFO: InterfaceManager: uriStr = file://oracle/work/cep/patternout10.log
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  alter query tklog_uda_float_float start
 oracle.cep.logging.LogUtil log
INFO: InterfaceManager: uriStr = file://pcbpel/cep/test/data/coverage3.txt
 oracle.cep.logging.LogUtil log
INFO: InterfaceManager: uriStr = file://oracle/work/cep/outuda6_l.log
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  alter query tklog_q79 start
 oracle.cep.logging.LogUtil log
INFO: InterfaceManager: uriStr = file://pcbpel/cep/test/data/inpS12.txt
 oracle.cep.logging.LogUtil log
INFO: InterfaceManager: uriStr = file://oracle/work/cep/outS12great_rs_l.og
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  alter system dump logging systemstate level 8 
 oracle.cep.logging.LogUtil log
FINE: trace : area=SYSTEMSTATE event=DUMP target=SystemState levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="0" TargetName="SystemState">
  <Level Name="SYSTEMSTATE_LOGLEVELS" Value="8">
   <Levels>
   </Levels>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL =  alter system run duration = 2 
 oracle.cep.logging.LogUtil log
INFO: Scheduler = oracle.cep.execution.scheduler.FIFOScheduler
 oracle.cep.logging.LogUtil log
INFO: Scheduler State : RUNNING
 oracle.cep.logging.LogUtil log
INFO: Scheduler State : STOPPED
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
 oracle.cep.logging.LogUtil log
INFO: Activate : DDL = alter system dump logging systemstate level 1,2,3,4,5,6,7,8
 oracle.cep.logging.LogUtil log
FINE: trace : area=SYSTEMSTATE event=DUMP target=SystemState levels=1 2 3 4 5 6 7 8 
 oracle.cep.logging.LogUtil log
FINE: trace : area=METADATA_QUERY event=DUMP target=QueryManager levels=2 3 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="0" TargetName="QueryManager">
  <Level Name="MQUERY_INFO" Value="2">
   <Queries >
    <Query Name="">
     <semQuery>null</semQuery>
     <logOpt>null</logOpt>
     <names >
      <namesElem>tklog_S.c1</namesElem>
      <namesElem>tklog_S.c2</namesElem>
     </names>
     <state>RUN</state>
     <desiredState>RUN</desiredState>
     <extDests >
     </extDests>
     <destViews >
      <destViewsElem>482</destViewsElem>
     </destViews>
     <refFunctions >
     </refFunctions>
     <refWindows >
     </refWindows>
     <outputConstraintAttrs >
     </outputConstraintAttrs>
     <refViews >
     </refViews>
     <refRelns >
     </refRelns>
     <refTables >
      <refTablesElem>472</refTablesElem>
     </refTables>
     <cqlTxt>select * from tklog_S[range 1] </cqlTxt>
     <isNamed>false</isNamed>
     <isStatsEnabled>false</isStatsEnabled>
     <isRefExternal>false</isRefExternal>
     <isPrimaryKeyExist>false</isPrimaryKeyExist>
     <typ>QUERY</typ>
     <nameSpace>QUERY</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </Query>
    <Query Name="tklog_uda_float_float">
     <semQuery>null</semQuery>
     <logOpt>null</logOpt>
     <names >
      <namesElem>tklog_secondMax(float)</namesElem>
     </names>
     <state>RUN</state>
     <desiredState>RUN</desiredState>
     <extDests >
      <extDestsElem>oracle.cep.metadata.Destination</extDestsElem>
     </extDests>
     <destViews >
     </destViews>
     <refFunctions >
      <refFunctionsElem>489</refFunctionsElem>
     </refFunctions>
     <refWindows >
     </refWindows>
     <outputConstraintAttrs >
     </outputConstraintAttrs>
     <refViews >
     </refViews>
     <refRelns >
     </refRelns>
     <refTables >
      <refTablesElem>476</refTablesElem>
     </refTables>
     <cqlTxt> create query tklog_uda_float_float as select tklog_secondMax(c1) from tklog_S3[range 7] </cqlTxt>
     <isNamed>true</isNamed>
     <isStatsEnabled>false</isStatsEnabled>
     <isRefExternal>false</isRefExternal>
     <isPrimaryKeyExist>false</isPrimaryKeyExist>
     <typ>QUERY</typ>
     <nameSpace>QUERY</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </Query>
    <Query Name="tklog_q1">
     <semQuery>null</semQuery>
     <logOpt>null</logOpt>
     <names >
      <namesElem>tklog_R.d1</namesElem>
      <namesElem>tklog_R.d2</namesElem>
      <namesElem>tklog_S.c1</namesElem>
      <namesElem>tklog_S.c2</namesElem>
     </names>
     <state>RUN</state>
     <desiredState>RUN</desiredState>
     <extDests >
      <extDestsElem>oracle.cep.metadata.Destination</extDestsElem>
     </extDests>
     <destViews >
     </destViews>
     <refFunctions >
     </refFunctions>
     <refWindows >
     </refWindows>
     <outputConstraintAttrs >
     </outputConstraintAttrs>
     <refViews >
     </refViews>
     <refRelns >
      <refRelnsElem>oracle.cep.metadata.IdStub</refRelnsElem>
     </refRelns>
     <refTables >
      <refTablesElem>479</refTablesElem>
      <refTablesElem>472</refTablesElem>
     </refTables>
     <cqlTxt> create query tklog_q1 as select * from tklog_R, tklog_S[range 1] where tklog_S.c1 = tklog_R.d1 </cqlTxt>
     <isNamed>true</isNamed>
     <isStatsEnabled>false</isStatsEnabled>
     <isRefExternal>false</isRefExternal>
     <isPrimaryKeyExist>false</isPrimaryKeyExist>
     <typ>QUERY</typ>
     <nameSpace>QUERY</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </Query>
    <Query Name="tklog_qp10">
     <semQuery>null</semQuery>
     <logOpt>null</logOpt>
     <names >
      <namesElem>T.Ac1</namesElem>
      <namesElem>T.sumB</namesElem>
      <namesElem>T.Cc1</namesElem>
     </names>
     <state>RUN</state>
     <desiredState>RUN</desiredState>
     <extDests >
      <extDestsElem>oracle.cep.metadata.Destination</extDestsElem>
     </extDests>
     <destViews >
     </destViews>
     <refFunctions >
     </refFunctions>
     <refWindows >
     </refWindows>
     <outputConstraintAttrs >
     </outputConstraintAttrs>
     <refViews >
     </refViews>
     <refRelns >
     </refRelns>
     <refTables >
      <refTablesElem>474</refTablesElem>
     </refTables>
     <cqlTxt> create query tklog_qp10 as select T.Ac1, T.sumB, T.Cc1 from tklog_S5 MATCH_RECOGNIZE ( MEASURES A.c1 as Ac1, sum(B.c1) as sumB, C.c1 as Cc1 PATTERN(A B* C) DEFINE A as A.c1 = 10, B as B.c1 > A.c1 , C as C.c1 > B.c1) as T </cqlTxt>
     <isNamed>true</isNamed>
     <isStatsEnabled>false</isStatsEnabled>
     <isRefExternal>false</isRefExternal>
     <isPrimaryKeyExist>false</isPrimaryKeyExist>
     <typ>QUERY</typ>
     <nameSpace>QUERY</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </Query>
    <Query Name="tklog_q2">
     <semQuery>null</semQuery>
     <logOpt>null</logOpt>
     <names >
      <namesElem>tklog_R1.c1</namesElem>
      <namesElem>tklog_R1.c2</namesElem>
     </names>
     <state>RUN</state>
     <desiredState>RUN</desiredState>
     <extDests >
      <extDestsElem>oracle.cep.metadata.Destination</extDestsElem>
     </extDests>
     <destViews >
     </destViews>
     <refFunctions >
     </refFunctions>
     <refWindows >
     </refWindows>
     <outputConstraintAttrs >
     </outputConstraintAttrs>
     <refViews >
      <refViewsElem>482</refViewsElem>
     </refViews>
     <refRelns >
      <refRelnsElem>oracle.cep.metadata.IdStub</refRelnsElem>
     </refRelns>
     <refTables >
      <refTablesElem>480</refTablesElem>
     </refTables>
     <cqlTxt> create query tklog_q2 as tklog_R1 union all tklog_v1 </cqlTxt>
     <isNamed>true</isNamed>
     <isStatsEnabled>false</isStatsEnabled>
     <isRefExternal>false</isRefExternal>
     <isPrimaryKeyExist>false</isPrimaryKeyExist>
     <typ>QUERY</typ>
     <nameSpace>QUERY</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </Query>
    <Query Name="tklog_q3">
     <semQuery>null</semQuery>
     <logOpt>null</logOpt>
     <names >
      <namesElem>tklog_R1.c1</namesElem>
      <namesElem>tklog_R1.c2</namesElem>
     </names>
     <state>RUN</state>
     <desiredState>RUN</desiredState>
     <extDests >
      <extDestsElem>oracle.cep.metadata.Destination</extDestsElem>
     </extDests>
     <destViews >
     </destViews>
     <refFunctions >
     </refFunctions>
     <refWindows >
     </refWindows>
     <outputConstraintAttrs >
     </outputConstraintAttrs>
     <refViews >
      <refViewsElem>482</refViewsElem>
     </refViews>
     <refRelns >
      <refRelnsElem>oracle.cep.metadata.IdStub</refRelnsElem>
     </refRelns>
     <refTables >
      <refTablesElem>480</refTablesElem>
     </refTables>
     <cqlTxt> create query tklog_q3 as tklog_R1 except tklog_v1 </cqlTxt>
     <isNamed>true</isNamed>
     <isStatsEnabled>false</isStatsEnabled>
     <isRefExternal>false</isRefExternal>
     <isPrimaryKeyExist>false</isPrimaryKeyExist>
     <typ>QUERY</typ>
     <nameSpace>QUERY</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </Query>
    <Query Name="tklog_qp1">
     <semQuery>null</semQuery>
     <logOpt>null</logOpt>
     <names >
      <namesElem>T.Ac1</namesElem>
      <namesElem>T.Bc1</namesElem>
      <namesElem>T.Dc1</namesElem>
     </names>
     <state>RUN</state>
     <desiredState>RUN</desiredState>
     <extDests >
      <extDestsElem>oracle.cep.metadata.Destination</extDestsElem>
     </extDests>
     <destViews >
     </destViews>
     <refFunctions >
     </refFunctions>
     <refWindows >
     </refWindows>
     <outputConstraintAttrs >
     </outputConstraintAttrs>
     <refViews >
     </refViews>
     <refRelns >
     </refRelns>
     <refTables >
      <refTablesElem>478</refTablesElem>
     </refTables>
     <cqlTxt> create query tklog_qp1 as select T.Ac1,T.Bc1,T.Dc1 from tklog_S0 MATCH_RECOGNIZE ( MEASURES A.c1 as Ac1, B.c1 as Bc1, D.c1 as Dc1 PATTERN(A B C* D) DEFINE A as A.c1 = 30, B as B.c2 = 10.0, C as C.c1 = 7, D as D.c1 = 40) as T </cqlTxt>
     <isNamed>true</isNamed>
     <isStatsEnabled>false</isStatsEnabled>
     <isRefExternal>false</isRefExternal>
     <isPrimaryKeyExist>false</isPrimaryKeyExist>
     <typ>QUERY</typ>
     <nameSpace>QUERY</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </Query>
    <Query Name="">
     <semQuery>null</semQuery>
     <logOpt>null</logOpt>
     <names >
      <namesElem>tklog_S1.c1</namesElem>
     </names>
     <state>RUN</state>
     <desiredState>RUN</desiredState>
     <extDests >
     </extDests>
     <destViews >
      <destViewsElem>484</destViewsElem>
     </destViews>
     <refFunctions >
     </refFunctions>
     <refWindows >
     </refWindows>
     <outputConstraintAttrs >
     </outputConstraintAttrs>
     <refViews >
     </refViews>
     <refRelns >
     </refRelns>
     <refTables >
      <refTablesElem>473</refTablesElem>
     </refTables>
     <cqlTxt>IStream(select * from tklog_S1[range 10 slide 10]) </cqlTxt>
     <isNamed>false</isNamed>
     <isStatsEnabled>false</isStatsEnabled>
     <isRefExternal>false</isRefExternal>
     <isPrimaryKeyExist>false</isPrimaryKeyExist>
     <typ>QUERY</typ>
     <nameSpace>QUERY</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </Query>
    <Query Name="tklog_q79">
     <semQuery>null</semQuery>
     <logOpt>null</logOpt>
     <names >
      <namesElem>tklog_S12.c1</namesElem>
      <namesElem>tklog_S12.c2</namesElem>
     </names>
     <state>RUN</state>
     <desiredState>RUN</desiredState>
     <extDests >
      <extDestsElem>oracle.cep.metadata.Destination</extDestsElem>
     </extDests>
     <destViews >
     </destViews>
     <refFunctions >
     </refFunctions>
     <refWindows >
      <refWindowsElem>495</refWindowsElem>
     </refWindows>
     <outputConstraintAttrs >
     </outputConstraintAttrs>
     <refViews >
     </refViews>
     <refRelns >
     </refRelns>
     <refTables >
      <refTablesElem>477</refTablesElem>
     </refTables>
     <cqlTxt> create query tklog_q79 as select * from tklog_S12 [tklog_range_slide(10,5)] </cqlTxt>
     <isNamed>true</isNamed>
     <isStatsEnabled>false</isStatsEnabled>
     <isRefExternal>false</isRefExternal>
     <isPrimaryKeyExist>false</isPrimaryKeyExist>
     <typ>QUERY</typ>
     <nameSpace>QUERY</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </Query>
    <Query Name="tklog_q5">
     <semQuery>null</semQuery>
     <logOpt>null</logOpt>
     <names >
      <namesElem>tklog_v2.c1</namesElem>
      <namesElem>tklog_v2.element_time</namesElem>
     </names>
     <state>RUN</state>
     <desiredState>RUN</desiredState>
     <extDests >
      <extDestsElem>oracle.cep.metadata.Destination</extDestsElem>
     </extDests>
     <destViews >
     </destViews>
     <refFunctions >
     </refFunctions>
     <refWindows >
     </refWindows>
     <outputConstraintAttrs >
     </outputConstraintAttrs>
     <refViews >
      <refViewsElem>484</refViewsElem>
     </refViews>
     <refRelns >
     </refRelns>
     <refTables >
     </refTables>
     <cqlTxt> create query tklog_q5 as select c1, element_time from tklog_v2 </cqlTxt>
     <isNamed>true</isNamed>
     <isStatsEnabled>false</isStatsEnabled>
     <isRefExternal>false</isRefExternal>
     <isPrimaryKeyExist>false</isPrimaryKeyExist>
     <typ>QUERY</typ>
     <nameSpace>QUERY</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </Query>
   </Queries>
  </Level>
  <Level Name="MQUERY_LOCKINFO" Value="3">
   <Queries >
    <Query Name="">
     <semQuery>null</semQuery>
     <logOpt>null</logOpt>
     <names >
      <namesElem>tklog_S.c1</namesElem>
      <namesElem>tklog_S.c2</namesElem>
     </names>
     <state>RUN</state>
     <desiredState>RUN</desiredState>
     <extDests >
     </extDests>
     <destViews >
      <destViewsElem>482</destViewsElem>
     </destViews>
     <refFunctions >
     </refFunctions>
     <refWindows >
     </refWindows>
     <outputConstraintAttrs >
     </outputConstraintAttrs>
     <refViews >
     </refViews>
     <refRelns >
     </refRelns>
     <refTables >
      <refTablesElem>472</refTablesElem>
     </refTables>
     <cqlTxt>select * from tklog_S[range 1] </cqlTxt>
     <isNamed>false</isNamed>
     <isStatsEnabled>false</isStatsEnabled>
     <isRefExternal>false</isRefExternal>
     <isPrimaryKeyExist>false</isPrimaryKeyExist>
     <typ>QUERY</typ>
     <nameSpace>QUERY</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </Query>
    <Query Name="tklog_uda_float_float">
     <semQuery>null</semQuery>
     <logOpt>null</logOpt>
     <names >
      <namesElem>tklog_secondMax(float)</namesElem>
     </names>
     <state>RUN</state>
     <desiredState>RUN</desiredState>
     <extDests >
      <extDestsElem>oracle.cep.metadata.Destination</extDestsElem>
     </extDests>
     <destViews >
     </destViews>
     <refFunctions >
      <refFunctionsElem>489</refFunctionsElem>
     </refFunctions>
     <refWindows >
     </refWindows>
     <outputConstraintAttrs >
     </outputConstraintAttrs>
     <refViews >
     </refViews>
     <refRelns >
     </refRelns>
     <refTables >
      <refTablesElem>476</refTablesElem>
     </refTables>
     <cqlTxt> create query tklog_uda_float_float as select tklog_secondMax(c1) from tklog_S3[range 7] </cqlTxt>
     <isNamed>true</isNamed>
     <isStatsEnabled>false</isStatsEnabled>
     <isRefExternal>false</isRefExternal>
     <isPrimaryKeyExist>false</isPrimaryKeyExist>
     <typ>QUERY</typ>
     <nameSpace>QUERY</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </Query>
    <Query Name="tklog_q1">
     <semQuery>null</semQuery>
     <logOpt>null</logOpt>
     <names >
      <namesElem>tklog_R.d1</namesElem>
      <namesElem>tklog_R.d2</namesElem>
      <namesElem>tklog_S.c1</namesElem>
      <namesElem>tklog_S.c2</namesElem>
     </names>
     <state>RUN</state>
     <desiredState>RUN</desiredState>
     <extDests >
      <extDestsElem>oracle.cep.metadata.Destination</extDestsElem>
     </extDests>
     <destViews >
     </destViews>
     <refFunctions >
     </refFunctions>
     <refWindows >
     </refWindows>
     <outputConstraintAttrs >
     </outputConstraintAttrs>
     <refViews >
     </refViews>
     <refRelns >
      <refRelnsElem>oracle.cep.metadata.IdStub</refRelnsElem>
     </refRelns>
     <refTables >
      <refTablesElem>479</refTablesElem>
      <refTablesElem>472</refTablesElem>
     </refTables>
     <cqlTxt> create query tklog_q1 as select * from tklog_R, tklog_S[range 1] where tklog_S.c1 = tklog_R.d1 </cqlTxt>
     <isNamed>true</isNamed>
     <isStatsEnabled>false</isStatsEnabled>
     <isRefExternal>false</isRefExternal>
     <isPrimaryKeyExist>false</isPrimaryKeyExist>
     <typ>QUERY</typ>
     <nameSpace>QUERY</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </Query>
    <Query Name="tklog_qp10">
     <semQuery>null</semQuery>
     <logOpt>null</logOpt>
     <names >
      <namesElem>T.Ac1</namesElem>
      <namesElem>T.sumB</namesElem>
      <namesElem>T.Cc1</namesElem>
     </names>
     <state>RUN</state>
     <desiredState>RUN</desiredState>
     <extDests >
      <extDestsElem>oracle.cep.metadata.Destination</extDestsElem>
     </extDests>
     <destViews >
     </destViews>
     <refFunctions >
     </refFunctions>
     <refWindows >
     </refWindows>
     <outputConstraintAttrs >
     </outputConstraintAttrs>
     <refViews >
     </refViews>
     <refRelns >
     </refRelns>
     <refTables >
      <refTablesElem>474</refTablesElem>
     </refTables>
     <cqlTxt> create query tklog_qp10 as select T.Ac1, T.sumB, T.Cc1 from tklog_S5 MATCH_RECOGNIZE ( MEASURES A.c1 as Ac1, sum(B.c1) as sumB, C.c1 as Cc1 PATTERN(A B* C) DEFINE A as A.c1 = 10, B as B.c1 > A.c1 , C as C.c1 > B.c1) as T </cqlTxt>
     <isNamed>true</isNamed>
     <isStatsEnabled>false</isStatsEnabled>
     <isRefExternal>false</isRefExternal>
     <isPrimaryKeyExist>false</isPrimaryKeyExist>
     <typ>QUERY</typ>
     <nameSpace>QUERY</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </Query>
    <Query Name="tklog_q2">
     <semQuery>null</semQuery>
     <logOpt>null</logOpt>
     <names >
      <namesElem>tklog_R1.c1</namesElem>
      <namesElem>tklog_R1.c2</namesElem>
     </names>
     <state>RUN</state>
     <desiredState>RUN</desiredState>
     <extDests >
      <extDestsElem>oracle.cep.metadata.Destination</extDestsElem>
     </extDests>
     <destViews >
     </destViews>
     <refFunctions >
     </refFunctions>
     <refWindows >
     </refWindows>
     <outputConstraintAttrs >
     </outputConstraintAttrs>
     <refViews >
      <refViewsElem>482</refViewsElem>
     </refViews>
     <refRelns >
      <refRelnsElem>oracle.cep.metadata.IdStub</refRelnsElem>
     </refRelns>
     <refTables >
      <refTablesElem>480</refTablesElem>
     </refTables>
     <cqlTxt> create query tklog_q2 as tklog_R1 union all tklog_v1 </cqlTxt>
     <isNamed>true</isNamed>
     <isStatsEnabled>false</isStatsEnabled>
     <isRefExternal>false</isRefExternal>
     <isPrimaryKeyExist>false</isPrimaryKeyExist>
     <typ>QUERY</typ>
     <nameSpace>QUERY</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </Query>
    <Query Name="tklog_q3">
     <semQuery>null</semQuery>
     <logOpt>null</logOpt>
     <names >
      <namesElem>tklog_R1.c1</namesElem>
      <namesElem>tklog_R1.c2</namesElem>
     </names>
     <state>RUN</state>
     <desiredState>RUN</desiredState>
     <extDests >
      <extDestsElem>oracle.cep.metadata.Destination</extDestsElem>
     </extDests>
     <destViews >
     </destViews>
     <refFunctions >
     </refFunctions>
     <refWindows >
     </refWindows>
     <outputConstraintAttrs >
     </outputConstraintAttrs>
     <refViews >
      <refViewsElem>482</refViewsElem>
     </refViews>
     <refRelns >
      <refRelnsElem>oracle.cep.metadata.IdStub</refRelnsElem>
     </refRelns>
     <refTables >
      <refTablesElem>480</refTablesElem>
     </refTables>
     <cqlTxt> create query tklog_q3 as tklog_R1 except tklog_v1 </cqlTxt>
     <isNamed>true</isNamed>
     <isStatsEnabled>false</isStatsEnabled>
     <isRefExternal>false</isRefExternal>
     <isPrimaryKeyExist>false</isPrimaryKeyExist>
     <typ>QUERY</typ>
     <nameSpace>QUERY</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </Query>
    <Query Name="tklog_qp1">
     <semQuery>null</semQuery>
     <logOpt>null</logOpt>
     <names >
      <namesElem>T.Ac1</namesElem>
      <namesElem>T.Bc1</namesElem>
      <namesElem>T.Dc1</namesElem>
     </names>
     <state>RUN</state>
     <desiredState>RUN</desiredState>
     <extDests >
      <extDestsElem>oracle.cep.metadata.Destination</extDestsElem>
     </extDests>
     <destViews >
     </destViews>
     <refFunctions >
     </refFunctions>
     <refWindows >
     </refWindows>
     <outputConstraintAttrs >
     </outputConstraintAttrs>
     <refViews >
     </refViews>
     <refRelns >
     </refRelns>
     <refTables >
      <refTablesElem>478</refTablesElem>
     </refTables>
     <cqlTxt> create query tklog_qp1 as select T.Ac1,T.Bc1,T.Dc1 from tklog_S0 MATCH_RECOGNIZE ( MEASURES A.c1 as Ac1, B.c1 as Bc1, D.c1 as Dc1 PATTERN(A B C* D) DEFINE A as A.c1 = 30, B as B.c2 = 10.0, C as C.c1 = 7, D as D.c1 = 40) as T </cqlTxt>
     <isNamed>true</isNamed>
     <isStatsEnabled>false</isStatsEnabled>
     <isRefExternal>false</isRefExternal>
     <isPrimaryKeyExist>false</isPrimaryKeyExist>
     <typ>QUERY</typ>
     <nameSpace>QUERY</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </Query>
    <Query Name="">
     <semQuery>null</semQuery>
     <logOpt>null</logOpt>
     <names >
      <namesElem>tklog_S1.c1</namesElem>
     </names>
     <state>RUN</state>
     <desiredState>RUN</desiredState>
     <extDests >
     </extDests>
     <destViews >
      <destViewsElem>484</destViewsElem>
     </destViews>
     <refFunctions >
     </refFunctions>
     <refWindows >
     </refWindows>
     <outputConstraintAttrs >
     </outputConstraintAttrs>
     <refViews >
     </refViews>
     <refRelns >
     </refRelns>
     <refTables >
      <refTablesElem>473</refTablesElem>
     </refTables>
     <cqlTxt>IStream(select * from tklog_S1[range 10 slide 10]) </cqlTxt>
     <isNamed>false</isNamed>
     <isStatsEnabled>false</isStatsEnabled>
     <isRefExternal>false</isRefExternal>
     <isPrimaryKeyExist>false</isPrimaryKeyExist>
     <typ>QUERY</typ>
     <nameSpace>QUERY</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </Query>
    <Query Name="tklog_q79">
     <semQuery>null</semQuery>
     <logOpt>null</logOpt>
     <names >
      <namesElem>tklog_S12.c1</namesElem>
      <namesElem>tklog_S12.c2</namesElem>
     </names>
     <state>RUN</state>
     <desiredState>RUN</desiredState>
     <extDests >
      <extDestsElem>oracle.cep.metadata.Destination</extDestsElem>
     </extDests>
     <destViews >
     </destViews>
     <refFunctions >
     </refFunctions>
     <refWindows >
      <refWindowsElem>495</refWindowsElem>
     </refWindows>
     <outputConstraintAttrs >
     </outputConstraintAttrs>
     <refViews >
     </refViews>
     <refRelns >
     </refRelns>
     <refTables >
      <refTablesElem>477</refTablesElem>
     </refTables>
     <cqlTxt> create query tklog_q79 as select * from tklog_S12 [tklog_range_slide(10,5)] </cqlTxt>
     <isNamed>true</isNamed>
     <isStatsEnabled>false</isStatsEnabled>
     <isRefExternal>false</isRefExternal>
     <isPrimaryKeyExist>false</isPrimaryKeyExist>
     <typ>QUERY</typ>
     <nameSpace>QUERY</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </Query>
    <Query Name="tklog_q5">
     <semQuery>null</semQuery>
     <logOpt>null</logOpt>
     <names >
      <namesElem>tklog_v2.c1</namesElem>
      <namesElem>tklog_v2.element_time</namesElem>
     </names>
     <state>RUN</state>
     <desiredState>RUN</desiredState>
     <extDests >
      <extDestsElem>oracle.cep.metadata.Destination</extDestsElem>
     </extDests>
     <destViews >
     </destViews>
     <refFunctions >
     </refFunctions>
     <refWindows >
     </refWindows>
     <outputConstraintAttrs >
     </outputConstraintAttrs>
     <refViews >
      <refViewsElem>484</refViewsElem>
     </refViews>
     <refRelns >
     </refRelns>
     <refTables >
     </refTables>
     <cqlTxt> create query tklog_q5 as select c1, element_time from tklog_v2 </cqlTxt>
     <isNamed>true</isNamed>
     <isStatsEnabled>false</isStatsEnabled>
     <isRefExternal>false</isRefExternal>
     <isPrimaryKeyExist>false</isPrimaryKeyExist>
     <typ>QUERY</typ>
     <nameSpace>QUERY</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </Query>
   </Queries>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=METADATA_TABLE event=DUMP target=TableManager levels=2 3 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="0" TargetName="TableManager">
  <Level Name="MTABLE_INFO" Value="2">
   <Tables >
    <Table Key="tklog_SP3">
     <source><EndPointReference><Address>file://pcbpel/cep/test/data/inpSP1.txt</Address></EndPointReference></source>
     <cql> create stream tklog_SP3(c1 integer, name char(10)) </cql>
     <isSilent>false</isSilent>
     <isSystemTimestamped>false</isSystemTimestamped>
     <isStatsEnabled>false</isStatsEnabled>
     <refQueries >
     </refQueries>
     <numRefQueries>0</numRefQueries>
     <pushSource>false</pushSource>
     <isSystem>false</isSystem>
     <isDerivedTs>false</isDerivedTs>
     <derivedTs>null</derivedTs>
     <derivedTsExpr>null</derivedTsExpr>
     <primaryKeyAttrList>null</primaryKeyAttrList>
     <isPrimaryKeyExist>false</isPrimaryKeyExist>
     <timeOut>-1</timeOut>
     <attrList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>name</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </attrList>
     <bStream>true</bStream>
     <isExternal>false</isExternal>
     <typ>TABLE</typ>
     <nameSpace>SOURCE</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </Table>
    <Table Key="CEP$_NEXT_OBJECT_ID">
     <source>null</source>
     <cql>null</cql>
     <isSilent>false</isSilent>
     <isSystemTimestamped>false</isSystemTimestamped>
     <isStatsEnabled>false</isStatsEnabled>
     <refQueries >
     </refQueries>
     <numRefQueries>0</numRefQueries>
     <pushSource>false</pushSource>
     <isSystem>true</isSystem>
     <isDerivedTs>false</isDerivedTs>
     <derivedTs>null</derivedTs>
     <derivedTsExpr>null</derivedTsExpr>
     <primaryKeyAttrList>null</primaryKeyAttrList>
     <isPrimaryKeyExist>false</isPrimaryKeyExist>
     <timeOut>-1</timeOut>
     <attrList >
     </attrList>
     <bStream>false</bStream>
     <isExternal>false</isExternal>
     <typ>TABLE</typ>
     <nameSpace>SOURCE</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </Table>
    <Table Key="tklog_S5">
     <source><EndPointReference><Address>file://pcbpel/cep/test/data/inpPattern5.txt</Address></EndPointReference></source>
     <cql> create stream tklog_S5 (c1 integer, c2 float) </cql>
     <isSilent>false</isSilent>
     <isSystemTimestamped>false</isSystemTimestamped>
     <isStatsEnabled>false</isStatsEnabled>
     <refQueries >
      <refQueriesElem>498</refQueriesElem>
     </refQueries>
     <numRefQueries>1</numRefQueries>
     <pushSource>false</pushSource>
     <isSystem>false</isSystem>
     <isDerivedTs>false</isDerivedTs>
     <derivedTs>null</derivedTs>
     <derivedTsExpr>null</derivedTsExpr>
     <primaryKeyAttrList>null</primaryKeyAttrList>
     <isPrimaryKeyExist>false</isPrimaryKeyExist>
     <timeOut>-1</timeOut>
     <attrList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </attrList>
     <bStream>true</bStream>
     <isExternal>false</isExternal>
     <typ>TABLE</typ>
     <nameSpace>SOURCE</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </Table>
    <Table Key="tklog_S1">
     <source><EndPointReference><Address>file://pcbpel/cep/test/data/inpS1_data1.txt</Address></EndPointReference></source>
     <cql> create stream tklog_S1 (c1 integer) </cql>
     <isSilent>false</isSilent>
     <isSystemTimestamped>false</isSystemTimestamped>
     <isStatsEnabled>false</isStatsEnabled>
     <refQueries >
      <refQueriesElem>483</refQueriesElem>
     </refQueries>
     <numRefQueries>1</numRefQueries>
     <pushSource>false</pushSource>
     <isSystem>false</isSystem>
     <isDerivedTs>false</isDerivedTs>
     <derivedTs>null</derivedTs>
     <derivedTsExpr>null</derivedTsExpr>
     <primaryKeyAttrList>null</primaryKeyAttrList>
     <isPrimaryKeyExist>false</isPrimaryKeyExist>
     <timeOut>-1</timeOut>
     <attrList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </attrList>
     <bStream>true</bStream>
     <isExternal>false</isExternal>
     <typ>TABLE</typ>
     <nameSpace>SOURCE</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </Table>
    <Table Key="tklog_R">
     <source><EndPointReference><Address>file://pcbpel/cep/test/data/inpR.txt</Address></EndPointReference></source>
     <cql> create relation tklog_R (d1 integer, d2 char(10)) is silent </cql>
     <isSilent>true</isSilent>
     <isSystemTimestamped>false</isSystemTimestamped>
     <isStatsEnabled>false</isStatsEnabled>
     <refQueries >
      <refQueriesElem>485</refQueriesElem>
     </refQueries>
     <numRefQueries>1</numRefQueries>
     <pushSource>false</pushSource>
     <isSystem>false</isSystem>
     <isDerivedTs>false</isDerivedTs>
     <derivedTs>null</derivedTs>
     <derivedTsExpr>null</derivedTsExpr>
     <primaryKeyAttrList>null</primaryKeyAttrList>
     <isPrimaryKeyExist>false</isPrimaryKeyExist>
     <timeOut>-1</timeOut>
     <attrList >
      <Attribute>
       <position>0</position>
       <name>d1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>d2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </attrList>
     <bStream>false</bStream>
     <isExternal>false</isExternal>
     <typ>TABLE</typ>
     <nameSpace>SOURCE</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </Table>
    <Table Key="tklog_S0">
     <source><EndPointReference><Address>file://pcbpel/cep/test/data/inpPattern0.txt</Address></EndPointReference></source>
     <cql> create stream tklog_S0 (c1 integer, c2 float) </cql>
     <isSilent>false</isSilent>
     <isSystemTimestamped>false</isSystemTimestamped>
     <isStatsEnabled>false</isStatsEnabled>
     <refQueries >
      <refQueriesElem>497</refQueriesElem>
     </refQueries>
     <numRefQueries>1</numRefQueries>
     <pushSource>false</pushSource>
     <isSystem>false</isSystem>
     <isDerivedTs>false</isDerivedTs>
     <derivedTs>null</derivedTs>
     <derivedTsExpr>null</derivedTsExpr>
     <primaryKeyAttrList>null</primaryKeyAttrList>
     <isPrimaryKeyExist>false</isPrimaryKeyExist>
     <timeOut>-1</timeOut>
     <attrList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </attrList>
     <bStream>true</bStream>
     <isExternal>false</isExternal>
     <typ>TABLE</typ>
     <nameSpace>SOURCE</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </Table>
    <Table Key="tklog_R1">
     <source><EndPointReference><Address>file://pcbpel/cep/test/data/inpR-static.txt</Address></EndPointReference></source>
     <cql> create relation tklog_R1 (c1 integer, c2 float) is silent </cql>
     <isSilent>true</isSilent>
     <isSystemTimestamped>false</isSystemTimestamped>
     <isStatsEnabled>false</isStatsEnabled>
     <refQueries >
      <refQueriesElem>486</refQueriesElem>
      <refQueriesElem>487</refQueriesElem>
     </refQueries>
     <numRefQueries>2</numRefQueries>
     <pushSource>false</pushSource>
     <isSystem>false</isSystem>
     <isDerivedTs>false</isDerivedTs>
     <derivedTs>null</derivedTs>
     <derivedTsExpr>null</derivedTsExpr>
     <primaryKeyAttrList>null</primaryKeyAttrList>
     <isPrimaryKeyExist>false</isPrimaryKeyExist>
     <timeOut>-1</timeOut>
     <attrList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </attrList>
     <bStream>false</bStream>
     <isExternal>false</isExternal>
     <typ>TABLE</typ>
     <nameSpace>SOURCE</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </Table>
    <Table Key="tklog_S3">
     <source><EndPointReference><Address>file://pcbpel/cep/test/data/coverage3.txt</Address></EndPointReference></source>
     <cql> create stream tklog_S3 (c1 float) </cql>
     <isSilent>false</isSilent>
     <isSystemTimestamped>false</isSystemTimestamped>
     <isStatsEnabled>false</isStatsEnabled>
     <refQueries >
      <refQueriesElem>494</refQueriesElem>
     </refQueries>
     <numRefQueries>1</numRefQueries>
     <pushSource>false</pushSource>
     <isSystem>false</isSystem>
     <isDerivedTs>false</isDerivedTs>
     <derivedTs>null</derivedTs>
     <derivedTsExpr>null</derivedTsExpr>
     <primaryKeyAttrList>null</primaryKeyAttrList>
     <isPrimaryKeyExist>false</isPrimaryKeyExist>
     <timeOut>-1</timeOut>
     <attrList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </attrList>
     <bStream>true</bStream>
     <isExternal>false</isExternal>
     <typ>TABLE</typ>
     <nameSpace>SOURCE</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </Table>
    <Table Key="tklog_S12">
     <source><EndPointReference><Address>file://pcbpel/cep/test/data/inpS12.txt</Address></EndPointReference></source>
     <cql> create stream tklog_S12(c1 integer, c2 float) </cql>
     <isSilent>false</isSilent>
     <isSystemTimestamped>false</isSystemTimestamped>
     <isStatsEnabled>false</isStatsEnabled>
     <refQueries >
      <refQueriesElem>496</refQueriesElem>
     </refQueries>
     <numRefQueries>1</numRefQueries>
     <pushSource>false</pushSource>
     <isSystem>false</isSystem>
     <isDerivedTs>false</isDerivedTs>
     <derivedTs>null</derivedTs>
     <derivedTsExpr>null</derivedTsExpr>
     <primaryKeyAttrList>null</primaryKeyAttrList>
     <isPrimaryKeyExist>false</isPrimaryKeyExist>
     <timeOut>-1</timeOut>
     <attrList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </attrList>
     <bStream>true</bStream>
     <isExternal>false</isExternal>
     <typ>TABLE</typ>
     <nameSpace>SOURCE</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </Table>
    <Table Key="tklog_S">
     <source><EndPointReference><Address>file://pcbpel/cep/test/data/inpS1000.txt</Address></EndPointReference></source>
     <cql> create stream tklog_S (c1 integer, c2 float) is application timestamped </cql>
     <isSilent>false</isSilent>
     <isSystemTimestamped>false</isSystemTimestamped>
     <isStatsEnabled>false</isStatsEnabled>
     <refQueries >
      <refQueriesElem>481</refQueriesElem>
      <refQueriesElem>485</refQueriesElem>
     </refQueries>
     <numRefQueries>2</numRefQueries>
     <pushSource>false</pushSource>
     <isSystem>false</isSystem>
     <isDerivedTs>false</isDerivedTs>
     <derivedTs>null</derivedTs>
     <derivedTsExpr>null</derivedTsExpr>
     <primaryKeyAttrList>null</primaryKeyAttrList>
     <isPrimaryKeyExist>false</isPrimaryKeyExist>
     <timeOut>-1</timeOut>
     <attrList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </attrList>
     <bStream>true</bStream>
     <isExternal>false</isExternal>
     <typ>TABLE</typ>
     <nameSpace>SOURCE</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </Table>
   </Tables>
  </Level>
  <Level Name="MTABLE_LOCKINFO" Value="3">
   <Tables >
    <Table Key="tklog_SP3">
     <source><EndPointReference><Address>file://pcbpel/cep/test/data/inpSP1.txt</Address></EndPointReference></source>
     <cql> create stream tklog_SP3(c1 integer, name char(10)) </cql>
     <isSilent>false</isSilent>
     <isSystemTimestamped>false</isSystemTimestamped>
     <isStatsEnabled>false</isStatsEnabled>
     <refQueries >
     </refQueries>
     <numRefQueries>0</numRefQueries>
     <pushSource>false</pushSource>
     <isSystem>false</isSystem>
     <isDerivedTs>false</isDerivedTs>
     <derivedTs>null</derivedTs>
     <derivedTsExpr>null</derivedTsExpr>
     <primaryKeyAttrList>null</primaryKeyAttrList>
     <isPrimaryKeyExist>false</isPrimaryKeyExist>
     <timeOut>-1</timeOut>
     <attrList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>name</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </attrList>
     <bStream>true</bStream>
     <isExternal>false</isExternal>
     <typ>TABLE</typ>
     <nameSpace>SOURCE</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </Table>
    <Table Key="CEP$_NEXT_OBJECT_ID">
     <source>null</source>
     <cql>null</cql>
     <isSilent>false</isSilent>
     <isSystemTimestamped>false</isSystemTimestamped>
     <isStatsEnabled>false</isStatsEnabled>
     <refQueries >
     </refQueries>
     <numRefQueries>0</numRefQueries>
     <pushSource>false</pushSource>
     <isSystem>true</isSystem>
     <isDerivedTs>false</isDerivedTs>
     <derivedTs>null</derivedTs>
     <derivedTsExpr>null</derivedTsExpr>
     <primaryKeyAttrList>null</primaryKeyAttrList>
     <isPrimaryKeyExist>false</isPrimaryKeyExist>
     <timeOut>-1</timeOut>
     <attrList >
     </attrList>
     <bStream>false</bStream>
     <isExternal>false</isExternal>
     <typ>TABLE</typ>
     <nameSpace>SOURCE</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </Table>
    <Table Key="tklog_S5">
     <source><EndPointReference><Address>file://pcbpel/cep/test/data/inpPattern5.txt</Address></EndPointReference></source>
     <cql> create stream tklog_S5 (c1 integer, c2 float) </cql>
     <isSilent>false</isSilent>
     <isSystemTimestamped>false</isSystemTimestamped>
     <isStatsEnabled>false</isStatsEnabled>
     <refQueries >
      <refQueriesElem>498</refQueriesElem>
     </refQueries>
     <numRefQueries>1</numRefQueries>
     <pushSource>false</pushSource>
     <isSystem>false</isSystem>
     <isDerivedTs>false</isDerivedTs>
     <derivedTs>null</derivedTs>
     <derivedTsExpr>null</derivedTsExpr>
     <primaryKeyAttrList>null</primaryKeyAttrList>
     <isPrimaryKeyExist>false</isPrimaryKeyExist>
     <timeOut>-1</timeOut>
     <attrList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </attrList>
     <bStream>true</bStream>
     <isExternal>false</isExternal>
     <typ>TABLE</typ>
     <nameSpace>SOURCE</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </Table>
    <Table Key="tklog_S1">
     <source><EndPointReference><Address>file://pcbpel/cep/test/data/inpS1_data1.txt</Address></EndPointReference></source>
     <cql> create stream tklog_S1 (c1 integer) </cql>
     <isSilent>false</isSilent>
     <isSystemTimestamped>false</isSystemTimestamped>
     <isStatsEnabled>false</isStatsEnabled>
     <refQueries >
      <refQueriesElem>483</refQueriesElem>
     </refQueries>
     <numRefQueries>1</numRefQueries>
     <pushSource>false</pushSource>
     <isSystem>false</isSystem>
     <isDerivedTs>false</isDerivedTs>
     <derivedTs>null</derivedTs>
     <derivedTsExpr>null</derivedTsExpr>
     <primaryKeyAttrList>null</primaryKeyAttrList>
     <isPrimaryKeyExist>false</isPrimaryKeyExist>
     <timeOut>-1</timeOut>
     <attrList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </attrList>
     <bStream>true</bStream>
     <isExternal>false</isExternal>
     <typ>TABLE</typ>
     <nameSpace>SOURCE</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </Table>
    <Table Key="tklog_R">
     <source><EndPointReference><Address>file://pcbpel/cep/test/data/inpR.txt</Address></EndPointReference></source>
     <cql> create relation tklog_R (d1 integer, d2 char(10)) is silent </cql>
     <isSilent>true</isSilent>
     <isSystemTimestamped>false</isSystemTimestamped>
     <isStatsEnabled>false</isStatsEnabled>
     <refQueries >
      <refQueriesElem>485</refQueriesElem>
     </refQueries>
     <numRefQueries>1</numRefQueries>
     <pushSource>false</pushSource>
     <isSystem>false</isSystem>
     <isDerivedTs>false</isDerivedTs>
     <derivedTs>null</derivedTs>
     <derivedTsExpr>null</derivedTsExpr>
     <primaryKeyAttrList>null</primaryKeyAttrList>
     <isPrimaryKeyExist>false</isPrimaryKeyExist>
     <timeOut>-1</timeOut>
     <attrList >
      <Attribute>
       <position>0</position>
       <name>d1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>d2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </attrList>
     <bStream>false</bStream>
     <isExternal>false</isExternal>
     <typ>TABLE</typ>
     <nameSpace>SOURCE</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </Table>
    <Table Key="tklog_S0">
     <source><EndPointReference><Address>file://pcbpel/cep/test/data/inpPattern0.txt</Address></EndPointReference></source>
     <cql> create stream tklog_S0 (c1 integer, c2 float) </cql>
     <isSilent>false</isSilent>
     <isSystemTimestamped>false</isSystemTimestamped>
     <isStatsEnabled>false</isStatsEnabled>
     <refQueries >
      <refQueriesElem>497</refQueriesElem>
     </refQueries>
     <numRefQueries>1</numRefQueries>
     <pushSource>false</pushSource>
     <isSystem>false</isSystem>
     <isDerivedTs>false</isDerivedTs>
     <derivedTs>null</derivedTs>
     <derivedTsExpr>null</derivedTsExpr>
     <primaryKeyAttrList>null</primaryKeyAttrList>
     <isPrimaryKeyExist>false</isPrimaryKeyExist>
     <timeOut>-1</timeOut>
     <attrList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </attrList>
     <bStream>true</bStream>
     <isExternal>false</isExternal>
     <typ>TABLE</typ>
     <nameSpace>SOURCE</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </Table>
    <Table Key="tklog_R1">
     <source><EndPointReference><Address>file://pcbpel/cep/test/data/inpR-static.txt</Address></EndPointReference></source>
     <cql> create relation tklog_R1 (c1 integer, c2 float) is silent </cql>
     <isSilent>true</isSilent>
     <isSystemTimestamped>false</isSystemTimestamped>
     <isStatsEnabled>false</isStatsEnabled>
     <refQueries >
      <refQueriesElem>486</refQueriesElem>
      <refQueriesElem>487</refQueriesElem>
     </refQueries>
     <numRefQueries>2</numRefQueries>
     <pushSource>false</pushSource>
     <isSystem>false</isSystem>
     <isDerivedTs>false</isDerivedTs>
     <derivedTs>null</derivedTs>
     <derivedTsExpr>null</derivedTsExpr>
     <primaryKeyAttrList>null</primaryKeyAttrList>
     <isPrimaryKeyExist>false</isPrimaryKeyExist>
     <timeOut>-1</timeOut>
     <attrList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </attrList>
     <bStream>false</bStream>
     <isExternal>false</isExternal>
     <typ>TABLE</typ>
     <nameSpace>SOURCE</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </Table>
    <Table Key="tklog_S3">
     <source><EndPointReference><Address>file://pcbpel/cep/test/data/coverage3.txt</Address></EndPointReference></source>
     <cql> create stream tklog_S3 (c1 float) </cql>
     <isSilent>false</isSilent>
     <isSystemTimestamped>false</isSystemTimestamped>
     <isStatsEnabled>false</isStatsEnabled>
     <refQueries >
      <refQueriesElem>494</refQueriesElem>
     </refQueries>
     <numRefQueries>1</numRefQueries>
     <pushSource>false</pushSource>
     <isSystem>false</isSystem>
     <isDerivedTs>false</isDerivedTs>
     <derivedTs>null</derivedTs>
     <derivedTsExpr>null</derivedTsExpr>
     <primaryKeyAttrList>null</primaryKeyAttrList>
     <isPrimaryKeyExist>false</isPrimaryKeyExist>
     <timeOut>-1</timeOut>
     <attrList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </attrList>
     <bStream>true</bStream>
     <isExternal>false</isExternal>
     <typ>TABLE</typ>
     <nameSpace>SOURCE</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </Table>
    <Table Key="tklog_S12">
     <source><EndPointReference><Address>file://pcbpel/cep/test/data/inpS12.txt</Address></EndPointReference></source>
     <cql> create stream tklog_S12(c1 integer, c2 float) </cql>
     <isSilent>false</isSilent>
     <isSystemTimestamped>false</isSystemTimestamped>
     <isStatsEnabled>false</isStatsEnabled>
     <refQueries >
      <refQueriesElem>496</refQueriesElem>
     </refQueries>
     <numRefQueries>1</numRefQueries>
     <pushSource>false</pushSource>
     <isSystem>false</isSystem>
     <isDerivedTs>false</isDerivedTs>
     <derivedTs>null</derivedTs>
     <derivedTsExpr>null</derivedTsExpr>
     <primaryKeyAttrList>null</primaryKeyAttrList>
     <isPrimaryKeyExist>false</isPrimaryKeyExist>
     <timeOut>-1</timeOut>
     <attrList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </attrList>
     <bStream>true</bStream>
     <isExternal>false</isExternal>
     <typ>TABLE</typ>
     <nameSpace>SOURCE</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </Table>
    <Table Key="tklog_S">
     <source><EndPointReference><Address>file://pcbpel/cep/test/data/inpS1000.txt</Address></EndPointReference></source>
     <cql> create stream tklog_S (c1 integer, c2 float) is application timestamped </cql>
     <isSilent>false</isSilent>
     <isSystemTimestamped>false</isSystemTimestamped>
     <isStatsEnabled>false</isStatsEnabled>
     <refQueries >
      <refQueriesElem>481</refQueriesElem>
      <refQueriesElem>485</refQueriesElem>
     </refQueries>
     <numRefQueries>2</numRefQueries>
     <pushSource>false</pushSource>
     <isSystem>false</isSystem>
     <isDerivedTs>false</isDerivedTs>
     <derivedTs>null</derivedTs>
     <derivedTsExpr>null</derivedTsExpr>
     <primaryKeyAttrList>null</primaryKeyAttrList>
     <isPrimaryKeyExist>false</isPrimaryKeyExist>
     <timeOut>-1</timeOut>
     <attrList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </attrList>
     <bStream>true</bStream>
     <isExternal>false</isExternal>
     <typ>TABLE</typ>
     <nameSpace>SOURCE</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </Table>
   </Tables>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=METADATA_USERFUNC event=DUMP target=UserFunctionManager levels=2 3 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="0" TargetName="UserFunctionManager">
  <Level Name="MUSERFUNC_INFO" Value="2">
   <SingleFunctions >
    <SimpleFunction Key="ltet(interval,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ltet(c1 interval, c2 interval) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="plus(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function plus(c1 double, c2 double) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="ltrim(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ltrim(c1 char, c2 char) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="gt(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gt(c1 bigint, c2 bigint) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="incompleteBeta(double,double,double)">
     <implClass>oracle.cep.colt.functions.CEPIncompleteBeta</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPIncompleteBeta</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function incompleteBeta(c1 double, c2 double, c3 double) return double as language java name "oracle.cep.colt.functions.CEPIncompleteBeta"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="poissonComplemented(int,double)">
     <implClass>oracle.cep.colt.functions.CEPPoissonComplemented</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPPoissonComplemented</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function poissonComplemented(c1 integer, c2 double) return double as language java name "oracle.cep.colt.functions.CEPPoissonComplemented"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="nvl(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function nvl(c1 int, c2 int) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="normal1(double,double,double)">
     <implClass>oracle.cep.colt.functions.CEPNormal1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPNormal1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function normal1(c1 double, c2 double, c3 double) return double as language java name "oracle.cep.colt.functions.CEPNormal1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="abs2(float)">
     <implClass>oracle.cep.colt.functions.CEPAbs2</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>oracle.cep.colt.functions.CEPAbs2</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function abs2(c1 float) return float as language java name "oracle.cep.colt.functions.CEPAbs2"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="negativeBinomial(int,int,double)">
     <implClass>oracle.cep.colt.functions.CEPNegativeBinomial</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPNegativeBinomial</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function negativeBinomial(c1 integer, c2 integer, c3 double) return double as language java name "oracle.cep.colt.functions.CEPNegativeBinomial"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="initcap(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function initcap(c1 char) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="toRadians(double)">
     <implClass>oracle.cep.colt.functions.CEPToRadians</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPToRadians</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function toRadians(c1 double) return double as language java name "oracle.cep.colt.functions.CEPToRadians"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="lt(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lt(c1 bigint, c2 bigint) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="gtet(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gtet(c1 int, c2 int) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="hypot(double,double)">
     <implClass>oracle.cep.colt.functions.CEPHypot</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPHypot</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function hypot(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPHypot"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="divide(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function divide(c1 bigint, c2 bigint) return bigint as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="net(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function net(c1 float, c2 float) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="nvl(timestamp,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function nvl(c1 timestamp, c2 timestamp) return timestamp as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="k1e(double)">
     <implClass>oracle.cep.colt.functions.CEPK1e</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPK1e</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function k1e(c1 double) return double as language java name "oracle.cep.colt.functions.CEPK1e"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="to_double(float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function to_double(c1 float) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="cosh(double)">
     <implClass>oracle.cep.colt.functions.CEPCosh</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPCosh</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function cosh(c1 double) return double as language java name "oracle.cep.colt.functions.CEPCosh"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="multiply(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function multiply(c1 float, c2 float) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="signum1(float)">
     <implClass>oracle.cep.colt.functions.CEPSignum1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>oracle.cep.colt.functions.CEPSignum1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function signum1(c1 float) return float as language java name "oracle.cep.colt.functions.CEPSignum1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="rpad(char,int,char)">
     <implClass>oracle.cep.extensibility.functions.builtin.Rpad</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Rpad</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function rpad(c1 char, c2 int, c3 char) return char as language java name "oracle.cep.extensibility.functions.builtin.Rpad"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="multiply(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function multiply(c1 double, c2 double) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="is_null(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function is_null(c1 char) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="expm1(double)">
     <implClass>oracle.cep.colt.functions.CEPExpm1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPExpm1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function expm1(c1 double) return double as language java name "oracle.cep.colt.functions.CEPExpm1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="to_double(bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function to_double(c1 bigint) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="et(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function et(c1 int, c2 int) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="to_timestamp(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function to_timestamp(c1 char) return timestamp as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="et(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function et(c1 bigint, c2 bigint) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="k0(double)">
     <implClass>oracle.cep.colt.functions.CEPK0</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPK0</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function k0(c1 double) return double as language java name "oracle.cep.colt.functions.CEPK0"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="nvl(interval,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function nvl(c1 interval, c2 interval) return interval as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="lt(timestamp,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lt(c1 timestamp, c2 timestamp) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="hash2(int)">
     <implClass>oracle.cep.colt.functions.CEPHash2</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.colt.functions.CEPHash2</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function hash2(c1 integer) return integer as language java name "oracle.cep.colt.functions.CEPHash2"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="tan(double)">
     <implClass>oracle.cep.colt.functions.CEPTan</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPTan</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function tan(c1 double) return double as language java name "oracle.cep.colt.functions.CEPTan"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="lt(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lt(c1 char, c2 char) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="ltet(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ltet(c1 double, c2 double) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="translate(char,char,char)">
     <implClass>oracle.cep.extensibility.functions.builtin.Translate</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Translate</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function translate(c1 char, c2 char, c3 char) return char as language java name "oracle.cep.extensibility.functions.builtin.Translate"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(float,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 float, n int) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="beta(double,double)">
     <implClass>oracle.cep.colt.functions.CEPBeta</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPBeta</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function beta(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPBeta"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="systimestamp()">
     <implClass>null</implClass>
     <paramList >
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function systimestamp return timestamp as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(byte,int,int,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>3</position>
       <name>c4</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 byte, n int, c3 int, c4 timestamp) return byte as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="logGamma(double)">
     <implClass>oracle.cep.colt.functions.CEPLogGamma</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPLogGamma</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function logGamma(c1 double) return double as language java name "oracle.cep.colt.functions.CEPLogGamma"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="ulp(double)">
     <implClass>oracle.cep.colt.functions.CEPUlp</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPUlp</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ulp(c1 double) return double as language java name "oracle.cep.colt.functions.CEPUlp"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="sin(double)">
     <implClass>oracle.cep.colt.functions.CEPSin</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPSin</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function sin(c1 double) return double as language java name "oracle.cep.colt.functions.CEPSin"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="plus(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function plus(c1 bigint, c2 bigint) return bigint as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="toDegrees(double)">
     <implClass>oracle.cep.colt.functions.CEPToDegrees</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPToDegrees</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function toDegrees(c1 double) return double as language java name "oracle.cep.colt.functions.CEPToDegrees"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="ltrim(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ltrim(c1 char) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="lower(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lower(c1 char) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="leastSignificantBit(int)">
     <implClass>oracle.cep.colt.functions.CEPLeastSignificantBit</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.colt.functions.CEPLeastSignificantBit</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function leastSignificantBit(c1 integer) return integer as language java name "oracle.cep.colt.functions.CEPLeastSignificantBit"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="gtet(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gtet(c1 char, c2 char) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="cos(double)">
     <implClass>oracle.cep.colt.functions.CEPCos</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPCos</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function cos(c1 double) return double as language java name "oracle.cep.colt.functions.CEPCos"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="length(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function length(c char) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="k0e(double)">
     <implClass>oracle.cep.colt.functions.CEPK0e</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPK0e</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function k0e(c1 double) return double as language java name "oracle.cep.colt.functions.CEPK0e"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="to_float(bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function to_float(c1 bigint) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="multiply(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function multiply(c1 bigint, c2 bigint) return bigint as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="net(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function net(c1 double, c2 double) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="gt(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gt(c1 int, c2 int) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="mostSignificantBit(int)">
     <implClass>oracle.cep.colt.functions.CEPMostSignificantBit</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.colt.functions.CEPMostSignificantBit</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function mostSignificantBit(c1 integer) return integer as language java name "oracle.cep.colt.functions.CEPMostSignificantBit"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="nvl(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function nvl(c1 double, c2 double) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="et(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function et(c1 char, c2 char) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="lt(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lt(c1 int, c2 int) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="gtet(timestamp,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gtet(c1 timestamp, c2 timestamp) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="signum(double)">
     <implClass>oracle.cep.colt.functions.CEPSignum</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPSignum</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function signum(c1 double) return double as language java name "oracle.cep.colt.functions.CEPSignum"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 bigint) return bigint as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="j0(double)">
     <implClass>oracle.cep.colt.functions.CEPJ0</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPJ0</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function j0(c1 double) return double as language java name "oracle.cep.colt.functions.CEPJ0"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="ceil1(double)">
     <implClass>oracle.cep.colt.functions.CEPCeil1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPCeil1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ceil1(c1 double) return double as language java name "oracle.cep.colt.functions.CEPCeil1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="abs(int)">
     <implClass>oracle.cep.colt.functions.CEPAbs</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.colt.functions.CEPAbs</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function abs(c1 integer) return integer as language java name "oracle.cep.colt.functions.CEPAbs"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="ceil(double)">
     <implClass>oracle.cep.colt.functions.CEPCeil</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>oracle.cep.colt.functions.CEPCeil</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ceil(c1 double) return bigint as language java name "oracle.cep.colt.functions.CEPCeil"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="gt(interval,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gt(c1 interval, c2 interval) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="subtract(timestamp,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function subtract(c1 timestamp, c2 timestamp) return interval as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="ltet(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ltet(c1 bigint, c2 bigint) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(float,int,int,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>3</position>
       <name>c4</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 float, n int, c3 int, c4 timestamp) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="betaComplemented(double,double,double)">
     <implClass>oracle.cep.colt.functions.CEPBetaComplemented</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPBetaComplemented</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function betaComplemented(c1 double, c2 double, c3 double) return double as language java name "oracle.cep.colt.functions.CEPBetaComplemented"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="floor1(double)">
     <implClass>oracle.cep.colt.functions.CEPFloor1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPFloor1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function floor1(c1 double) return double as language java name "oracle.cep.colt.functions.CEPFloor1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="plus(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function plus(c1 int, c2 int) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="concat(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function concat(c1 char, c2 char) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="gtet(interval,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gtet(c1 interval, c2 interval) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(int,int,int,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>3</position>
       <name>c4</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 int, n int, c3 int, c4 timestamp) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="plus(timestamp,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function plus(c1 timestamp, c2 interval) return timestamp as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="k1(double)">
     <implClass>oracle.cep.colt.functions.CEPK1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPK1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function k1(c1 double) return double as language java name "oracle.cep.colt.functions.CEPK1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="chiSquareComplemented(double,double)">
     <implClass>oracle.cep.colt.functions.CEPChiSquareComplemented</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPChiSquareComplemented</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function chiSquareComplemented(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPChiSquareComplemented"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="kn(int,double)">
     <implClass>oracle.cep.colt.functions.CEPKn</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPKn</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function kn(c1 integer, c2 double) return double as language java name "oracle.cep.colt.functions.CEPKn"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="hextoraw(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function hextoraw(c char) return byte as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="mod(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function mod(c1 double, c2 double) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="et(byte,byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function et(c1 byte, c2 byte) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="hash1(float)">
     <implClass>oracle.cep.colt.functions.CEPHash1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.colt.functions.CEPHash1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function hash1(c1 float) return integer as language java name "oracle.cep.colt.functions.CEPHash1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="factorial(int)">
     <implClass>oracle.cep.colt.functions.CEPFactorial</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPFactorial</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function factorial(c1 integer) return double as language java name "oracle.cep.colt.functions.CEPFactorial"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="lt(byte,byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lt(c1 byte, c2 byte) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="to_float(int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function to_float(c1 int) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="j1(double)">
     <implClass>oracle.cep.colt.functions.CEPJ1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPJ1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function j1(c1 double) return double as language java name "oracle.cep.colt.functions.CEPJ1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="poisson(int,double)">
     <implClass>oracle.cep.colt.functions.CEPPoisson</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPPoisson</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function poisson(c1 integer, c2 double) return double as language java name "oracle.cep.colt.functions.CEPPoisson"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="mod(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function mod(c1 bigint, c2 bigint) return bigint as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="multiply(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function multiply(c1 int, c2 int) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="longFactorial(int)">
     <implClass>oracle.cep.colt.functions.CEPLongFactorial</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>oracle.cep.colt.functions.CEPLongFactorial</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function longFactorial(c1 integer) return bigint as language java name "oracle.cep.colt.functions.CEPLongFactorial"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="subtract(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function subtract(c1 double, c2 double) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 byte) return byte as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="exp(double)">
     <implClass>oracle.cep.colt.functions.CEPExp</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPExp</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function exp(c1 double) return double as language java name "oracle.cep.colt.functions.CEPExp"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="XMLQUERY(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>xmltype</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function XMLQUERY(c1 char) return xmltype as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="ltet(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ltet(c1 char, c2 char) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="net(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function net(c1 bigint, c2 bigint) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="binomial(double,bigint)">
     <implClass>oracle.cep.colt.functions.CEPBinomial</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPBinomial</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function binomial(c1 double, c2 bigint) return double as language java name "oracle.cep.colt.functions.CEPBinomial"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="net(timestamp,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function net(c1 timestamp, c2 timestamp) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="gtet(byte,byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gtet(c1 byte, c2 byte) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="nvl(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function nvl(c1 bigint, c2 bigint) return bigint as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 int) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="log10(double)">
     <implClass>oracle.cep.colt.functions.CEPLog10</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPLog10</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function log10(c1 double) return double as language java name "oracle.cep.colt.functions.CEPLog10"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="log1p(double)">
     <implClass>oracle.cep.colt.functions.CEPLog1p</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPLog1p</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function log1p(c1 double) return double as language java name "oracle.cep.colt.functions.CEPLog1p"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="errorFunctionComplemented(double)">
     <implClass>oracle.cep.colt.functions.CEPErrorFunctionComplemented</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPErrorFunctionComplemented</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function errorFunctionComplemented(c1 double) return double as language java name "oracle.cep.colt.functions.CEPErrorFunctionComplemented"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="sqrt(double)">
     <implClass>oracle.cep.colt.functions.CEPSqrt</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPSqrt</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function sqrt(c1 double) return double as language java name "oracle.cep.colt.functions.CEPSqrt"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="is_null(timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function is_null(c1 timestamp) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="i0(double)">
     <implClass>oracle.cep.colt.functions.CEPI0</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPI0</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function i0(c1 double) return double as language java name "oracle.cep.colt.functions.CEPI0"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="divide(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function divide(c1 int, c2 int) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="abs3(double)">
     <implClass>oracle.cep.colt.functions.CEPAbs3</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPAbs3</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function abs3(c1 double) return double as language java name "oracle.cep.colt.functions.CEPAbs3"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="beta1(double,double,double)">
     <implClass>oracle.cep.colt.functions.CEPBeta1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPBeta1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function beta1(c1 double, c2 double, c3 double) return double as language java name "oracle.cep.colt.functions.CEPBeta1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="gt(timestamp,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gt(c1 timestamp, c2 timestamp) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="substr(char,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function substr(c1 char, c2 int) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="subtract(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function subtract(c1 float, c2 float) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="log_xor(boolean,boolean)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>boolean</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>boolean</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function log_xor(c1 boolean, c2 boolean) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="net(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function net(c1 int, c2 int) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="pow(double,double)">
     <implClass>oracle.cep.colt.functions.CEPPow</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPPow</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function pow(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPPow"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="rawtohex(byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>b</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function rawtohex(b byte) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(char,int,int,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>3</position>
       <name>c4</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 char, n int, c3 int, c4 timestamp) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="ltet(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ltet(c1 int, c2 int) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="gtet(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gtet(c1 float, c2 float) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="ltet(byte,byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ltet(c1 byte, c2 byte) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="plus(interval,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function plus(c1 interval, c2 timestamp) return timestamp as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="is_null(interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function is_null(c1 interval) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="binomial1(bigint,bigint)">
     <implClass>oracle.cep.colt.functions.CEPBinomial1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPBinomial1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function binomial1(c1 bigint, c2 bigint) return double as language java name "oracle.cep.colt.functions.CEPBinomial1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="normal(double)">
     <implClass>oracle.cep.colt.functions.CEPNormal</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPNormal</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function normal(c1 double) return double as language java name "oracle.cep.colt.functions.CEPNormal"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="yn(int,double)">
     <implClass>oracle.cep.colt.functions.CEPYn</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPYn</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function yn(c1 integer, c2 double) return double as language java name "oracle.cep.colt.functions.CEPYn"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(byte,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 byte, n int) return byte as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="plus(interval,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function plus(c1 interval, c2 interval) return interval as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="floor(double)">
     <implClass>oracle.cep.colt.functions.CEPFloor</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>oracle.cep.colt.functions.CEPFloor</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function floor(c1 double) return bigint as language java name "oracle.cep.colt.functions.CEPFloor"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="stirlingCorrection(int)">
     <implClass>oracle.cep.colt.functions.CEPStirlingCorrection</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPStirlingCorrection</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function stirlingCorrection(c1 integer) return double as language java name "oracle.cep.colt.functions.CEPStirlingCorrection"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="mod(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function mod(c1 float, c2 float) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="ltet(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ltet(c1 float, c2 float) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="i1(double)">
     <implClass>oracle.cep.colt.functions.CEPI1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPI1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function i1(c1 double) return double as language java name "oracle.cep.colt.functions.CEPI1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="hash(double)">
     <implClass>oracle.cep.colt.functions.CEPHash</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.colt.functions.CEPHash</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function hash(c1 double) return integer as language java name "oracle.cep.colt.functions.CEPHash"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 float) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="concat(byte,byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>b1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>b2</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function concat(b1 byte, b2 byte) return byte as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 timestamp) return timestamp as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="plus(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function plus(c1 float, c2 float) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="subtract(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function subtract(c1 bigint, c2 bigint) return bigint as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="subtract(interval,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function subtract(c1 interval, c2 interval) return interval as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 char) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="upper(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function upper(c1 char) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="errorFunction(double)">
     <implClass>oracle.cep.colt.functions.CEPErrorFunction</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPErrorFunction</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function errorFunction(c1 double) return double as language java name "oracle.cep.colt.functions.CEPErrorFunction"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="incompleteGammaComplement(double,double)">
     <implClass>oracle.cep.colt.functions.CEPIncompleteGammaComplement</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPIncompleteGammaComplement</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function incompleteGammaComplement(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPIncompleteGammaComplement"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(interval,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 interval, n int) return interval as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="is_null(double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function is_null(c1 double) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="to_timestamp(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function to_timestamp(c1 char, c2 char) return timestamp as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="atan(double)">
     <implClass>oracle.cep.colt.functions.CEPAtan</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPAtan</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function atan(c1 double) return double as language java name "oracle.cep.colt.functions.CEPAtan"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="et(boolean,boolean)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>boolean</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>boolean</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function et(c1 boolean, c2 boolean) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="net(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function net(c1 char, c2 char) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="abs1(bigint)">
     <implClass>oracle.cep.colt.functions.CEPAbs1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>oracle.cep.colt.functions.CEPAbs1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function abs1(c1 bigint) return bigint as language java name "oracle.cep.colt.functions.CEPAbs1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="lk(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lk(c1 char, c2 char) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="gt(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gt(c1 char, c2 char) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(bigint,int,int,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>3</position>
       <name>c4</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 bigint, n int, c3 int, c4 timestamp) return bigint as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="net(interval,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function net(c1 interval, c2 interval) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="asin(double)">
     <implClass>oracle.cep.colt.functions.CEPAsin</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPAsin</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function asin(c1 double) return double as language java name "oracle.cep.colt.functions.CEPAsin"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="mod(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function mod(c1 int, c2 int) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 interval) return interval as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="bitMaskWithBitsSetFromTo(int,int)">
     <implClass>oracle.cep.colt.functions.CEPBitMaskWithBitsSetFromTo</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>oracle.cep.colt.functions.CEPBitMaskWithBitsSetFromTo</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function bitMaskWithBitsSetFromTo(c1 integer, c2 integer) return bigint as language java name "oracle.cep.colt.functions.CEPBitMaskWithBitsSetFromTo"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="log1(double)">
     <implClass>oracle.cep.colt.functions.CEPLog1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPLog1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function log1(c1 double) return double as language java name "oracle.cep.colt.functions.CEPLog1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="log_or(boolean,boolean)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>boolean</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>boolean</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function log_or(c1 boolean, c2 boolean) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="hash3(bigint)">
     <implClass>oracle.cep.colt.functions.CEPHash3</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.colt.functions.CEPHash3</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function hash3(c1 bigint) return integer as language java name "oracle.cep.colt.functions.CEPHash3"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="rpad(char,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function rpad(c1 char, c2 int) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="y0(double)">
     <implClass>oracle.cep.colt.functions.CEPY0</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPY0</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function y0(c1 double) return double as language java name "oracle.cep.colt.functions.CEPY0"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="XMLEXISTS(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function XMLEXISTS(c1 char) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="jn(int,double)">
     <implClass>oracle.cep.colt.functions.CEPJn</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPJn</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function jn(c1 integer, c2 double) return double as language java name "oracle.cep.colt.functions.CEPJn"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="acos(double)">
     <implClass>oracle.cep.colt.functions.CEPAcos</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPAcos</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function acos(c1 double) return double as language java name "oracle.cep.colt.functions.CEPAcos"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 int, n int) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="binomialComplemented(int,int,double)">
     <implClass>oracle.cep.colt.functions.CEPBinomialComplemented</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPBinomialComplemented</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function binomialComplemented(c1 integer, c2 integer, c3 double) return double as language java name "oracle.cep.colt.functions.CEPBinomialComplemented"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="incompleteGamma(double,double)">
     <implClass>oracle.cep.colt.functions.CEPIncompleteGamma</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPIncompleteGamma</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function incompleteGamma(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPIncompleteGamma"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="rtrim(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function rtrim(c1 char, c2 char) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="lt(interval,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lt(c1 interval, c2 interval) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="is_null(int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function is_null(c1 int) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="gt(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gt(c1 float, c2 float) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="log(double,double)">
     <implClass>oracle.cep.colt.functions.CEPLog</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPLog</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function log(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPLog"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="nvl(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function nvl(c1 char, c2 char) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="is_null(byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function is_null(c1 byte) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="chiSquare(double,double)">
     <implClass>oracle.cep.colt.functions.CEPChiSquare</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPChiSquare</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function chiSquare(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPChiSquare"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="gamma1(double,double,double)">
     <implClass>oracle.cep.colt.functions.CEPGamma1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPGamma1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gamma1(c1 double, c2 double, c3 double) return double as language java name "oracle.cep.colt.functions.CEPGamma1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="gt(byte,byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gt(c1 byte, c2 byte) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="log_not(boolean)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>boolean</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function log_not(c1 boolean) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="lpad(char,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lpad(c1 char, c2 int) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="gamma(double)">
     <implClass>oracle.cep.colt.functions.CEPGamma</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPGamma</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gamma(c1 double) return double as language java name "oracle.cep.colt.functions.CEPGamma"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="tanh(double)">
     <implClass>oracle.cep.colt.functions.CEPTanh</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPTanh</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function tanh(c1 double) return double as language java name "oracle.cep.colt.functions.CEPTanh"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="normalInverse(double)">
     <implClass>oracle.cep.colt.functions.CEPNormalInverse</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPNormalInverse</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function normalInverse(c1 double) return double as language java name "oracle.cep.colt.functions.CEPNormalInverse"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="getSeedAtRowColumn(int,int)">
     <implClass>oracle.cep.colt.functions.CEPGetSeedAtRowColumn</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.colt.functions.CEPGetSeedAtRowColumn</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function getSeedAtRowColumn(c1 integer, c2 integer) return integer as language java name "oracle.cep.colt.functions.CEPGetSeedAtRowColumn"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="round(float)">
     <implClass>oracle.cep.colt.functions.CEPRound</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.colt.functions.CEPRound</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function round(c1 float) return integer as language java name "oracle.cep.colt.functions.CEPRound"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="gtet(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gtet(c1 double, c2 double) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="negativeBinomialComplemented(int,int,double)">
     <implClass>oracle.cep.colt.functions.CEPNegativeBinomialComplemented</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPNegativeBinomialComplemented</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function negativeBinomialComplemented(c1 integer, c2 integer, c3 double) return double as language java name "oracle.cep.colt.functions.CEPNegativeBinomialComplemented"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="log2(double)">
     <implClass>oracle.cep.colt.functions.CEPLog2</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPLog2</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function log2(c1 double) return double as language java name "oracle.cep.colt.functions.CEPLog2"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="lt(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lt(c1 float, c2 float) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="y1(double)">
     <implClass>oracle.cep.colt.functions.CEPY1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPY1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function y1(c1 double) return double as language java name "oracle.cep.colt.functions.CEPY1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="round1(double)">
     <implClass>oracle.cep.colt.functions.CEPRound1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>oracle.cep.colt.functions.CEPRound1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function round1(c1 double) return bigint as language java name "oracle.cep.colt.functions.CEPRound1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="log101(double)">
     <implClass>oracle.cep.colt.functions.CEPLog101</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPLog101</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function log101(c1 double) return double as language java name "oracle.cep.colt.functions.CEPLog101"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="studentT(double,double)">
     <implClass>oracle.cep.colt.functions.CEPStudentT</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPStudentT</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function studentT(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPStudentT"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="cbrt(double)">
     <implClass>oracle.cep.colt.functions.CEPCbrt</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPCbrt</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function cbrt(c1 double) return double as language java name "oracle.cep.colt.functions.CEPCbrt"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="is_null(float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function is_null(c1 float) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="binomial2(int,int,double)">
     <implClass>oracle.cep.colt.functions.CEPBinomial2</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPBinomial2</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function binomial2(c1 integer, c2 integer, c3 double) return double as language java name "oracle.cep.colt.functions.CEPBinomial2"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="IEEEremainder(double,double)">
     <implClass>oracle.cep.colt.functions.CEPIEEEremainder</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPIEEEremainder</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function IEEEremainder(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPIEEEremainder"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="to_bigint(int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function to_bigint(c1 int) return bigint as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(bigint,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 bigint, n int) return bigint as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="studentTInverse(double,int)">
     <implClass>oracle.cep.colt.functions.CEPStudentTInverse</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPStudentTInverse</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function studentTInverse(c1 double, c2 integer) return double as language java name "oracle.cep.colt.functions.CEPStudentTInverse"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="ltet(timestamp,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ltet(c1 timestamp, c2 timestamp) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="rtrim(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function rtrim(c1 char) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="gammaComplemented(double,double,double)">
     <implClass>oracle.cep.colt.functions.CEPGammaComplemented</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPGammaComplemented</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gammaComplemented(c1 double, c2 double, c3 double) return double as language java name "oracle.cep.colt.functions.CEPGammaComplemented"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="et(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function et(c1 float, c2 float) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="lt(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lt(c1 double, c2 double) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="rint(double)">
     <implClass>oracle.cep.colt.functions.CEPRint</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPRint</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function rint(c1 double) return double as language java name "oracle.cep.colt.functions.CEPRint"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="sinh(double)">
     <implClass>oracle.cep.colt.functions.CEPSinh</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPSinh</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function sinh(c1 double) return double as language java name "oracle.cep.colt.functions.CEPSinh"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 double) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(interval,int,int,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>3</position>
       <name>c4</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 interval, n int, c3 int, c4 timestamp) return interval as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="substr(char,int,int)">
     <implClass>oracle.cep.extensibility.functions.builtin.SubStr</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.SubStr</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function substr(c1 char, c2 int, c3 int) return char as language java name "oracle.cep.extensibility.functions.builtin.SubStr"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="length(byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>b</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function length(b byte) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="divide(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function divide(c1 double, c2 double) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="i1e(double)">
     <implClass>oracle.cep.colt.functions.CEPI1e</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPI1e</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function i1e(c1 double) return double as language java name "oracle.cep.colt.functions.CEPI1e"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="is_null(bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function is_null(c1 bigint) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="subtract(timestamp,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function subtract(c1 timestamp, c2 interval) return timestamp as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="lpad(char,int,char)">
     <implClass>oracle.cep.extensibility.functions.builtin.Lpad</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Lpad</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lpad(c1 char, c2 int, c3 char) return char as language java name "oracle.cep.extensibility.functions.builtin.Lpad"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="atan2(double,double)">
     <implClass>oracle.cep.colt.functions.CEPAtan2</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPAtan2</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function atan2(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPAtan2"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="subtract(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function subtract(c1 int, c2 int) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="net(byte,byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function net(c1 byte, c2 byte) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(double,int,int,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>3</position>
       <name>c4</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 double, n int, c3 int, c4 timestamp) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="et(timestamp,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function et(c1 timestamp, c2 timestamp) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="nvl(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function nvl(c1 float, c2 float) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(timestamp,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 timestamp, n int) return timestamp as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="i0e(double)">
     <implClass>oracle.cep.colt.functions.CEPI0e</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPI0e</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function i0e(c1 double) return double as language java name "oracle.cep.colt.functions.CEPI0e"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="et(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function et(c1 double, c2 double) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="logFactorial(int)">
     <implClass>oracle.cep.colt.functions.CEPLogFactorial</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPLogFactorial</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function logFactorial(c1 integer) return double as language java name "oracle.cep.colt.functions.CEPLogFactorial"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="et(interval,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function et(c1 interval, c2 interval) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(char,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 char, n int) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="ulp1(float)">
     <implClass>oracle.cep.colt.functions.CEPUlp1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>oracle.cep.colt.functions.CEPUlp1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ulp1(c1 float) return float as language java name "oracle.cep.colt.functions.CEPUlp1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="divide(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function divide(c1 float, c2 float) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="to_double(int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function to_double(c1 int) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="gtet(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gtet(c1 bigint, c2 bigint) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(double,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 double, n int) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="gt(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gt(c1 double, c2 double) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="log_and(boolean,boolean)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>boolean</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>boolean</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function log_and(c1 boolean, c2 boolean) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(timestamp,int,int,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>3</position>
       <name>c4</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 timestamp, n int, c3 int, c4 timestamp) return timestamp as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="nvl(byte,byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function nvl(c1 byte, c2 byte) return byte as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
   </SingleFunctions>
   <SimpleFunctions >
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>385</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>431</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>253</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>411</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>219</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>255</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>23</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>263</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>281</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>313</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>128</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>41</funcsElem>
      <funcsElem>43</funcsElem>
      <funcsElem>44</funcsElem>
      <funcsElem>45</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>351</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>403</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>285</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>423</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>5</funcsElem>
      <funcsElem>7</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>339</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>108</funcsElem>
      <funcsElem>110</funcsElem>
      <funcsElem>111</funcsElem>
      <funcsElem>112</funcsElem>
      <funcsElem>113</funcsElem>
      <funcsElem>114</funcsElem>
      <funcsElem>115</funcsElem>
      <funcsElem>116</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>345</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>299</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>10</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>283</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>399</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>249</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>130</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>409</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>217</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>259</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>251</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>261</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>279</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>257</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>363</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>311</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>25</funcsElem>
      <funcsElem>27</funcsElem>
      <funcsElem>28</funcsElem>
      <funcsElem>29</funcsElem>
      <funcsElem>30</funcsElem>
      <funcsElem>31</funcsElem>
      <funcsElem>32</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>297</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>134</funcsElem>
      <funcsElem>136</funcsElem>
      <funcsElem>137</funcsElem>
      <funcsElem>138</funcsElem>
      <funcsElem>139</funcsElem>
      <funcsElem>140</funcsElem>
      <funcsElem>141</funcsElem>
      <funcsElem>142</funcsElem>
      <funcsElem>143</funcsElem>
      <funcsElem>144</funcsElem>
      <funcsElem>145</funcsElem>
      <funcsElem>146</funcsElem>
      <funcsElem>147</funcsElem>
      <funcsElem>148</funcsElem>
      <funcsElem>149</funcsElem>
      <funcsElem>150</funcsElem>
      <funcsElem>151</funcsElem>
      <funcsElem>152</funcsElem>
      <funcsElem>153</funcsElem>
      <funcsElem>154</funcsElem>
      <funcsElem>155</funcsElem>
      <funcsElem>156</funcsElem>
      <funcsElem>157</funcsElem>
      <funcsElem>158</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>122</funcsElem>
      <funcsElem>124</funcsElem>
      <funcsElem>125</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>365</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>353</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>393</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>397</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>307</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>221</funcsElem>
      <funcsElem>223</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>287</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>232</funcsElem>
      <funcsElem>234</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>383</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>12</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>117</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>377</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>213</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>379</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>289</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>99</funcsElem>
      <funcsElem>101</funcsElem>
      <funcsElem>102</funcsElem>
      <funcsElem>103</funcsElem>
      <funcsElem>104</funcsElem>
      <funcsElem>105</funcsElem>
      <funcsElem>106</funcsElem>
      <funcsElem>107</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>381</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>331</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>335</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>329</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>245</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>413</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>341</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>395</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>407</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>51</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>3</funcsElem>
      <funcsElem>9</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>375</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>1</funcsElem>
      <funcsElem>8</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>333</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>132</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>415</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>14</funcsElem>
      <funcsElem>16</funcsElem>
      <funcsElem>17</funcsElem>
      <funcsElem>18</funcsElem>
      <funcsElem>19</funcsElem>
      <funcsElem>20</funcsElem>
      <funcsElem>21</funcsElem>
      <funcsElem>22</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>425</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>235</funcsElem>
      <funcsElem>237</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>355</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>53</funcsElem>
      <funcsElem>55</funcsElem>
      <funcsElem>56</funcsElem>
      <funcsElem>57</funcsElem>
      <funcsElem>58</funcsElem>
      <funcsElem>59</funcsElem>
      <funcsElem>60</funcsElem>
      <funcsElem>61</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>417</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>301</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>419</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>62</funcsElem>
      <funcsElem>64</funcsElem>
      <funcsElem>65</funcsElem>
      <funcsElem>66</funcsElem>
      <funcsElem>67</funcsElem>
      <funcsElem>68</funcsElem>
      <funcsElem>69</funcsElem>
      <funcsElem>70</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>321</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>89</funcsElem>
      <funcsElem>91</funcsElem>
      <funcsElem>92</funcsElem>
      <funcsElem>93</funcsElem>
      <funcsElem>94</funcsElem>
      <funcsElem>95</funcsElem>
      <funcsElem>96</funcsElem>
      <funcsElem>97</funcsElem>
      <funcsElem>98</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>347</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>305</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>315</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>343</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>229</funcsElem>
      <funcsElem>231</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>391</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>309</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>401</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>389</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>427</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>371</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>349</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>323</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>224</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>269</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>265</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>327</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>291</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>46</funcsElem>
      <funcsElem>48</funcsElem>
      <funcsElem>49</funcsElem>
      <funcsElem>50</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>271</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>293</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>126</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>337</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>33</funcsElem>
      <funcsElem>35</funcsElem>
      <funcsElem>36</funcsElem>
      <funcsElem>37</funcsElem>
      <funcsElem>38</funcsElem>
      <funcsElem>39</funcsElem>
      <funcsElem>40</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>215</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>369</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>429</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>367</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>238</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>247</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>405</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>319</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>273</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>303</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>421</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>71</funcsElem>
      <funcsElem>73</funcsElem>
      <funcsElem>74</funcsElem>
      <funcsElem>75</funcsElem>
      <funcsElem>76</funcsElem>
      <funcsElem>77</funcsElem>
      <funcsElem>78</funcsElem>
      <funcsElem>79</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>119</funcsElem>
      <funcsElem>121</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>267</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>275</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>357</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>295</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>80</funcsElem>
      <funcsElem>82</funcsElem>
      <funcsElem>83</funcsElem>
      <funcsElem>84</funcsElem>
      <funcsElem>85</funcsElem>
      <funcsElem>86</funcsElem>
      <funcsElem>87</funcsElem>
      <funcsElem>88</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>277</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>359</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>226</funcsElem>
      <funcsElem>228</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>373</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>361</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>240</funcsElem>
      <funcsElem>242</funcsElem>
      <funcsElem>243</funcsElem>
      <funcsElem>244</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>325</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>317</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>387</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
   </SimpleFunctions>
   <AggrFunctions >
    <AggFunction Key="trimmedMean(double,int,int)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPTrimmedMean</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  trimmedMean(c1 double, c2 int, c3 int) return double  aggregate using "oracle.cep.colt.aggr.CEPTrimmedMean" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="SUM(float)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function sum(c1 float) return float aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="autoCorrelation(double,int)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPAutoCorrelation</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  autoCorrelation(c1 double, c2 int) return double  aggregate using "oracle.cep.colt.aggr.CEPAutoCorrelation" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="COUNT(byte)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function count(c1 byte) return int aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="AVG(bigint)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function avg(c1 bigint) return float aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="MAX(char)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function max(c1 char) return char aggregate using"$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="MAX(bigint)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function max(c1 bigint) return bigint aggregate using "$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="COUNT(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function count(c1 double) return int aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="tklog_secondMax(timestamp)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>oracle.cep.test.userfunctions.TkUsrSecondMax</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt> create function tklog_secondMax(c1 timestamp) return timestamp aggregate using "oracle.cep.test.userfunctions.TkUsrSecondMax" </creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="MIN(char)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function min(c1 char) return char aggregate using"$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="sumOfSquares(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSumOfSquares</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sumOfSquares(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSumOfSquares" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="sampleStandardDeviation(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSampleStandardDeviation</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sampleStandardDeviation(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSampleStandardDeviation" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="MIN(timestamp)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function min(c1 timestamp) return timestamp aggregate using"$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="sumOfInversions(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSumOfInversions</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sumOfInversions(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSumOfInversions" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="MAX(float)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function max(c1 float) return float aggregate using "$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="sumOfSquaredDeviations(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSumOfSquaredDeviations</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sumOfSquaredDeviations(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSumOfSquaredDeviations" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="MIN(interval)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function min(c1 interval) return interval aggregate using"$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="sumOfPowerDeviations(double,int,double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSumOfPowerDeviations</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sumOfPowerDeviations(c1 double, c2 int, c3 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSumOfPowerDeviations" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="COUNT(char)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function count(c1 char) return int aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="kurtosis(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPKurtosis</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  kurtosis(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPKurtosis" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="sumOfPowers(double,int)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSumOfPowers</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sumOfPowers(c1 double, c2 int) return double  aggregate using "oracle.cep.colt.aggr.CEPSumOfPowers" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="LAST(byte,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Last</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function last(c1 byte, n int) return byte aggregate using "oracle.cep.extensibility.functions.builtin.Last"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="tklog_secondMax(interval)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>oracle.cep.test.userfunctions.TkUsrSecondMax</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt> create function tklog_secondMax(c1 interval) return interval aggregate using "oracle.cep.test.userfunctions.TkUsrSecondMax" </creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="LAST(int,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Last</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function last(c1 int, n int) return int aggregate using "oracle.cep.extensibility.functions.builtin.Last"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="moment(double,int,double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPMoment</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  moment(c1 double, c2 int, c3 double) return double  aggregate using "oracle.cep.colt.aggr.CEPMoment" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="MAX(int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function max(c1 int) return int aggregate using "$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="tklog_secondMax(float)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>oracle.cep.test.userfunctions.TkUsrSecondMax</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
      <destQueriesElem>494</destQueriesElem>
     </destQueries>
     <creationTxt> create function tklog_secondMax(c1 float) return float aggregate using "oracle.cep.test.userfunctions.TkUsrSecondMax" </creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="COUNT(float)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function count(c1 float) return int aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="variance(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPVariance</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  variance(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPVariance" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="lag1(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPLag1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  lag1(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPLag1" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="median(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPMedian</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  median(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPMedian" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="FIRST(char,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.First</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function first(c1 char, n int) return char aggregate using "oracle.cep.extensibility.functions.builtin.First"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="SUM(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function sum(c1 double) return double aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="MAX(interval)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function max(c1 interval) return interval aggregate using"$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="meanDeviation(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPMeanDeviation</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  meanDeviation(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPMeanDeviation" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="MIN(bigint)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function min(c1 bigint) return bigint aggregate using "$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="LAST(interval,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Last</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function last(c1 interval, n int) return interval aggregate using "oracle.cep.extensibility.functions.builtin.Last"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="correlation(double,double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPCorrelation</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  correlation(c1 double, c2 double) return double  aggregate using "oracle.cep.colt.aggr.CEPCorrelation" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="AVG(float)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function avg(c1 float) return float aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="sampleKurtosisStandardError(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSampleKurtosisStandardError</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sampleKurtosisStandardError(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSampleKurtosisStandardError" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="sampleSkew(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSampleSkew</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sampleSkew(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSampleSkew" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="sampleSkewStandardError(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSampleSkewStandardError</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sampleSkewStandardError(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSampleSkewStandardError" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="FIRST(bigint,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.First</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function first(c1 bigint, n int) return bigint aggregate using "oracle.cep.extensibility.functions.builtin.First"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="FIRST(float,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.First</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function first(c1 float, n int) return float aggregate using "oracle.cep.extensibility.functions.builtin.First"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="weightedMean(double,double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPWeightedMean</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  weightedMean(c1 double, c2 double) return double  aggregate using "oracle.cep.colt.aggr.CEPWeightedMean" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="COUNT(bigint)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function count(c1 bigint) return int aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="rms(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPRms</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  rms(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPRms" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="FIRST(int,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.First</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function first(c1 int, n int) return int aggregate using "oracle.cep.extensibility.functions.builtin.First"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="MIN(float)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function min(c1 float) return float aggregate using "$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="pooledMean(double,double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPPooledMean</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  pooledMean(c1 double, c2 double) return double  aggregate using "oracle.cep.colt.aggr.CEPPooledMean" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="standardError(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPStandardError</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  standardError(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPStandardError" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="winsorizedMean(double,int,int)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPWinsorizedMean</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  winsorizedMean(c1 double, c2 int, c3 int) return double  aggregate using "oracle.cep.colt.aggr.CEPWinsorizedMean" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="MAX(timestamp)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function max(c1 timestamp) return timestamp aggregate using"$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="MIN(int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function min(c1 int) return int aggregate using "$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="FIRST(double,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.First</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function first(c1 double, n int) return double aggregate using "oracle.cep.extensibility.functions.builtin.First"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="geometricMean(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPGeometricMean</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  geometricMean(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPGeometricMean" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="FIRST(timestamp,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.First</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function first(c1 timestamp, n int) return timestamp aggregate using "oracle.cep.extensibility.functions.builtin.First"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="LAST(float,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Last</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function last(c1 float, n int) return float aggregate using "oracle.cep.extensibility.functions.builtin.Last"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="SUM(int)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function sum(c1 int) return int aggregate using "$dummy" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="product(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPProduct</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  product(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPProduct" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="COUNT(int)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function count(c1 int) return int aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="rankInterpolated(double,double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPRankInterpolated</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  rankInterpolated(c1 double, c2 double) return double  aggregate using "oracle.cep.colt.aggr.CEPRankInterpolated" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="skew(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSkew</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  skew(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSkew" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="AVG(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function avg(c1 double) return double aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="pooledVariance(double,double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPPooledVariance</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  pooledVariance(c1 double, c2 double) return double  aggregate using "oracle.cep.colt.aggr.CEPPooledVariance" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="MAX(double)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function max(c1 double) return double aggregate using "$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="geometricMean1(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPGeometricMean1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  geometricMean1(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPGeometricMean1" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="durbinWatson(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPDurbinWatson</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  durbinWatson(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPDurbinWatson" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="tklog_secondMax(byte)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>oracle.cep.test.userfunctions.TkUsrSecondMax</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt> create function tklog_secondMax(c1 byte) return byte aggregate using "oracle.cep.test.userfunctions.TkUsrSecondMax" </creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="COUNT(timestamp)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function count(c1 timestamp) return int aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="MIN(byte)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function min(c1 byte) return byte aggregate using"$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="SUM(bigint)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function sum(c1 bigint) return bigint aggregate using "$dummy" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="standardDeviation(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPStandardDeviation</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  standardDeviation(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPStandardDeviation" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="LAST(char,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Last</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function last(c1 char, n int) return char aggregate using "oracle.cep.extensibility.functions.builtin.Last"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="FIRST(byte,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.First</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function first(c1 byte, n int) return byte aggregate using "oracle.cep.extensibility.functions.builtin.First"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="AVG(int)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function avg(c1 int) return float aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="MAX(byte)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function max(c1 byte) return byte aggregate using"$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="COUNT(interval)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function count(c1 interval) return int aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="sampleKurtosis(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSampleKurtosis</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sampleKurtosis(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSampleKurtosis" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="LAST(bigint,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Last</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function last(c1 bigint, n int) return bigint aggregate using "oracle.cep.extensibility.functions.builtin.Last"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="quantile(double,double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPQuantile</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  quantile(c1 double, c2 double) return double  aggregate using "oracle.cep.colt.aggr.CEPQuantile" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="LAST(timestamp,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Last</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function last(c1 timestamp, n int) return timestamp aggregate using "oracle.cep.extensibility.functions.builtin.Last"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="sumOfLogarithms(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSumOfLogarithms</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sumOfLogarithms(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSumOfLogarithms" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="tklog_secondMax(char)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>oracle.cep.test.userfunctions.TkUsrSecondMax</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt> create function tklog_secondMax(c1 char) return char aggregate using "oracle.cep.test.userfunctions.TkUsrSecondMax" </creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="covariance(double,double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPCovariance</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  covariance(c1 double, c2 double) return double  aggregate using "oracle.cep.colt.aggr.CEPCovariance" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="mean(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPMean</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  mean(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPMean" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="harmonicMean(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPHarmonicMean</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  harmonicMean(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPHarmonicMean" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="quantileInverse(double,double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPQuantileInverse</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  quantileInverse(c1 double, c2 double) return double  aggregate using "oracle.cep.colt.aggr.CEPQuantileInverse" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="sampleVariance(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSampleVariance</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sampleVariance(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSampleVariance" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="MIN(double)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function min(c1 double) return double aggregate using "$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="LAST(double,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Last</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function last(c1 double, n int) return double aggregate using "oracle.cep.extensibility.functions.builtin.Last"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="FIRST(interval,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.First</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function first(c1 interval, n int) return interval aggregate using "oracle.cep.extensibility.functions.builtin.First"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
   </AggrFunctions>
  </Level>
  <Level Name="MUSERFUNC_LOCKINFO" Value="3">
   <SingleFunctions >
    <SimpleFunction Key="ltet(interval,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ltet(c1 interval, c2 interval) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="plus(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function plus(c1 double, c2 double) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="ltrim(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ltrim(c1 char, c2 char) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="gt(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gt(c1 bigint, c2 bigint) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="incompleteBeta(double,double,double)">
     <implClass>oracle.cep.colt.functions.CEPIncompleteBeta</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPIncompleteBeta</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function incompleteBeta(c1 double, c2 double, c3 double) return double as language java name "oracle.cep.colt.functions.CEPIncompleteBeta"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="poissonComplemented(int,double)">
     <implClass>oracle.cep.colt.functions.CEPPoissonComplemented</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPPoissonComplemented</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function poissonComplemented(c1 integer, c2 double) return double as language java name "oracle.cep.colt.functions.CEPPoissonComplemented"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="nvl(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function nvl(c1 int, c2 int) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="normal1(double,double,double)">
     <implClass>oracle.cep.colt.functions.CEPNormal1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPNormal1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function normal1(c1 double, c2 double, c3 double) return double as language java name "oracle.cep.colt.functions.CEPNormal1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="abs2(float)">
     <implClass>oracle.cep.colt.functions.CEPAbs2</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>oracle.cep.colt.functions.CEPAbs2</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function abs2(c1 float) return float as language java name "oracle.cep.colt.functions.CEPAbs2"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="negativeBinomial(int,int,double)">
     <implClass>oracle.cep.colt.functions.CEPNegativeBinomial</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPNegativeBinomial</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function negativeBinomial(c1 integer, c2 integer, c3 double) return double as language java name "oracle.cep.colt.functions.CEPNegativeBinomial"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="initcap(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function initcap(c1 char) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="toRadians(double)">
     <implClass>oracle.cep.colt.functions.CEPToRadians</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPToRadians</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function toRadians(c1 double) return double as language java name "oracle.cep.colt.functions.CEPToRadians"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="lt(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lt(c1 bigint, c2 bigint) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="gtet(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gtet(c1 int, c2 int) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="hypot(double,double)">
     <implClass>oracle.cep.colt.functions.CEPHypot</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPHypot</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function hypot(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPHypot"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="divide(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function divide(c1 bigint, c2 bigint) return bigint as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="net(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function net(c1 float, c2 float) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="nvl(timestamp,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function nvl(c1 timestamp, c2 timestamp) return timestamp as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="k1e(double)">
     <implClass>oracle.cep.colt.functions.CEPK1e</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPK1e</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function k1e(c1 double) return double as language java name "oracle.cep.colt.functions.CEPK1e"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="to_double(float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function to_double(c1 float) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="cosh(double)">
     <implClass>oracle.cep.colt.functions.CEPCosh</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPCosh</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function cosh(c1 double) return double as language java name "oracle.cep.colt.functions.CEPCosh"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="multiply(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function multiply(c1 float, c2 float) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="signum1(float)">
     <implClass>oracle.cep.colt.functions.CEPSignum1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>oracle.cep.colt.functions.CEPSignum1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function signum1(c1 float) return float as language java name "oracle.cep.colt.functions.CEPSignum1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="rpad(char,int,char)">
     <implClass>oracle.cep.extensibility.functions.builtin.Rpad</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Rpad</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function rpad(c1 char, c2 int, c3 char) return char as language java name "oracle.cep.extensibility.functions.builtin.Rpad"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="multiply(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function multiply(c1 double, c2 double) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="is_null(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function is_null(c1 char) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="expm1(double)">
     <implClass>oracle.cep.colt.functions.CEPExpm1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPExpm1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function expm1(c1 double) return double as language java name "oracle.cep.colt.functions.CEPExpm1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="to_double(bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function to_double(c1 bigint) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="et(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function et(c1 int, c2 int) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="to_timestamp(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function to_timestamp(c1 char) return timestamp as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="et(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function et(c1 bigint, c2 bigint) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="k0(double)">
     <implClass>oracle.cep.colt.functions.CEPK0</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPK0</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function k0(c1 double) return double as language java name "oracle.cep.colt.functions.CEPK0"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="nvl(interval,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function nvl(c1 interval, c2 interval) return interval as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="lt(timestamp,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lt(c1 timestamp, c2 timestamp) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="hash2(int)">
     <implClass>oracle.cep.colt.functions.CEPHash2</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.colt.functions.CEPHash2</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function hash2(c1 integer) return integer as language java name "oracle.cep.colt.functions.CEPHash2"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="tan(double)">
     <implClass>oracle.cep.colt.functions.CEPTan</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPTan</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function tan(c1 double) return double as language java name "oracle.cep.colt.functions.CEPTan"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="lt(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lt(c1 char, c2 char) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="ltet(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ltet(c1 double, c2 double) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="translate(char,char,char)">
     <implClass>oracle.cep.extensibility.functions.builtin.Translate</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Translate</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function translate(c1 char, c2 char, c3 char) return char as language java name "oracle.cep.extensibility.functions.builtin.Translate"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(float,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 float, n int) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="beta(double,double)">
     <implClass>oracle.cep.colt.functions.CEPBeta</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPBeta</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function beta(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPBeta"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="systimestamp()">
     <implClass>null</implClass>
     <paramList >
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function systimestamp return timestamp as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(byte,int,int,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>3</position>
       <name>c4</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 byte, n int, c3 int, c4 timestamp) return byte as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="logGamma(double)">
     <implClass>oracle.cep.colt.functions.CEPLogGamma</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPLogGamma</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function logGamma(c1 double) return double as language java name "oracle.cep.colt.functions.CEPLogGamma"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="ulp(double)">
     <implClass>oracle.cep.colt.functions.CEPUlp</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPUlp</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ulp(c1 double) return double as language java name "oracle.cep.colt.functions.CEPUlp"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="sin(double)">
     <implClass>oracle.cep.colt.functions.CEPSin</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPSin</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function sin(c1 double) return double as language java name "oracle.cep.colt.functions.CEPSin"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="plus(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function plus(c1 bigint, c2 bigint) return bigint as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="toDegrees(double)">
     <implClass>oracle.cep.colt.functions.CEPToDegrees</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPToDegrees</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function toDegrees(c1 double) return double as language java name "oracle.cep.colt.functions.CEPToDegrees"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="ltrim(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ltrim(c1 char) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="lower(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lower(c1 char) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="leastSignificantBit(int)">
     <implClass>oracle.cep.colt.functions.CEPLeastSignificantBit</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.colt.functions.CEPLeastSignificantBit</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function leastSignificantBit(c1 integer) return integer as language java name "oracle.cep.colt.functions.CEPLeastSignificantBit"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="gtet(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gtet(c1 char, c2 char) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="cos(double)">
     <implClass>oracle.cep.colt.functions.CEPCos</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPCos</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function cos(c1 double) return double as language java name "oracle.cep.colt.functions.CEPCos"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="length(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function length(c char) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="k0e(double)">
     <implClass>oracle.cep.colt.functions.CEPK0e</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPK0e</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function k0e(c1 double) return double as language java name "oracle.cep.colt.functions.CEPK0e"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="to_float(bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function to_float(c1 bigint) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="multiply(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function multiply(c1 bigint, c2 bigint) return bigint as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="net(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function net(c1 double, c2 double) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="gt(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gt(c1 int, c2 int) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="mostSignificantBit(int)">
     <implClass>oracle.cep.colt.functions.CEPMostSignificantBit</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.colt.functions.CEPMostSignificantBit</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function mostSignificantBit(c1 integer) return integer as language java name "oracle.cep.colt.functions.CEPMostSignificantBit"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="nvl(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function nvl(c1 double, c2 double) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="et(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function et(c1 char, c2 char) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="lt(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lt(c1 int, c2 int) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="gtet(timestamp,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gtet(c1 timestamp, c2 timestamp) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="signum(double)">
     <implClass>oracle.cep.colt.functions.CEPSignum</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPSignum</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function signum(c1 double) return double as language java name "oracle.cep.colt.functions.CEPSignum"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 bigint) return bigint as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="j0(double)">
     <implClass>oracle.cep.colt.functions.CEPJ0</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPJ0</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function j0(c1 double) return double as language java name "oracle.cep.colt.functions.CEPJ0"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="ceil1(double)">
     <implClass>oracle.cep.colt.functions.CEPCeil1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPCeil1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ceil1(c1 double) return double as language java name "oracle.cep.colt.functions.CEPCeil1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="abs(int)">
     <implClass>oracle.cep.colt.functions.CEPAbs</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.colt.functions.CEPAbs</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function abs(c1 integer) return integer as language java name "oracle.cep.colt.functions.CEPAbs"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="ceil(double)">
     <implClass>oracle.cep.colt.functions.CEPCeil</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>oracle.cep.colt.functions.CEPCeil</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ceil(c1 double) return bigint as language java name "oracle.cep.colt.functions.CEPCeil"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="gt(interval,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gt(c1 interval, c2 interval) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="subtract(timestamp,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function subtract(c1 timestamp, c2 timestamp) return interval as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="ltet(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ltet(c1 bigint, c2 bigint) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(float,int,int,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>3</position>
       <name>c4</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 float, n int, c3 int, c4 timestamp) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="betaComplemented(double,double,double)">
     <implClass>oracle.cep.colt.functions.CEPBetaComplemented</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPBetaComplemented</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function betaComplemented(c1 double, c2 double, c3 double) return double as language java name "oracle.cep.colt.functions.CEPBetaComplemented"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="floor1(double)">
     <implClass>oracle.cep.colt.functions.CEPFloor1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPFloor1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function floor1(c1 double) return double as language java name "oracle.cep.colt.functions.CEPFloor1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="plus(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function plus(c1 int, c2 int) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="concat(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function concat(c1 char, c2 char) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="gtet(interval,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gtet(c1 interval, c2 interval) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(int,int,int,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>3</position>
       <name>c4</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 int, n int, c3 int, c4 timestamp) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="plus(timestamp,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function plus(c1 timestamp, c2 interval) return timestamp as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="k1(double)">
     <implClass>oracle.cep.colt.functions.CEPK1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPK1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function k1(c1 double) return double as language java name "oracle.cep.colt.functions.CEPK1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="chiSquareComplemented(double,double)">
     <implClass>oracle.cep.colt.functions.CEPChiSquareComplemented</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPChiSquareComplemented</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function chiSquareComplemented(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPChiSquareComplemented"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="kn(int,double)">
     <implClass>oracle.cep.colt.functions.CEPKn</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPKn</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function kn(c1 integer, c2 double) return double as language java name "oracle.cep.colt.functions.CEPKn"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="hextoraw(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function hextoraw(c char) return byte as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="mod(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function mod(c1 double, c2 double) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="et(byte,byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function et(c1 byte, c2 byte) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="hash1(float)">
     <implClass>oracle.cep.colt.functions.CEPHash1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.colt.functions.CEPHash1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function hash1(c1 float) return integer as language java name "oracle.cep.colt.functions.CEPHash1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="factorial(int)">
     <implClass>oracle.cep.colt.functions.CEPFactorial</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPFactorial</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function factorial(c1 integer) return double as language java name "oracle.cep.colt.functions.CEPFactorial"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="lt(byte,byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lt(c1 byte, c2 byte) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="to_float(int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function to_float(c1 int) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="j1(double)">
     <implClass>oracle.cep.colt.functions.CEPJ1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPJ1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function j1(c1 double) return double as language java name "oracle.cep.colt.functions.CEPJ1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="poisson(int,double)">
     <implClass>oracle.cep.colt.functions.CEPPoisson</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPPoisson</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function poisson(c1 integer, c2 double) return double as language java name "oracle.cep.colt.functions.CEPPoisson"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="mod(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function mod(c1 bigint, c2 bigint) return bigint as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="multiply(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function multiply(c1 int, c2 int) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="longFactorial(int)">
     <implClass>oracle.cep.colt.functions.CEPLongFactorial</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>oracle.cep.colt.functions.CEPLongFactorial</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function longFactorial(c1 integer) return bigint as language java name "oracle.cep.colt.functions.CEPLongFactorial"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="subtract(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function subtract(c1 double, c2 double) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 byte) return byte as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="exp(double)">
     <implClass>oracle.cep.colt.functions.CEPExp</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPExp</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function exp(c1 double) return double as language java name "oracle.cep.colt.functions.CEPExp"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="XMLQUERY(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>xmltype</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function XMLQUERY(c1 char) return xmltype as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="ltet(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ltet(c1 char, c2 char) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="net(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function net(c1 bigint, c2 bigint) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="binomial(double,bigint)">
     <implClass>oracle.cep.colt.functions.CEPBinomial</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPBinomial</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function binomial(c1 double, c2 bigint) return double as language java name "oracle.cep.colt.functions.CEPBinomial"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="net(timestamp,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function net(c1 timestamp, c2 timestamp) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="gtet(byte,byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gtet(c1 byte, c2 byte) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="nvl(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function nvl(c1 bigint, c2 bigint) return bigint as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 int) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="log10(double)">
     <implClass>oracle.cep.colt.functions.CEPLog10</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPLog10</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function log10(c1 double) return double as language java name "oracle.cep.colt.functions.CEPLog10"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="log1p(double)">
     <implClass>oracle.cep.colt.functions.CEPLog1p</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPLog1p</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function log1p(c1 double) return double as language java name "oracle.cep.colt.functions.CEPLog1p"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="errorFunctionComplemented(double)">
     <implClass>oracle.cep.colt.functions.CEPErrorFunctionComplemented</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPErrorFunctionComplemented</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function errorFunctionComplemented(c1 double) return double as language java name "oracle.cep.colt.functions.CEPErrorFunctionComplemented"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="sqrt(double)">
     <implClass>oracle.cep.colt.functions.CEPSqrt</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPSqrt</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function sqrt(c1 double) return double as language java name "oracle.cep.colt.functions.CEPSqrt"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="is_null(timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function is_null(c1 timestamp) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="i0(double)">
     <implClass>oracle.cep.colt.functions.CEPI0</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPI0</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function i0(c1 double) return double as language java name "oracle.cep.colt.functions.CEPI0"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="divide(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function divide(c1 int, c2 int) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="abs3(double)">
     <implClass>oracle.cep.colt.functions.CEPAbs3</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPAbs3</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function abs3(c1 double) return double as language java name "oracle.cep.colt.functions.CEPAbs3"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="beta1(double,double,double)">
     <implClass>oracle.cep.colt.functions.CEPBeta1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPBeta1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function beta1(c1 double, c2 double, c3 double) return double as language java name "oracle.cep.colt.functions.CEPBeta1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="gt(timestamp,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gt(c1 timestamp, c2 timestamp) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="substr(char,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function substr(c1 char, c2 int) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="subtract(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function subtract(c1 float, c2 float) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="log_xor(boolean,boolean)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>boolean</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>boolean</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function log_xor(c1 boolean, c2 boolean) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="net(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function net(c1 int, c2 int) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="pow(double,double)">
     <implClass>oracle.cep.colt.functions.CEPPow</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPPow</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function pow(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPPow"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="rawtohex(byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>b</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function rawtohex(b byte) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(char,int,int,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>3</position>
       <name>c4</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 char, n int, c3 int, c4 timestamp) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="ltet(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ltet(c1 int, c2 int) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="gtet(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gtet(c1 float, c2 float) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="ltet(byte,byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ltet(c1 byte, c2 byte) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="plus(interval,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function plus(c1 interval, c2 timestamp) return timestamp as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="is_null(interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function is_null(c1 interval) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="binomial1(bigint,bigint)">
     <implClass>oracle.cep.colt.functions.CEPBinomial1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPBinomial1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function binomial1(c1 bigint, c2 bigint) return double as language java name "oracle.cep.colt.functions.CEPBinomial1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="normal(double)">
     <implClass>oracle.cep.colt.functions.CEPNormal</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPNormal</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function normal(c1 double) return double as language java name "oracle.cep.colt.functions.CEPNormal"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="yn(int,double)">
     <implClass>oracle.cep.colt.functions.CEPYn</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPYn</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function yn(c1 integer, c2 double) return double as language java name "oracle.cep.colt.functions.CEPYn"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(byte,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 byte, n int) return byte as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="plus(interval,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function plus(c1 interval, c2 interval) return interval as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="floor(double)">
     <implClass>oracle.cep.colt.functions.CEPFloor</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>oracle.cep.colt.functions.CEPFloor</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function floor(c1 double) return bigint as language java name "oracle.cep.colt.functions.CEPFloor"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="stirlingCorrection(int)">
     <implClass>oracle.cep.colt.functions.CEPStirlingCorrection</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPStirlingCorrection</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function stirlingCorrection(c1 integer) return double as language java name "oracle.cep.colt.functions.CEPStirlingCorrection"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="mod(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function mod(c1 float, c2 float) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="ltet(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ltet(c1 float, c2 float) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="i1(double)">
     <implClass>oracle.cep.colt.functions.CEPI1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPI1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function i1(c1 double) return double as language java name "oracle.cep.colt.functions.CEPI1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="hash(double)">
     <implClass>oracle.cep.colt.functions.CEPHash</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.colt.functions.CEPHash</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function hash(c1 double) return integer as language java name "oracle.cep.colt.functions.CEPHash"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 float) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="concat(byte,byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>b1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>b2</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function concat(b1 byte, b2 byte) return byte as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 timestamp) return timestamp as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="plus(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function plus(c1 float, c2 float) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="subtract(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function subtract(c1 bigint, c2 bigint) return bigint as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="subtract(interval,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function subtract(c1 interval, c2 interval) return interval as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 char) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="upper(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function upper(c1 char) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="errorFunction(double)">
     <implClass>oracle.cep.colt.functions.CEPErrorFunction</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPErrorFunction</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function errorFunction(c1 double) return double as language java name "oracle.cep.colt.functions.CEPErrorFunction"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="incompleteGammaComplement(double,double)">
     <implClass>oracle.cep.colt.functions.CEPIncompleteGammaComplement</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPIncompleteGammaComplement</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function incompleteGammaComplement(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPIncompleteGammaComplement"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(interval,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 interval, n int) return interval as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="is_null(double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function is_null(c1 double) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="to_timestamp(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function to_timestamp(c1 char, c2 char) return timestamp as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="atan(double)">
     <implClass>oracle.cep.colt.functions.CEPAtan</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPAtan</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function atan(c1 double) return double as language java name "oracle.cep.colt.functions.CEPAtan"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="et(boolean,boolean)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>boolean</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>boolean</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function et(c1 boolean, c2 boolean) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="net(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function net(c1 char, c2 char) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="abs1(bigint)">
     <implClass>oracle.cep.colt.functions.CEPAbs1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>oracle.cep.colt.functions.CEPAbs1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function abs1(c1 bigint) return bigint as language java name "oracle.cep.colt.functions.CEPAbs1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="lk(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lk(c1 char, c2 char) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="gt(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gt(c1 char, c2 char) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(bigint,int,int,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>3</position>
       <name>c4</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 bigint, n int, c3 int, c4 timestamp) return bigint as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="net(interval,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function net(c1 interval, c2 interval) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="asin(double)">
     <implClass>oracle.cep.colt.functions.CEPAsin</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPAsin</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function asin(c1 double) return double as language java name "oracle.cep.colt.functions.CEPAsin"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="mod(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function mod(c1 int, c2 int) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 interval) return interval as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="bitMaskWithBitsSetFromTo(int,int)">
     <implClass>oracle.cep.colt.functions.CEPBitMaskWithBitsSetFromTo</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>oracle.cep.colt.functions.CEPBitMaskWithBitsSetFromTo</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function bitMaskWithBitsSetFromTo(c1 integer, c2 integer) return bigint as language java name "oracle.cep.colt.functions.CEPBitMaskWithBitsSetFromTo"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="log1(double)">
     <implClass>oracle.cep.colt.functions.CEPLog1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPLog1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function log1(c1 double) return double as language java name "oracle.cep.colt.functions.CEPLog1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="log_or(boolean,boolean)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>boolean</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>boolean</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function log_or(c1 boolean, c2 boolean) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="hash3(bigint)">
     <implClass>oracle.cep.colt.functions.CEPHash3</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.colt.functions.CEPHash3</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function hash3(c1 bigint) return integer as language java name "oracle.cep.colt.functions.CEPHash3"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="rpad(char,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function rpad(c1 char, c2 int) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="y0(double)">
     <implClass>oracle.cep.colt.functions.CEPY0</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPY0</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function y0(c1 double) return double as language java name "oracle.cep.colt.functions.CEPY0"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="XMLEXISTS(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function XMLEXISTS(c1 char) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="jn(int,double)">
     <implClass>oracle.cep.colt.functions.CEPJn</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPJn</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function jn(c1 integer, c2 double) return double as language java name "oracle.cep.colt.functions.CEPJn"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="acos(double)">
     <implClass>oracle.cep.colt.functions.CEPAcos</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPAcos</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function acos(c1 double) return double as language java name "oracle.cep.colt.functions.CEPAcos"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 int, n int) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="binomialComplemented(int,int,double)">
     <implClass>oracle.cep.colt.functions.CEPBinomialComplemented</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPBinomialComplemented</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function binomialComplemented(c1 integer, c2 integer, c3 double) return double as language java name "oracle.cep.colt.functions.CEPBinomialComplemented"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="incompleteGamma(double,double)">
     <implClass>oracle.cep.colt.functions.CEPIncompleteGamma</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPIncompleteGamma</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function incompleteGamma(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPIncompleteGamma"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="rtrim(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function rtrim(c1 char, c2 char) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="lt(interval,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lt(c1 interval, c2 interval) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="is_null(int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function is_null(c1 int) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="gt(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gt(c1 float, c2 float) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="log(double,double)">
     <implClass>oracle.cep.colt.functions.CEPLog</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPLog</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function log(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPLog"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="nvl(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function nvl(c1 char, c2 char) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="is_null(byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function is_null(c1 byte) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="chiSquare(double,double)">
     <implClass>oracle.cep.colt.functions.CEPChiSquare</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPChiSquare</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function chiSquare(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPChiSquare"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="gamma1(double,double,double)">
     <implClass>oracle.cep.colt.functions.CEPGamma1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPGamma1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gamma1(c1 double, c2 double, c3 double) return double as language java name "oracle.cep.colt.functions.CEPGamma1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="gt(byte,byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gt(c1 byte, c2 byte) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="log_not(boolean)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>boolean</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function log_not(c1 boolean) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="lpad(char,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lpad(c1 char, c2 int) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="gamma(double)">
     <implClass>oracle.cep.colt.functions.CEPGamma</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPGamma</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gamma(c1 double) return double as language java name "oracle.cep.colt.functions.CEPGamma"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="tanh(double)">
     <implClass>oracle.cep.colt.functions.CEPTanh</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPTanh</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function tanh(c1 double) return double as language java name "oracle.cep.colt.functions.CEPTanh"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="normalInverse(double)">
     <implClass>oracle.cep.colt.functions.CEPNormalInverse</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPNormalInverse</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function normalInverse(c1 double) return double as language java name "oracle.cep.colt.functions.CEPNormalInverse"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="getSeedAtRowColumn(int,int)">
     <implClass>oracle.cep.colt.functions.CEPGetSeedAtRowColumn</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.colt.functions.CEPGetSeedAtRowColumn</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function getSeedAtRowColumn(c1 integer, c2 integer) return integer as language java name "oracle.cep.colt.functions.CEPGetSeedAtRowColumn"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="round(float)">
     <implClass>oracle.cep.colt.functions.CEPRound</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.colt.functions.CEPRound</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function round(c1 float) return integer as language java name "oracle.cep.colt.functions.CEPRound"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="gtet(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gtet(c1 double, c2 double) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="negativeBinomialComplemented(int,int,double)">
     <implClass>oracle.cep.colt.functions.CEPNegativeBinomialComplemented</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPNegativeBinomialComplemented</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function negativeBinomialComplemented(c1 integer, c2 integer, c3 double) return double as language java name "oracle.cep.colt.functions.CEPNegativeBinomialComplemented"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="log2(double)">
     <implClass>oracle.cep.colt.functions.CEPLog2</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPLog2</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function log2(c1 double) return double as language java name "oracle.cep.colt.functions.CEPLog2"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="lt(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lt(c1 float, c2 float) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="y1(double)">
     <implClass>oracle.cep.colt.functions.CEPY1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPY1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function y1(c1 double) return double as language java name "oracle.cep.colt.functions.CEPY1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="round1(double)">
     <implClass>oracle.cep.colt.functions.CEPRound1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>oracle.cep.colt.functions.CEPRound1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function round1(c1 double) return bigint as language java name "oracle.cep.colt.functions.CEPRound1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="log101(double)">
     <implClass>oracle.cep.colt.functions.CEPLog101</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPLog101</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function log101(c1 double) return double as language java name "oracle.cep.colt.functions.CEPLog101"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="studentT(double,double)">
     <implClass>oracle.cep.colt.functions.CEPStudentT</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPStudentT</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function studentT(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPStudentT"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="cbrt(double)">
     <implClass>oracle.cep.colt.functions.CEPCbrt</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPCbrt</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function cbrt(c1 double) return double as language java name "oracle.cep.colt.functions.CEPCbrt"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="is_null(float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function is_null(c1 float) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="binomial2(int,int,double)">
     <implClass>oracle.cep.colt.functions.CEPBinomial2</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPBinomial2</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function binomial2(c1 integer, c2 integer, c3 double) return double as language java name "oracle.cep.colt.functions.CEPBinomial2"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="IEEEremainder(double,double)">
     <implClass>oracle.cep.colt.functions.CEPIEEEremainder</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPIEEEremainder</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function IEEEremainder(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPIEEEremainder"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="to_bigint(int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function to_bigint(c1 int) return bigint as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(bigint,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 bigint, n int) return bigint as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="studentTInverse(double,int)">
     <implClass>oracle.cep.colt.functions.CEPStudentTInverse</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPStudentTInverse</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function studentTInverse(c1 double, c2 integer) return double as language java name "oracle.cep.colt.functions.CEPStudentTInverse"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="ltet(timestamp,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ltet(c1 timestamp, c2 timestamp) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="rtrim(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function rtrim(c1 char) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="gammaComplemented(double,double,double)">
     <implClass>oracle.cep.colt.functions.CEPGammaComplemented</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPGammaComplemented</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gammaComplemented(c1 double, c2 double, c3 double) return double as language java name "oracle.cep.colt.functions.CEPGammaComplemented"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="et(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function et(c1 float, c2 float) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="lt(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lt(c1 double, c2 double) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="rint(double)">
     <implClass>oracle.cep.colt.functions.CEPRint</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPRint</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function rint(c1 double) return double as language java name "oracle.cep.colt.functions.CEPRint"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="sinh(double)">
     <implClass>oracle.cep.colt.functions.CEPSinh</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPSinh</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function sinh(c1 double) return double as language java name "oracle.cep.colt.functions.CEPSinh"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 double) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(interval,int,int,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>3</position>
       <name>c4</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 interval, n int, c3 int, c4 timestamp) return interval as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="substr(char,int,int)">
     <implClass>oracle.cep.extensibility.functions.builtin.SubStr</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.SubStr</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function substr(c1 char, c2 int, c3 int) return char as language java name "oracle.cep.extensibility.functions.builtin.SubStr"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="length(byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>b</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function length(b byte) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="divide(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function divide(c1 double, c2 double) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="i1e(double)">
     <implClass>oracle.cep.colt.functions.CEPI1e</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPI1e</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function i1e(c1 double) return double as language java name "oracle.cep.colt.functions.CEPI1e"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="is_null(bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function is_null(c1 bigint) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="subtract(timestamp,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function subtract(c1 timestamp, c2 interval) return timestamp as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="lpad(char,int,char)">
     <implClass>oracle.cep.extensibility.functions.builtin.Lpad</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Lpad</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lpad(c1 char, c2 int, c3 char) return char as language java name "oracle.cep.extensibility.functions.builtin.Lpad"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="atan2(double,double)">
     <implClass>oracle.cep.colt.functions.CEPAtan2</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPAtan2</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function atan2(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPAtan2"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="subtract(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function subtract(c1 int, c2 int) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="net(byte,byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function net(c1 byte, c2 byte) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(double,int,int,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>3</position>
       <name>c4</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 double, n int, c3 int, c4 timestamp) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="et(timestamp,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function et(c1 timestamp, c2 timestamp) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="nvl(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function nvl(c1 float, c2 float) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(timestamp,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 timestamp, n int) return timestamp as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="i0e(double)">
     <implClass>oracle.cep.colt.functions.CEPI0e</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPI0e</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function i0e(c1 double) return double as language java name "oracle.cep.colt.functions.CEPI0e"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="et(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function et(c1 double, c2 double) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="logFactorial(int)">
     <implClass>oracle.cep.colt.functions.CEPLogFactorial</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPLogFactorial</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function logFactorial(c1 integer) return double as language java name "oracle.cep.colt.functions.CEPLogFactorial"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="et(interval,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function et(c1 interval, c2 interval) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(char,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 char, n int) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="ulp1(float)">
     <implClass>oracle.cep.colt.functions.CEPUlp1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>oracle.cep.colt.functions.CEPUlp1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ulp1(c1 float) return float as language java name "oracle.cep.colt.functions.CEPUlp1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="divide(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function divide(c1 float, c2 float) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="to_double(int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function to_double(c1 int) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="gtet(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gtet(c1 bigint, c2 bigint) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(double,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 double, n int) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="gt(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gt(c1 double, c2 double) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="log_and(boolean,boolean)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>boolean</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>boolean</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function log_and(c1 boolean, c2 boolean) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(timestamp,int,int,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>3</position>
       <name>c4</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 timestamp, n int, c3 int, c4 timestamp) return timestamp as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="nvl(byte,byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function nvl(c1 byte, c2 byte) return byte as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
   </SingleFunctions>
   <SimpleFunctions >
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>385</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>431</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>253</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>411</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>219</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>255</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>23</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>263</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>281</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>313</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>128</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>41</funcsElem>
      <funcsElem>43</funcsElem>
      <funcsElem>44</funcsElem>
      <funcsElem>45</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>351</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>403</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>285</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>423</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>5</funcsElem>
      <funcsElem>7</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>339</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>108</funcsElem>
      <funcsElem>110</funcsElem>
      <funcsElem>111</funcsElem>
      <funcsElem>112</funcsElem>
      <funcsElem>113</funcsElem>
      <funcsElem>114</funcsElem>
      <funcsElem>115</funcsElem>
      <funcsElem>116</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>345</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>299</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>10</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>283</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>399</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>249</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>130</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>409</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>217</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>259</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>251</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>261</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>279</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>257</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>363</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>311</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>25</funcsElem>
      <funcsElem>27</funcsElem>
      <funcsElem>28</funcsElem>
      <funcsElem>29</funcsElem>
      <funcsElem>30</funcsElem>
      <funcsElem>31</funcsElem>
      <funcsElem>32</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>297</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>134</funcsElem>
      <funcsElem>136</funcsElem>
      <funcsElem>137</funcsElem>
      <funcsElem>138</funcsElem>
      <funcsElem>139</funcsElem>
      <funcsElem>140</funcsElem>
      <funcsElem>141</funcsElem>
      <funcsElem>142</funcsElem>
      <funcsElem>143</funcsElem>
      <funcsElem>144</funcsElem>
      <funcsElem>145</funcsElem>
      <funcsElem>146</funcsElem>
      <funcsElem>147</funcsElem>
      <funcsElem>148</funcsElem>
      <funcsElem>149</funcsElem>
      <funcsElem>150</funcsElem>
      <funcsElem>151</funcsElem>
      <funcsElem>152</funcsElem>
      <funcsElem>153</funcsElem>
      <funcsElem>154</funcsElem>
      <funcsElem>155</funcsElem>
      <funcsElem>156</funcsElem>
      <funcsElem>157</funcsElem>
      <funcsElem>158</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>122</funcsElem>
      <funcsElem>124</funcsElem>
      <funcsElem>125</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>365</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>353</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>393</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>397</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>307</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>221</funcsElem>
      <funcsElem>223</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>287</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>232</funcsElem>
      <funcsElem>234</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>383</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>12</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>117</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>377</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>213</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>379</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>289</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>99</funcsElem>
      <funcsElem>101</funcsElem>
      <funcsElem>102</funcsElem>
      <funcsElem>103</funcsElem>
      <funcsElem>104</funcsElem>
      <funcsElem>105</funcsElem>
      <funcsElem>106</funcsElem>
      <funcsElem>107</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>381</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>331</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>335</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>329</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>245</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>413</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>341</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>395</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>407</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>51</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>3</funcsElem>
      <funcsElem>9</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>375</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>1</funcsElem>
      <funcsElem>8</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>333</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>132</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>415</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>14</funcsElem>
      <funcsElem>16</funcsElem>
      <funcsElem>17</funcsElem>
      <funcsElem>18</funcsElem>
      <funcsElem>19</funcsElem>
      <funcsElem>20</funcsElem>
      <funcsElem>21</funcsElem>
      <funcsElem>22</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>425</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>235</funcsElem>
      <funcsElem>237</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>355</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>53</funcsElem>
      <funcsElem>55</funcsElem>
      <funcsElem>56</funcsElem>
      <funcsElem>57</funcsElem>
      <funcsElem>58</funcsElem>
      <funcsElem>59</funcsElem>
      <funcsElem>60</funcsElem>
      <funcsElem>61</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>417</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>301</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>419</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>62</funcsElem>
      <funcsElem>64</funcsElem>
      <funcsElem>65</funcsElem>
      <funcsElem>66</funcsElem>
      <funcsElem>67</funcsElem>
      <funcsElem>68</funcsElem>
      <funcsElem>69</funcsElem>
      <funcsElem>70</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>321</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>89</funcsElem>
      <funcsElem>91</funcsElem>
      <funcsElem>92</funcsElem>
      <funcsElem>93</funcsElem>
      <funcsElem>94</funcsElem>
      <funcsElem>95</funcsElem>
      <funcsElem>96</funcsElem>
      <funcsElem>97</funcsElem>
      <funcsElem>98</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>347</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>305</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>315</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>343</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>229</funcsElem>
      <funcsElem>231</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>391</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>309</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>401</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>389</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>427</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>371</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>349</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>323</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>224</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>269</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>265</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>327</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>291</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>46</funcsElem>
      <funcsElem>48</funcsElem>
      <funcsElem>49</funcsElem>
      <funcsElem>50</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>271</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>293</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>126</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>337</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>33</funcsElem>
      <funcsElem>35</funcsElem>
      <funcsElem>36</funcsElem>
      <funcsElem>37</funcsElem>
      <funcsElem>38</funcsElem>
      <funcsElem>39</funcsElem>
      <funcsElem>40</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>215</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>369</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>429</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>367</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>238</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>247</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>405</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>319</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>273</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>303</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>421</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>71</funcsElem>
      <funcsElem>73</funcsElem>
      <funcsElem>74</funcsElem>
      <funcsElem>75</funcsElem>
      <funcsElem>76</funcsElem>
      <funcsElem>77</funcsElem>
      <funcsElem>78</funcsElem>
      <funcsElem>79</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>119</funcsElem>
      <funcsElem>121</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>267</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>275</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>357</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>295</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>80</funcsElem>
      <funcsElem>82</funcsElem>
      <funcsElem>83</funcsElem>
      <funcsElem>84</funcsElem>
      <funcsElem>85</funcsElem>
      <funcsElem>86</funcsElem>
      <funcsElem>87</funcsElem>
      <funcsElem>88</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>277</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>359</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>226</funcsElem>
      <funcsElem>228</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>373</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>361</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>240</funcsElem>
      <funcsElem>242</funcsElem>
      <funcsElem>243</funcsElem>
      <funcsElem>244</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>325</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>317</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>387</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
   </SimpleFunctions>
   <AggrFunctions >
    <AggFunction Key="trimmedMean(double,int,int)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPTrimmedMean</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  trimmedMean(c1 double, c2 int, c3 int) return double  aggregate using "oracle.cep.colt.aggr.CEPTrimmedMean" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="SUM(float)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function sum(c1 float) return float aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="autoCorrelation(double,int)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPAutoCorrelation</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  autoCorrelation(c1 double, c2 int) return double  aggregate using "oracle.cep.colt.aggr.CEPAutoCorrelation" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="COUNT(byte)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function count(c1 byte) return int aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="AVG(bigint)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function avg(c1 bigint) return float aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="MAX(char)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function max(c1 char) return char aggregate using"$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="MAX(bigint)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function max(c1 bigint) return bigint aggregate using "$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="COUNT(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function count(c1 double) return int aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="tklog_secondMax(timestamp)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>oracle.cep.test.userfunctions.TkUsrSecondMax</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt> create function tklog_secondMax(c1 timestamp) return timestamp aggregate using "oracle.cep.test.userfunctions.TkUsrSecondMax" </creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="MIN(char)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function min(c1 char) return char aggregate using"$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="sumOfSquares(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSumOfSquares</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sumOfSquares(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSumOfSquares" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="sampleStandardDeviation(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSampleStandardDeviation</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sampleStandardDeviation(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSampleStandardDeviation" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="MIN(timestamp)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function min(c1 timestamp) return timestamp aggregate using"$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="sumOfInversions(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSumOfInversions</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sumOfInversions(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSumOfInversions" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="MAX(float)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function max(c1 float) return float aggregate using "$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="sumOfSquaredDeviations(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSumOfSquaredDeviations</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sumOfSquaredDeviations(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSumOfSquaredDeviations" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="MIN(interval)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function min(c1 interval) return interval aggregate using"$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="sumOfPowerDeviations(double,int,double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSumOfPowerDeviations</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sumOfPowerDeviations(c1 double, c2 int, c3 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSumOfPowerDeviations" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="COUNT(char)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function count(c1 char) return int aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="kurtosis(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPKurtosis</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  kurtosis(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPKurtosis" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="sumOfPowers(double,int)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSumOfPowers</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sumOfPowers(c1 double, c2 int) return double  aggregate using "oracle.cep.colt.aggr.CEPSumOfPowers" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="LAST(byte,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Last</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function last(c1 byte, n int) return byte aggregate using "oracle.cep.extensibility.functions.builtin.Last"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="tklog_secondMax(interval)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>oracle.cep.test.userfunctions.TkUsrSecondMax</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt> create function tklog_secondMax(c1 interval) return interval aggregate using "oracle.cep.test.userfunctions.TkUsrSecondMax" </creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="LAST(int,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Last</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function last(c1 int, n int) return int aggregate using "oracle.cep.extensibility.functions.builtin.Last"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="moment(double,int,double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPMoment</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  moment(c1 double, c2 int, c3 double) return double  aggregate using "oracle.cep.colt.aggr.CEPMoment" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="MAX(int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function max(c1 int) return int aggregate using "$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="tklog_secondMax(float)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>oracle.cep.test.userfunctions.TkUsrSecondMax</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
      <destQueriesElem>494</destQueriesElem>
     </destQueries>
     <creationTxt> create function tklog_secondMax(c1 float) return float aggregate using "oracle.cep.test.userfunctions.TkUsrSecondMax" </creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="COUNT(float)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function count(c1 float) return int aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="variance(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPVariance</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  variance(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPVariance" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="lag1(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPLag1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  lag1(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPLag1" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="median(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPMedian</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  median(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPMedian" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="FIRST(char,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.First</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function first(c1 char, n int) return char aggregate using "oracle.cep.extensibility.functions.builtin.First"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="SUM(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function sum(c1 double) return double aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="MAX(interval)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function max(c1 interval) return interval aggregate using"$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="meanDeviation(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPMeanDeviation</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  meanDeviation(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPMeanDeviation" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="MIN(bigint)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function min(c1 bigint) return bigint aggregate using "$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="LAST(interval,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Last</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function last(c1 interval, n int) return interval aggregate using "oracle.cep.extensibility.functions.builtin.Last"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="correlation(double,double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPCorrelation</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  correlation(c1 double, c2 double) return double  aggregate using "oracle.cep.colt.aggr.CEPCorrelation" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="AVG(float)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function avg(c1 float) return float aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="sampleKurtosisStandardError(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSampleKurtosisStandardError</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sampleKurtosisStandardError(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSampleKurtosisStandardError" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="sampleSkew(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSampleSkew</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sampleSkew(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSampleSkew" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="sampleSkewStandardError(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSampleSkewStandardError</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sampleSkewStandardError(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSampleSkewStandardError" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="FIRST(bigint,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.First</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function first(c1 bigint, n int) return bigint aggregate using "oracle.cep.extensibility.functions.builtin.First"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="FIRST(float,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.First</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function first(c1 float, n int) return float aggregate using "oracle.cep.extensibility.functions.builtin.First"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="weightedMean(double,double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPWeightedMean</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  weightedMean(c1 double, c2 double) return double  aggregate using "oracle.cep.colt.aggr.CEPWeightedMean" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="COUNT(bigint)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function count(c1 bigint) return int aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="rms(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPRms</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  rms(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPRms" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="FIRST(int,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.First</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function first(c1 int, n int) return int aggregate using "oracle.cep.extensibility.functions.builtin.First"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="MIN(float)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function min(c1 float) return float aggregate using "$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="pooledMean(double,double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPPooledMean</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  pooledMean(c1 double, c2 double) return double  aggregate using "oracle.cep.colt.aggr.CEPPooledMean" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="standardError(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPStandardError</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  standardError(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPStandardError" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="winsorizedMean(double,int,int)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPWinsorizedMean</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  winsorizedMean(c1 double, c2 int, c3 int) return double  aggregate using "oracle.cep.colt.aggr.CEPWinsorizedMean" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="MAX(timestamp)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function max(c1 timestamp) return timestamp aggregate using"$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="MIN(int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function min(c1 int) return int aggregate using "$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="FIRST(double,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.First</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function first(c1 double, n int) return double aggregate using "oracle.cep.extensibility.functions.builtin.First"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="geometricMean(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPGeometricMean</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  geometricMean(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPGeometricMean" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="FIRST(timestamp,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.First</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function first(c1 timestamp, n int) return timestamp aggregate using "oracle.cep.extensibility.functions.builtin.First"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="LAST(float,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Last</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function last(c1 float, n int) return float aggregate using "oracle.cep.extensibility.functions.builtin.Last"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="SUM(int)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function sum(c1 int) return int aggregate using "$dummy" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="product(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPProduct</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  product(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPProduct" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="COUNT(int)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function count(c1 int) return int aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="rankInterpolated(double,double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPRankInterpolated</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  rankInterpolated(c1 double, c2 double) return double  aggregate using "oracle.cep.colt.aggr.CEPRankInterpolated" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="skew(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSkew</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  skew(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSkew" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="AVG(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function avg(c1 double) return double aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="pooledVariance(double,double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPPooledVariance</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  pooledVariance(c1 double, c2 double) return double  aggregate using "oracle.cep.colt.aggr.CEPPooledVariance" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="MAX(double)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function max(c1 double) return double aggregate using "$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="geometricMean1(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPGeometricMean1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  geometricMean1(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPGeometricMean1" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="durbinWatson(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPDurbinWatson</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  durbinWatson(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPDurbinWatson" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="tklog_secondMax(byte)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>oracle.cep.test.userfunctions.TkUsrSecondMax</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt> create function tklog_secondMax(c1 byte) return byte aggregate using "oracle.cep.test.userfunctions.TkUsrSecondMax" </creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="COUNT(timestamp)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function count(c1 timestamp) return int aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="MIN(byte)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function min(c1 byte) return byte aggregate using"$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="SUM(bigint)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function sum(c1 bigint) return bigint aggregate using "$dummy" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="standardDeviation(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPStandardDeviation</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  standardDeviation(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPStandardDeviation" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="LAST(char,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Last</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function last(c1 char, n int) return char aggregate using "oracle.cep.extensibility.functions.builtin.Last"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="FIRST(byte,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.First</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function first(c1 byte, n int) return byte aggregate using "oracle.cep.extensibility.functions.builtin.First"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="AVG(int)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function avg(c1 int) return float aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="MAX(byte)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function max(c1 byte) return byte aggregate using"$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="COUNT(interval)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function count(c1 interval) return int aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="sampleKurtosis(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSampleKurtosis</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sampleKurtosis(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSampleKurtosis" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="LAST(bigint,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Last</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function last(c1 bigint, n int) return bigint aggregate using "oracle.cep.extensibility.functions.builtin.Last"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="quantile(double,double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPQuantile</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  quantile(c1 double, c2 double) return double  aggregate using "oracle.cep.colt.aggr.CEPQuantile" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="LAST(timestamp,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Last</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function last(c1 timestamp, n int) return timestamp aggregate using "oracle.cep.extensibility.functions.builtin.Last"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="sumOfLogarithms(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSumOfLogarithms</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sumOfLogarithms(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSumOfLogarithms" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="tklog_secondMax(char)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>oracle.cep.test.userfunctions.TkUsrSecondMax</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt> create function tklog_secondMax(c1 char) return char aggregate using "oracle.cep.test.userfunctions.TkUsrSecondMax" </creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="covariance(double,double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPCovariance</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  covariance(c1 double, c2 double) return double  aggregate using "oracle.cep.colt.aggr.CEPCovariance" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="mean(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPMean</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  mean(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPMean" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="harmonicMean(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPHarmonicMean</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  harmonicMean(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPHarmonicMean" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="quantileInverse(double,double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPQuantileInverse</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  quantileInverse(c1 double, c2 double) return double  aggregate using "oracle.cep.colt.aggr.CEPQuantileInverse" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="sampleVariance(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSampleVariance</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sampleVariance(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSampleVariance" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="MIN(double)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function min(c1 double) return double aggregate using "$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="LAST(double,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Last</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function last(c1 double, n int) return double aggregate using "oracle.cep.extensibility.functions.builtin.Last"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="FIRST(interval,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.First</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function first(c1 interval, n int) return interval aggregate using "oracle.cep.extensibility.functions.builtin.First"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
   </AggrFunctions>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=METADATA_USERFUNC event=DUMP target=UserFunctionManager levels=2 3 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="0" TargetName="UserFunctionManager">
  <Level Name="MUSERFUNC_INFO" Value="2">
   <SingleFunctions >
    <SimpleFunction Key="ltet(interval,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ltet(c1 interval, c2 interval) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="plus(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function plus(c1 double, c2 double) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="ltrim(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ltrim(c1 char, c2 char) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="gt(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gt(c1 bigint, c2 bigint) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="incompleteBeta(double,double,double)">
     <implClass>oracle.cep.colt.functions.CEPIncompleteBeta</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPIncompleteBeta</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function incompleteBeta(c1 double, c2 double, c3 double) return double as language java name "oracle.cep.colt.functions.CEPIncompleteBeta"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="poissonComplemented(int,double)">
     <implClass>oracle.cep.colt.functions.CEPPoissonComplemented</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPPoissonComplemented</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function poissonComplemented(c1 integer, c2 double) return double as language java name "oracle.cep.colt.functions.CEPPoissonComplemented"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="nvl(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function nvl(c1 int, c2 int) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="normal1(double,double,double)">
     <implClass>oracle.cep.colt.functions.CEPNormal1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPNormal1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function normal1(c1 double, c2 double, c3 double) return double as language java name "oracle.cep.colt.functions.CEPNormal1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="abs2(float)">
     <implClass>oracle.cep.colt.functions.CEPAbs2</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>oracle.cep.colt.functions.CEPAbs2</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function abs2(c1 float) return float as language java name "oracle.cep.colt.functions.CEPAbs2"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="negativeBinomial(int,int,double)">
     <implClass>oracle.cep.colt.functions.CEPNegativeBinomial</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPNegativeBinomial</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function negativeBinomial(c1 integer, c2 integer, c3 double) return double as language java name "oracle.cep.colt.functions.CEPNegativeBinomial"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="initcap(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function initcap(c1 char) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="toRadians(double)">
     <implClass>oracle.cep.colt.functions.CEPToRadians</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPToRadians</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function toRadians(c1 double) return double as language java name "oracle.cep.colt.functions.CEPToRadians"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="lt(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lt(c1 bigint, c2 bigint) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="gtet(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gtet(c1 int, c2 int) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="hypot(double,double)">
     <implClass>oracle.cep.colt.functions.CEPHypot</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPHypot</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function hypot(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPHypot"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="divide(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function divide(c1 bigint, c2 bigint) return bigint as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="net(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function net(c1 float, c2 float) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="nvl(timestamp,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function nvl(c1 timestamp, c2 timestamp) return timestamp as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="k1e(double)">
     <implClass>oracle.cep.colt.functions.CEPK1e</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPK1e</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function k1e(c1 double) return double as language java name "oracle.cep.colt.functions.CEPK1e"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="to_double(float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function to_double(c1 float) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="cosh(double)">
     <implClass>oracle.cep.colt.functions.CEPCosh</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPCosh</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function cosh(c1 double) return double as language java name "oracle.cep.colt.functions.CEPCosh"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="multiply(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function multiply(c1 float, c2 float) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="signum1(float)">
     <implClass>oracle.cep.colt.functions.CEPSignum1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>oracle.cep.colt.functions.CEPSignum1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function signum1(c1 float) return float as language java name "oracle.cep.colt.functions.CEPSignum1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="rpad(char,int,char)">
     <implClass>oracle.cep.extensibility.functions.builtin.Rpad</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Rpad</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function rpad(c1 char, c2 int, c3 char) return char as language java name "oracle.cep.extensibility.functions.builtin.Rpad"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="multiply(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function multiply(c1 double, c2 double) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="is_null(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function is_null(c1 char) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="expm1(double)">
     <implClass>oracle.cep.colt.functions.CEPExpm1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPExpm1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function expm1(c1 double) return double as language java name "oracle.cep.colt.functions.CEPExpm1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="to_double(bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function to_double(c1 bigint) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="et(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function et(c1 int, c2 int) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="to_timestamp(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function to_timestamp(c1 char) return timestamp as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="et(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function et(c1 bigint, c2 bigint) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="k0(double)">
     <implClass>oracle.cep.colt.functions.CEPK0</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPK0</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function k0(c1 double) return double as language java name "oracle.cep.colt.functions.CEPK0"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="nvl(interval,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function nvl(c1 interval, c2 interval) return interval as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="lt(timestamp,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lt(c1 timestamp, c2 timestamp) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="hash2(int)">
     <implClass>oracle.cep.colt.functions.CEPHash2</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.colt.functions.CEPHash2</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function hash2(c1 integer) return integer as language java name "oracle.cep.colt.functions.CEPHash2"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="tan(double)">
     <implClass>oracle.cep.colt.functions.CEPTan</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPTan</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function tan(c1 double) return double as language java name "oracle.cep.colt.functions.CEPTan"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="lt(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lt(c1 char, c2 char) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="ltet(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ltet(c1 double, c2 double) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="translate(char,char,char)">
     <implClass>oracle.cep.extensibility.functions.builtin.Translate</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Translate</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function translate(c1 char, c2 char, c3 char) return char as language java name "oracle.cep.extensibility.functions.builtin.Translate"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(float,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 float, n int) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="beta(double,double)">
     <implClass>oracle.cep.colt.functions.CEPBeta</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPBeta</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function beta(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPBeta"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="systimestamp()">
     <implClass>null</implClass>
     <paramList >
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function systimestamp return timestamp as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(byte,int,int,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>3</position>
       <name>c4</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 byte, n int, c3 int, c4 timestamp) return byte as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="logGamma(double)">
     <implClass>oracle.cep.colt.functions.CEPLogGamma</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPLogGamma</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function logGamma(c1 double) return double as language java name "oracle.cep.colt.functions.CEPLogGamma"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="ulp(double)">
     <implClass>oracle.cep.colt.functions.CEPUlp</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPUlp</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ulp(c1 double) return double as language java name "oracle.cep.colt.functions.CEPUlp"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="sin(double)">
     <implClass>oracle.cep.colt.functions.CEPSin</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPSin</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function sin(c1 double) return double as language java name "oracle.cep.colt.functions.CEPSin"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="plus(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function plus(c1 bigint, c2 bigint) return bigint as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="toDegrees(double)">
     <implClass>oracle.cep.colt.functions.CEPToDegrees</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPToDegrees</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function toDegrees(c1 double) return double as language java name "oracle.cep.colt.functions.CEPToDegrees"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="ltrim(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ltrim(c1 char) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="lower(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lower(c1 char) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="leastSignificantBit(int)">
     <implClass>oracle.cep.colt.functions.CEPLeastSignificantBit</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.colt.functions.CEPLeastSignificantBit</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function leastSignificantBit(c1 integer) return integer as language java name "oracle.cep.colt.functions.CEPLeastSignificantBit"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="gtet(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gtet(c1 char, c2 char) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="cos(double)">
     <implClass>oracle.cep.colt.functions.CEPCos</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPCos</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function cos(c1 double) return double as language java name "oracle.cep.colt.functions.CEPCos"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="length(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function length(c char) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="k0e(double)">
     <implClass>oracle.cep.colt.functions.CEPK0e</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPK0e</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function k0e(c1 double) return double as language java name "oracle.cep.colt.functions.CEPK0e"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="to_float(bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function to_float(c1 bigint) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="multiply(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function multiply(c1 bigint, c2 bigint) return bigint as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="net(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function net(c1 double, c2 double) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="gt(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gt(c1 int, c2 int) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="mostSignificantBit(int)">
     <implClass>oracle.cep.colt.functions.CEPMostSignificantBit</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.colt.functions.CEPMostSignificantBit</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function mostSignificantBit(c1 integer) return integer as language java name "oracle.cep.colt.functions.CEPMostSignificantBit"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="nvl(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function nvl(c1 double, c2 double) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="et(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function et(c1 char, c2 char) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="lt(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lt(c1 int, c2 int) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="gtet(timestamp,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gtet(c1 timestamp, c2 timestamp) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="signum(double)">
     <implClass>oracle.cep.colt.functions.CEPSignum</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPSignum</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function signum(c1 double) return double as language java name "oracle.cep.colt.functions.CEPSignum"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 bigint) return bigint as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="j0(double)">
     <implClass>oracle.cep.colt.functions.CEPJ0</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPJ0</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function j0(c1 double) return double as language java name "oracle.cep.colt.functions.CEPJ0"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="ceil1(double)">
     <implClass>oracle.cep.colt.functions.CEPCeil1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPCeil1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ceil1(c1 double) return double as language java name "oracle.cep.colt.functions.CEPCeil1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="abs(int)">
     <implClass>oracle.cep.colt.functions.CEPAbs</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.colt.functions.CEPAbs</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function abs(c1 integer) return integer as language java name "oracle.cep.colt.functions.CEPAbs"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="ceil(double)">
     <implClass>oracle.cep.colt.functions.CEPCeil</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>oracle.cep.colt.functions.CEPCeil</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ceil(c1 double) return bigint as language java name "oracle.cep.colt.functions.CEPCeil"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="gt(interval,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gt(c1 interval, c2 interval) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="subtract(timestamp,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function subtract(c1 timestamp, c2 timestamp) return interval as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="ltet(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ltet(c1 bigint, c2 bigint) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(float,int,int,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>3</position>
       <name>c4</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 float, n int, c3 int, c4 timestamp) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="betaComplemented(double,double,double)">
     <implClass>oracle.cep.colt.functions.CEPBetaComplemented</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPBetaComplemented</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function betaComplemented(c1 double, c2 double, c3 double) return double as language java name "oracle.cep.colt.functions.CEPBetaComplemented"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="floor1(double)">
     <implClass>oracle.cep.colt.functions.CEPFloor1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPFloor1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function floor1(c1 double) return double as language java name "oracle.cep.colt.functions.CEPFloor1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="plus(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function plus(c1 int, c2 int) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="concat(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function concat(c1 char, c2 char) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="gtet(interval,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gtet(c1 interval, c2 interval) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(int,int,int,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>3</position>
       <name>c4</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 int, n int, c3 int, c4 timestamp) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="plus(timestamp,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function plus(c1 timestamp, c2 interval) return timestamp as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="k1(double)">
     <implClass>oracle.cep.colt.functions.CEPK1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPK1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function k1(c1 double) return double as language java name "oracle.cep.colt.functions.CEPK1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="chiSquareComplemented(double,double)">
     <implClass>oracle.cep.colt.functions.CEPChiSquareComplemented</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPChiSquareComplemented</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function chiSquareComplemented(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPChiSquareComplemented"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="kn(int,double)">
     <implClass>oracle.cep.colt.functions.CEPKn</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPKn</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function kn(c1 integer, c2 double) return double as language java name "oracle.cep.colt.functions.CEPKn"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="hextoraw(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function hextoraw(c char) return byte as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="mod(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function mod(c1 double, c2 double) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="et(byte,byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function et(c1 byte, c2 byte) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="hash1(float)">
     <implClass>oracle.cep.colt.functions.CEPHash1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.colt.functions.CEPHash1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function hash1(c1 float) return integer as language java name "oracle.cep.colt.functions.CEPHash1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="factorial(int)">
     <implClass>oracle.cep.colt.functions.CEPFactorial</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPFactorial</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function factorial(c1 integer) return double as language java name "oracle.cep.colt.functions.CEPFactorial"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="lt(byte,byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lt(c1 byte, c2 byte) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="to_float(int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function to_float(c1 int) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="j1(double)">
     <implClass>oracle.cep.colt.functions.CEPJ1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPJ1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function j1(c1 double) return double as language java name "oracle.cep.colt.functions.CEPJ1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="poisson(int,double)">
     <implClass>oracle.cep.colt.functions.CEPPoisson</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPPoisson</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function poisson(c1 integer, c2 double) return double as language java name "oracle.cep.colt.functions.CEPPoisson"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="mod(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function mod(c1 bigint, c2 bigint) return bigint as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="multiply(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function multiply(c1 int, c2 int) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="longFactorial(int)">
     <implClass>oracle.cep.colt.functions.CEPLongFactorial</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>oracle.cep.colt.functions.CEPLongFactorial</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function longFactorial(c1 integer) return bigint as language java name "oracle.cep.colt.functions.CEPLongFactorial"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="subtract(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function subtract(c1 double, c2 double) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 byte) return byte as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="exp(double)">
     <implClass>oracle.cep.colt.functions.CEPExp</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPExp</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function exp(c1 double) return double as language java name "oracle.cep.colt.functions.CEPExp"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="XMLQUERY(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>xmltype</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function XMLQUERY(c1 char) return xmltype as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="ltet(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ltet(c1 char, c2 char) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="net(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function net(c1 bigint, c2 bigint) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="binomial(double,bigint)">
     <implClass>oracle.cep.colt.functions.CEPBinomial</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPBinomial</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function binomial(c1 double, c2 bigint) return double as language java name "oracle.cep.colt.functions.CEPBinomial"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="net(timestamp,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function net(c1 timestamp, c2 timestamp) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="gtet(byte,byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gtet(c1 byte, c2 byte) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="nvl(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function nvl(c1 bigint, c2 bigint) return bigint as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 int) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="log10(double)">
     <implClass>oracle.cep.colt.functions.CEPLog10</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPLog10</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function log10(c1 double) return double as language java name "oracle.cep.colt.functions.CEPLog10"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="log1p(double)">
     <implClass>oracle.cep.colt.functions.CEPLog1p</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPLog1p</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function log1p(c1 double) return double as language java name "oracle.cep.colt.functions.CEPLog1p"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="errorFunctionComplemented(double)">
     <implClass>oracle.cep.colt.functions.CEPErrorFunctionComplemented</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPErrorFunctionComplemented</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function errorFunctionComplemented(c1 double) return double as language java name "oracle.cep.colt.functions.CEPErrorFunctionComplemented"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="sqrt(double)">
     <implClass>oracle.cep.colt.functions.CEPSqrt</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPSqrt</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function sqrt(c1 double) return double as language java name "oracle.cep.colt.functions.CEPSqrt"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="is_null(timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function is_null(c1 timestamp) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="i0(double)">
     <implClass>oracle.cep.colt.functions.CEPI0</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPI0</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function i0(c1 double) return double as language java name "oracle.cep.colt.functions.CEPI0"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="divide(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function divide(c1 int, c2 int) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="abs3(double)">
     <implClass>oracle.cep.colt.functions.CEPAbs3</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPAbs3</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function abs3(c1 double) return double as language java name "oracle.cep.colt.functions.CEPAbs3"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="beta1(double,double,double)">
     <implClass>oracle.cep.colt.functions.CEPBeta1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPBeta1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function beta1(c1 double, c2 double, c3 double) return double as language java name "oracle.cep.colt.functions.CEPBeta1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="gt(timestamp,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gt(c1 timestamp, c2 timestamp) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="substr(char,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function substr(c1 char, c2 int) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="subtract(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function subtract(c1 float, c2 float) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="log_xor(boolean,boolean)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>boolean</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>boolean</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function log_xor(c1 boolean, c2 boolean) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="net(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function net(c1 int, c2 int) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="pow(double,double)">
     <implClass>oracle.cep.colt.functions.CEPPow</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPPow</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function pow(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPPow"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="rawtohex(byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>b</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function rawtohex(b byte) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(char,int,int,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>3</position>
       <name>c4</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 char, n int, c3 int, c4 timestamp) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="ltet(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ltet(c1 int, c2 int) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="gtet(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gtet(c1 float, c2 float) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="ltet(byte,byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ltet(c1 byte, c2 byte) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="plus(interval,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function plus(c1 interval, c2 timestamp) return timestamp as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="is_null(interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function is_null(c1 interval) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="binomial1(bigint,bigint)">
     <implClass>oracle.cep.colt.functions.CEPBinomial1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPBinomial1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function binomial1(c1 bigint, c2 bigint) return double as language java name "oracle.cep.colt.functions.CEPBinomial1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="normal(double)">
     <implClass>oracle.cep.colt.functions.CEPNormal</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPNormal</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function normal(c1 double) return double as language java name "oracle.cep.colt.functions.CEPNormal"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="yn(int,double)">
     <implClass>oracle.cep.colt.functions.CEPYn</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPYn</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function yn(c1 integer, c2 double) return double as language java name "oracle.cep.colt.functions.CEPYn"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(byte,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 byte, n int) return byte as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="plus(interval,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function plus(c1 interval, c2 interval) return interval as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="floor(double)">
     <implClass>oracle.cep.colt.functions.CEPFloor</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>oracle.cep.colt.functions.CEPFloor</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function floor(c1 double) return bigint as language java name "oracle.cep.colt.functions.CEPFloor"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="stirlingCorrection(int)">
     <implClass>oracle.cep.colt.functions.CEPStirlingCorrection</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPStirlingCorrection</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function stirlingCorrection(c1 integer) return double as language java name "oracle.cep.colt.functions.CEPStirlingCorrection"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="mod(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function mod(c1 float, c2 float) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="ltet(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ltet(c1 float, c2 float) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="i1(double)">
     <implClass>oracle.cep.colt.functions.CEPI1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPI1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function i1(c1 double) return double as language java name "oracle.cep.colt.functions.CEPI1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="hash(double)">
     <implClass>oracle.cep.colt.functions.CEPHash</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.colt.functions.CEPHash</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function hash(c1 double) return integer as language java name "oracle.cep.colt.functions.CEPHash"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 float) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="concat(byte,byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>b1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>b2</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function concat(b1 byte, b2 byte) return byte as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 timestamp) return timestamp as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="plus(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function plus(c1 float, c2 float) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="subtract(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function subtract(c1 bigint, c2 bigint) return bigint as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="subtract(interval,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function subtract(c1 interval, c2 interval) return interval as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 char) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="upper(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function upper(c1 char) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="errorFunction(double)">
     <implClass>oracle.cep.colt.functions.CEPErrorFunction</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPErrorFunction</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function errorFunction(c1 double) return double as language java name "oracle.cep.colt.functions.CEPErrorFunction"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="incompleteGammaComplement(double,double)">
     <implClass>oracle.cep.colt.functions.CEPIncompleteGammaComplement</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPIncompleteGammaComplement</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function incompleteGammaComplement(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPIncompleteGammaComplement"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(interval,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 interval, n int) return interval as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="is_null(double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function is_null(c1 double) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="to_timestamp(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function to_timestamp(c1 char, c2 char) return timestamp as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="atan(double)">
     <implClass>oracle.cep.colt.functions.CEPAtan</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPAtan</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function atan(c1 double) return double as language java name "oracle.cep.colt.functions.CEPAtan"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="et(boolean,boolean)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>boolean</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>boolean</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function et(c1 boolean, c2 boolean) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="net(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function net(c1 char, c2 char) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="abs1(bigint)">
     <implClass>oracle.cep.colt.functions.CEPAbs1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>oracle.cep.colt.functions.CEPAbs1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function abs1(c1 bigint) return bigint as language java name "oracle.cep.colt.functions.CEPAbs1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="lk(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lk(c1 char, c2 char) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="gt(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gt(c1 char, c2 char) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(bigint,int,int,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>3</position>
       <name>c4</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 bigint, n int, c3 int, c4 timestamp) return bigint as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="net(interval,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function net(c1 interval, c2 interval) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="asin(double)">
     <implClass>oracle.cep.colt.functions.CEPAsin</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPAsin</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function asin(c1 double) return double as language java name "oracle.cep.colt.functions.CEPAsin"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="mod(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function mod(c1 int, c2 int) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 interval) return interval as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="bitMaskWithBitsSetFromTo(int,int)">
     <implClass>oracle.cep.colt.functions.CEPBitMaskWithBitsSetFromTo</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>oracle.cep.colt.functions.CEPBitMaskWithBitsSetFromTo</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function bitMaskWithBitsSetFromTo(c1 integer, c2 integer) return bigint as language java name "oracle.cep.colt.functions.CEPBitMaskWithBitsSetFromTo"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="log1(double)">
     <implClass>oracle.cep.colt.functions.CEPLog1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPLog1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function log1(c1 double) return double as language java name "oracle.cep.colt.functions.CEPLog1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="log_or(boolean,boolean)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>boolean</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>boolean</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function log_or(c1 boolean, c2 boolean) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="hash3(bigint)">
     <implClass>oracle.cep.colt.functions.CEPHash3</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.colt.functions.CEPHash3</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function hash3(c1 bigint) return integer as language java name "oracle.cep.colt.functions.CEPHash3"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="rpad(char,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function rpad(c1 char, c2 int) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="y0(double)">
     <implClass>oracle.cep.colt.functions.CEPY0</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPY0</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function y0(c1 double) return double as language java name "oracle.cep.colt.functions.CEPY0"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="XMLEXISTS(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function XMLEXISTS(c1 char) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="jn(int,double)">
     <implClass>oracle.cep.colt.functions.CEPJn</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPJn</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function jn(c1 integer, c2 double) return double as language java name "oracle.cep.colt.functions.CEPJn"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="acos(double)">
     <implClass>oracle.cep.colt.functions.CEPAcos</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPAcos</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function acos(c1 double) return double as language java name "oracle.cep.colt.functions.CEPAcos"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 int, n int) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="binomialComplemented(int,int,double)">
     <implClass>oracle.cep.colt.functions.CEPBinomialComplemented</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPBinomialComplemented</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function binomialComplemented(c1 integer, c2 integer, c3 double) return double as language java name "oracle.cep.colt.functions.CEPBinomialComplemented"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="incompleteGamma(double,double)">
     <implClass>oracle.cep.colt.functions.CEPIncompleteGamma</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPIncompleteGamma</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function incompleteGamma(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPIncompleteGamma"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="rtrim(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function rtrim(c1 char, c2 char) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="lt(interval,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lt(c1 interval, c2 interval) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="is_null(int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function is_null(c1 int) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="gt(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gt(c1 float, c2 float) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="log(double,double)">
     <implClass>oracle.cep.colt.functions.CEPLog</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPLog</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function log(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPLog"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="nvl(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function nvl(c1 char, c2 char) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="is_null(byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function is_null(c1 byte) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="chiSquare(double,double)">
     <implClass>oracle.cep.colt.functions.CEPChiSquare</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPChiSquare</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function chiSquare(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPChiSquare"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="gamma1(double,double,double)">
     <implClass>oracle.cep.colt.functions.CEPGamma1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPGamma1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gamma1(c1 double, c2 double, c3 double) return double as language java name "oracle.cep.colt.functions.CEPGamma1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="gt(byte,byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gt(c1 byte, c2 byte) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="log_not(boolean)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>boolean</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function log_not(c1 boolean) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="lpad(char,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lpad(c1 char, c2 int) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="gamma(double)">
     <implClass>oracle.cep.colt.functions.CEPGamma</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPGamma</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gamma(c1 double) return double as language java name "oracle.cep.colt.functions.CEPGamma"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="tanh(double)">
     <implClass>oracle.cep.colt.functions.CEPTanh</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPTanh</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function tanh(c1 double) return double as language java name "oracle.cep.colt.functions.CEPTanh"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="normalInverse(double)">
     <implClass>oracle.cep.colt.functions.CEPNormalInverse</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPNormalInverse</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function normalInverse(c1 double) return double as language java name "oracle.cep.colt.functions.CEPNormalInverse"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="getSeedAtRowColumn(int,int)">
     <implClass>oracle.cep.colt.functions.CEPGetSeedAtRowColumn</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.colt.functions.CEPGetSeedAtRowColumn</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function getSeedAtRowColumn(c1 integer, c2 integer) return integer as language java name "oracle.cep.colt.functions.CEPGetSeedAtRowColumn"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="round(float)">
     <implClass>oracle.cep.colt.functions.CEPRound</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.colt.functions.CEPRound</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function round(c1 float) return integer as language java name "oracle.cep.colt.functions.CEPRound"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="gtet(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gtet(c1 double, c2 double) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="negativeBinomialComplemented(int,int,double)">
     <implClass>oracle.cep.colt.functions.CEPNegativeBinomialComplemented</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPNegativeBinomialComplemented</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function negativeBinomialComplemented(c1 integer, c2 integer, c3 double) return double as language java name "oracle.cep.colt.functions.CEPNegativeBinomialComplemented"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="log2(double)">
     <implClass>oracle.cep.colt.functions.CEPLog2</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPLog2</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function log2(c1 double) return double as language java name "oracle.cep.colt.functions.CEPLog2"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="lt(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lt(c1 float, c2 float) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="y1(double)">
     <implClass>oracle.cep.colt.functions.CEPY1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPY1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function y1(c1 double) return double as language java name "oracle.cep.colt.functions.CEPY1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="round1(double)">
     <implClass>oracle.cep.colt.functions.CEPRound1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>oracle.cep.colt.functions.CEPRound1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function round1(c1 double) return bigint as language java name "oracle.cep.colt.functions.CEPRound1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="log101(double)">
     <implClass>oracle.cep.colt.functions.CEPLog101</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPLog101</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function log101(c1 double) return double as language java name "oracle.cep.colt.functions.CEPLog101"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="studentT(double,double)">
     <implClass>oracle.cep.colt.functions.CEPStudentT</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPStudentT</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function studentT(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPStudentT"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="cbrt(double)">
     <implClass>oracle.cep.colt.functions.CEPCbrt</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPCbrt</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function cbrt(c1 double) return double as language java name "oracle.cep.colt.functions.CEPCbrt"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="is_null(float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function is_null(c1 float) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="binomial2(int,int,double)">
     <implClass>oracle.cep.colt.functions.CEPBinomial2</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPBinomial2</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function binomial2(c1 integer, c2 integer, c3 double) return double as language java name "oracle.cep.colt.functions.CEPBinomial2"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="IEEEremainder(double,double)">
     <implClass>oracle.cep.colt.functions.CEPIEEEremainder</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPIEEEremainder</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function IEEEremainder(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPIEEEremainder"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="to_bigint(int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function to_bigint(c1 int) return bigint as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(bigint,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 bigint, n int) return bigint as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="studentTInverse(double,int)">
     <implClass>oracle.cep.colt.functions.CEPStudentTInverse</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPStudentTInverse</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function studentTInverse(c1 double, c2 integer) return double as language java name "oracle.cep.colt.functions.CEPStudentTInverse"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="ltet(timestamp,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ltet(c1 timestamp, c2 timestamp) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="rtrim(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function rtrim(c1 char) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="gammaComplemented(double,double,double)">
     <implClass>oracle.cep.colt.functions.CEPGammaComplemented</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPGammaComplemented</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gammaComplemented(c1 double, c2 double, c3 double) return double as language java name "oracle.cep.colt.functions.CEPGammaComplemented"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="et(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function et(c1 float, c2 float) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="lt(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lt(c1 double, c2 double) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="rint(double)">
     <implClass>oracle.cep.colt.functions.CEPRint</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPRint</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function rint(c1 double) return double as language java name "oracle.cep.colt.functions.CEPRint"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="sinh(double)">
     <implClass>oracle.cep.colt.functions.CEPSinh</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPSinh</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function sinh(c1 double) return double as language java name "oracle.cep.colt.functions.CEPSinh"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 double) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(interval,int,int,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>3</position>
       <name>c4</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 interval, n int, c3 int, c4 timestamp) return interval as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="substr(char,int,int)">
     <implClass>oracle.cep.extensibility.functions.builtin.SubStr</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.SubStr</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function substr(c1 char, c2 int, c3 int) return char as language java name "oracle.cep.extensibility.functions.builtin.SubStr"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="length(byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>b</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function length(b byte) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="divide(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function divide(c1 double, c2 double) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="i1e(double)">
     <implClass>oracle.cep.colt.functions.CEPI1e</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPI1e</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function i1e(c1 double) return double as language java name "oracle.cep.colt.functions.CEPI1e"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="is_null(bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function is_null(c1 bigint) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="subtract(timestamp,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function subtract(c1 timestamp, c2 interval) return timestamp as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="lpad(char,int,char)">
     <implClass>oracle.cep.extensibility.functions.builtin.Lpad</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Lpad</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lpad(c1 char, c2 int, c3 char) return char as language java name "oracle.cep.extensibility.functions.builtin.Lpad"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="atan2(double,double)">
     <implClass>oracle.cep.colt.functions.CEPAtan2</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPAtan2</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function atan2(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPAtan2"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="subtract(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function subtract(c1 int, c2 int) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="net(byte,byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function net(c1 byte, c2 byte) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(double,int,int,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>3</position>
       <name>c4</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 double, n int, c3 int, c4 timestamp) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="et(timestamp,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function et(c1 timestamp, c2 timestamp) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="nvl(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function nvl(c1 float, c2 float) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(timestamp,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 timestamp, n int) return timestamp as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="i0e(double)">
     <implClass>oracle.cep.colt.functions.CEPI0e</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPI0e</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function i0e(c1 double) return double as language java name "oracle.cep.colt.functions.CEPI0e"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="et(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function et(c1 double, c2 double) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="logFactorial(int)">
     <implClass>oracle.cep.colt.functions.CEPLogFactorial</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPLogFactorial</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function logFactorial(c1 integer) return double as language java name "oracle.cep.colt.functions.CEPLogFactorial"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="et(interval,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function et(c1 interval, c2 interval) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(char,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 char, n int) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="ulp1(float)">
     <implClass>oracle.cep.colt.functions.CEPUlp1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>oracle.cep.colt.functions.CEPUlp1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ulp1(c1 float) return float as language java name "oracle.cep.colt.functions.CEPUlp1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="divide(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function divide(c1 float, c2 float) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="to_double(int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function to_double(c1 int) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="gtet(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gtet(c1 bigint, c2 bigint) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(double,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 double, n int) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="gt(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gt(c1 double, c2 double) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="log_and(boolean,boolean)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>boolean</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>boolean</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function log_and(c1 boolean, c2 boolean) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="prev(timestamp,int,int,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>3</position>
       <name>c4</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 timestamp, n int, c3 int, c4 timestamp) return timestamp as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
    <SimpleFunction Key="nvl(byte,byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function nvl(c1 byte, c2 byte) return byte as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunction>
   </SingleFunctions>
   <SimpleFunctions >
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>385</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>431</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>253</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>411</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>219</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>255</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>23</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>263</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>281</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>313</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>128</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>41</funcsElem>
      <funcsElem>43</funcsElem>
      <funcsElem>44</funcsElem>
      <funcsElem>45</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>351</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>403</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>285</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>423</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>5</funcsElem>
      <funcsElem>7</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>339</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>108</funcsElem>
      <funcsElem>110</funcsElem>
      <funcsElem>111</funcsElem>
      <funcsElem>112</funcsElem>
      <funcsElem>113</funcsElem>
      <funcsElem>114</funcsElem>
      <funcsElem>115</funcsElem>
      <funcsElem>116</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>345</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>299</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>10</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>283</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>399</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>249</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>130</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>409</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>217</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>259</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>251</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>261</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>279</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>257</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>363</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>311</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>25</funcsElem>
      <funcsElem>27</funcsElem>
      <funcsElem>28</funcsElem>
      <funcsElem>29</funcsElem>
      <funcsElem>30</funcsElem>
      <funcsElem>31</funcsElem>
      <funcsElem>32</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>297</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>134</funcsElem>
      <funcsElem>136</funcsElem>
      <funcsElem>137</funcsElem>
      <funcsElem>138</funcsElem>
      <funcsElem>139</funcsElem>
      <funcsElem>140</funcsElem>
      <funcsElem>141</funcsElem>
      <funcsElem>142</funcsElem>
      <funcsElem>143</funcsElem>
      <funcsElem>144</funcsElem>
      <funcsElem>145</funcsElem>
      <funcsElem>146</funcsElem>
      <funcsElem>147</funcsElem>
      <funcsElem>148</funcsElem>
      <funcsElem>149</funcsElem>
      <funcsElem>150</funcsElem>
      <funcsElem>151</funcsElem>
      <funcsElem>152</funcsElem>
      <funcsElem>153</funcsElem>
      <funcsElem>154</funcsElem>
      <funcsElem>155</funcsElem>
      <funcsElem>156</funcsElem>
      <funcsElem>157</funcsElem>
      <funcsElem>158</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>122</funcsElem>
      <funcsElem>124</funcsElem>
      <funcsElem>125</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>365</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>353</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>393</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>397</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>307</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>221</funcsElem>
      <funcsElem>223</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>287</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>232</funcsElem>
      <funcsElem>234</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>383</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>12</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>117</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>377</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>213</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>379</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>289</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>99</funcsElem>
      <funcsElem>101</funcsElem>
      <funcsElem>102</funcsElem>
      <funcsElem>103</funcsElem>
      <funcsElem>104</funcsElem>
      <funcsElem>105</funcsElem>
      <funcsElem>106</funcsElem>
      <funcsElem>107</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>381</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>331</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>335</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>329</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>245</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>413</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>341</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>395</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>407</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>51</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>3</funcsElem>
      <funcsElem>9</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>375</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>1</funcsElem>
      <funcsElem>8</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>333</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>132</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>415</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>14</funcsElem>
      <funcsElem>16</funcsElem>
      <funcsElem>17</funcsElem>
      <funcsElem>18</funcsElem>
      <funcsElem>19</funcsElem>
      <funcsElem>20</funcsElem>
      <funcsElem>21</funcsElem>
      <funcsElem>22</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>425</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>235</funcsElem>
      <funcsElem>237</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>355</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>53</funcsElem>
      <funcsElem>55</funcsElem>
      <funcsElem>56</funcsElem>
      <funcsElem>57</funcsElem>
      <funcsElem>58</funcsElem>
      <funcsElem>59</funcsElem>
      <funcsElem>60</funcsElem>
      <funcsElem>61</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>417</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>301</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>419</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>62</funcsElem>
      <funcsElem>64</funcsElem>
      <funcsElem>65</funcsElem>
      <funcsElem>66</funcsElem>
      <funcsElem>67</funcsElem>
      <funcsElem>68</funcsElem>
      <funcsElem>69</funcsElem>
      <funcsElem>70</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>321</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>89</funcsElem>
      <funcsElem>91</funcsElem>
      <funcsElem>92</funcsElem>
      <funcsElem>93</funcsElem>
      <funcsElem>94</funcsElem>
      <funcsElem>95</funcsElem>
      <funcsElem>96</funcsElem>
      <funcsElem>97</funcsElem>
      <funcsElem>98</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>347</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>305</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>315</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>343</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>229</funcsElem>
      <funcsElem>231</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>391</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>309</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>401</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>389</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>427</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>371</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>349</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>323</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>224</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>269</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>265</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>327</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>291</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>46</funcsElem>
      <funcsElem>48</funcsElem>
      <funcsElem>49</funcsElem>
      <funcsElem>50</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>271</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>293</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>126</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>337</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>33</funcsElem>
      <funcsElem>35</funcsElem>
      <funcsElem>36</funcsElem>
      <funcsElem>37</funcsElem>
      <funcsElem>38</funcsElem>
      <funcsElem>39</funcsElem>
      <funcsElem>40</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>215</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>369</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>429</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>367</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>238</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>247</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>405</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>319</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>273</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>303</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>421</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>71</funcsElem>
      <funcsElem>73</funcsElem>
      <funcsElem>74</funcsElem>
      <funcsElem>75</funcsElem>
      <funcsElem>76</funcsElem>
      <funcsElem>77</funcsElem>
      <funcsElem>78</funcsElem>
      <funcsElem>79</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>119</funcsElem>
      <funcsElem>121</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>267</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>275</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>357</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>295</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>80</funcsElem>
      <funcsElem>82</funcsElem>
      <funcsElem>83</funcsElem>
      <funcsElem>84</funcsElem>
      <funcsElem>85</funcsElem>
      <funcsElem>86</funcsElem>
      <funcsElem>87</funcsElem>
      <funcsElem>88</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>277</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>359</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>226</funcsElem>
      <funcsElem>228</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>373</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>361</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>240</funcsElem>
      <funcsElem>242</funcsElem>
      <funcsElem>243</funcsElem>
      <funcsElem>244</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>325</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>317</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>387</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </SimpleFunctionSet>
   </SimpleFunctions>
   <AggrFunctions >
    <AggFunction Key="trimmedMean(double,int,int)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPTrimmedMean</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  trimmedMean(c1 double, c2 int, c3 int) return double  aggregate using "oracle.cep.colt.aggr.CEPTrimmedMean" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="SUM(float)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function sum(c1 float) return float aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="autoCorrelation(double,int)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPAutoCorrelation</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  autoCorrelation(c1 double, c2 int) return double  aggregate using "oracle.cep.colt.aggr.CEPAutoCorrelation" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="COUNT(byte)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function count(c1 byte) return int aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="AVG(bigint)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function avg(c1 bigint) return float aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="MAX(char)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function max(c1 char) return char aggregate using"$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="MAX(bigint)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function max(c1 bigint) return bigint aggregate using "$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="COUNT(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function count(c1 double) return int aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="tklog_secondMax(timestamp)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>oracle.cep.test.userfunctions.TkUsrSecondMax</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt> create function tklog_secondMax(c1 timestamp) return timestamp aggregate using "oracle.cep.test.userfunctions.TkUsrSecondMax" </creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="MIN(char)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function min(c1 char) return char aggregate using"$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="sumOfSquares(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSumOfSquares</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sumOfSquares(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSumOfSquares" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="sampleStandardDeviation(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSampleStandardDeviation</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sampleStandardDeviation(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSampleStandardDeviation" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="MIN(timestamp)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function min(c1 timestamp) return timestamp aggregate using"$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="sumOfInversions(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSumOfInversions</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sumOfInversions(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSumOfInversions" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="MAX(float)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function max(c1 float) return float aggregate using "$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="sumOfSquaredDeviations(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSumOfSquaredDeviations</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sumOfSquaredDeviations(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSumOfSquaredDeviations" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="MIN(interval)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function min(c1 interval) return interval aggregate using"$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="sumOfPowerDeviations(double,int,double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSumOfPowerDeviations</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sumOfPowerDeviations(c1 double, c2 int, c3 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSumOfPowerDeviations" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="COUNT(char)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function count(c1 char) return int aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="kurtosis(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPKurtosis</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  kurtosis(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPKurtosis" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="sumOfPowers(double,int)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSumOfPowers</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sumOfPowers(c1 double, c2 int) return double  aggregate using "oracle.cep.colt.aggr.CEPSumOfPowers" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="LAST(byte,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Last</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function last(c1 byte, n int) return byte aggregate using "oracle.cep.extensibility.functions.builtin.Last"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="tklog_secondMax(interval)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>oracle.cep.test.userfunctions.TkUsrSecondMax</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt> create function tklog_secondMax(c1 interval) return interval aggregate using "oracle.cep.test.userfunctions.TkUsrSecondMax" </creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="LAST(int,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Last</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function last(c1 int, n int) return int aggregate using "oracle.cep.extensibility.functions.builtin.Last"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="moment(double,int,double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPMoment</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  moment(c1 double, c2 int, c3 double) return double  aggregate using "oracle.cep.colt.aggr.CEPMoment" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="MAX(int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function max(c1 int) return int aggregate using "$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="tklog_secondMax(float)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>oracle.cep.test.userfunctions.TkUsrSecondMax</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
      <destQueriesElem>494</destQueriesElem>
     </destQueries>
     <creationTxt> create function tklog_secondMax(c1 float) return float aggregate using "oracle.cep.test.userfunctions.TkUsrSecondMax" </creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="COUNT(float)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function count(c1 float) return int aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="variance(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPVariance</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  variance(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPVariance" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="lag1(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPLag1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  lag1(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPLag1" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="median(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPMedian</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  median(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPMedian" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="FIRST(char,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.First</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function first(c1 char, n int) return char aggregate using "oracle.cep.extensibility.functions.builtin.First"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="SUM(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function sum(c1 double) return double aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="MAX(interval)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function max(c1 interval) return interval aggregate using"$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="meanDeviation(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPMeanDeviation</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  meanDeviation(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPMeanDeviation" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="MIN(bigint)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function min(c1 bigint) return bigint aggregate using "$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="LAST(interval,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Last</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function last(c1 interval, n int) return interval aggregate using "oracle.cep.extensibility.functions.builtin.Last"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="correlation(double,double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPCorrelation</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  correlation(c1 double, c2 double) return double  aggregate using "oracle.cep.colt.aggr.CEPCorrelation" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="AVG(float)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function avg(c1 float) return float aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="sampleKurtosisStandardError(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSampleKurtosisStandardError</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sampleKurtosisStandardError(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSampleKurtosisStandardError" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="sampleSkew(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSampleSkew</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sampleSkew(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSampleSkew" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="sampleSkewStandardError(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSampleSkewStandardError</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sampleSkewStandardError(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSampleSkewStandardError" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="FIRST(bigint,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.First</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function first(c1 bigint, n int) return bigint aggregate using "oracle.cep.extensibility.functions.builtin.First"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="FIRST(float,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.First</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function first(c1 float, n int) return float aggregate using "oracle.cep.extensibility.functions.builtin.First"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="weightedMean(double,double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPWeightedMean</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  weightedMean(c1 double, c2 double) return double  aggregate using "oracle.cep.colt.aggr.CEPWeightedMean" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="COUNT(bigint)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function count(c1 bigint) return int aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="rms(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPRms</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  rms(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPRms" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="FIRST(int,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.First</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function first(c1 int, n int) return int aggregate using "oracle.cep.extensibility.functions.builtin.First"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="MIN(float)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function min(c1 float) return float aggregate using "$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="pooledMean(double,double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPPooledMean</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  pooledMean(c1 double, c2 double) return double  aggregate using "oracle.cep.colt.aggr.CEPPooledMean" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="standardError(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPStandardError</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  standardError(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPStandardError" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="winsorizedMean(double,int,int)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPWinsorizedMean</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  winsorizedMean(c1 double, c2 int, c3 int) return double  aggregate using "oracle.cep.colt.aggr.CEPWinsorizedMean" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="MAX(timestamp)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function max(c1 timestamp) return timestamp aggregate using"$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="MIN(int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function min(c1 int) return int aggregate using "$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="FIRST(double,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.First</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function first(c1 double, n int) return double aggregate using "oracle.cep.extensibility.functions.builtin.First"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="geometricMean(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPGeometricMean</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  geometricMean(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPGeometricMean" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="FIRST(timestamp,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.First</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function first(c1 timestamp, n int) return timestamp aggregate using "oracle.cep.extensibility.functions.builtin.First"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="LAST(float,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Last</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function last(c1 float, n int) return float aggregate using "oracle.cep.extensibility.functions.builtin.Last"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="SUM(int)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function sum(c1 int) return int aggregate using "$dummy" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="product(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPProduct</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  product(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPProduct" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="COUNT(int)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function count(c1 int) return int aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="rankInterpolated(double,double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPRankInterpolated</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  rankInterpolated(c1 double, c2 double) return double  aggregate using "oracle.cep.colt.aggr.CEPRankInterpolated" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="skew(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSkew</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  skew(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSkew" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="AVG(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function avg(c1 double) return double aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="pooledVariance(double,double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPPooledVariance</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  pooledVariance(c1 double, c2 double) return double  aggregate using "oracle.cep.colt.aggr.CEPPooledVariance" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="MAX(double)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function max(c1 double) return double aggregate using "$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="geometricMean1(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPGeometricMean1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  geometricMean1(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPGeometricMean1" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="durbinWatson(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPDurbinWatson</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  durbinWatson(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPDurbinWatson" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="tklog_secondMax(byte)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>oracle.cep.test.userfunctions.TkUsrSecondMax</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt> create function tklog_secondMax(c1 byte) return byte aggregate using "oracle.cep.test.userfunctions.TkUsrSecondMax" </creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="COUNT(timestamp)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function count(c1 timestamp) return int aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="MIN(byte)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function min(c1 byte) return byte aggregate using"$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="SUM(bigint)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function sum(c1 bigint) return bigint aggregate using "$dummy" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="standardDeviation(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPStandardDeviation</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  standardDeviation(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPStandardDeviation" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="LAST(char,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Last</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function last(c1 char, n int) return char aggregate using "oracle.cep.extensibility.functions.builtin.Last"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="FIRST(byte,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.First</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function first(c1 byte, n int) return byte aggregate using "oracle.cep.extensibility.functions.builtin.First"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="AVG(int)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function avg(c1 int) return float aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="MAX(byte)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function max(c1 byte) return byte aggregate using"$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="COUNT(interval)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function count(c1 interval) return int aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="sampleKurtosis(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSampleKurtosis</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sampleKurtosis(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSampleKurtosis" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="LAST(bigint,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Last</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function last(c1 bigint, n int) return bigint aggregate using "oracle.cep.extensibility.functions.builtin.Last"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="quantile(double,double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPQuantile</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  quantile(c1 double, c2 double) return double  aggregate using "oracle.cep.colt.aggr.CEPQuantile" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="LAST(timestamp,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Last</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function last(c1 timestamp, n int) return timestamp aggregate using "oracle.cep.extensibility.functions.builtin.Last"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="sumOfLogarithms(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSumOfLogarithms</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sumOfLogarithms(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSumOfLogarithms" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="tklog_secondMax(char)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>oracle.cep.test.userfunctions.TkUsrSecondMax</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt> create function tklog_secondMax(c1 char) return char aggregate using "oracle.cep.test.userfunctions.TkUsrSecondMax" </creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="covariance(double,double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPCovariance</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  covariance(c1 double, c2 double) return double  aggregate using "oracle.cep.colt.aggr.CEPCovariance" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="mean(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPMean</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  mean(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPMean" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="harmonicMean(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPHarmonicMean</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  harmonicMean(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPHarmonicMean" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="quantileInverse(double,double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPQuantileInverse</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  quantileInverse(c1 double, c2 double) return double  aggregate using "oracle.cep.colt.aggr.CEPQuantileInverse" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="sampleVariance(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSampleVariance</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sampleVariance(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSampleVariance" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="MIN(double)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function min(c1 double) return double aggregate using "$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="LAST(double,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Last</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function last(c1 double, n int) return double aggregate using "oracle.cep.extensibility.functions.builtin.Last"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
    <AggFunction Key="FIRST(interval,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.First</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function first(c1 interval, n int) return interval aggregate using "oracle.cep.extensibility.functions.builtin.First"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </AggFunction>
   </AggrFunctions>
  </Level>
  <Level Name="MUSERFUNC_LOCKINFO" Value="3">
   <SingleFunctions >
    <SimpleFunction Key="ltet(interval,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ltet(c1 interval, c2 interval) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="plus(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function plus(c1 double, c2 double) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="ltrim(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ltrim(c1 char, c2 char) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="gt(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gt(c1 bigint, c2 bigint) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="incompleteBeta(double,double,double)">
     <implClass>oracle.cep.colt.functions.CEPIncompleteBeta</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPIncompleteBeta</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function incompleteBeta(c1 double, c2 double, c3 double) return double as language java name "oracle.cep.colt.functions.CEPIncompleteBeta"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="poissonComplemented(int,double)">
     <implClass>oracle.cep.colt.functions.CEPPoissonComplemented</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPPoissonComplemented</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function poissonComplemented(c1 integer, c2 double) return double as language java name "oracle.cep.colt.functions.CEPPoissonComplemented"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="nvl(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function nvl(c1 int, c2 int) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="normal1(double,double,double)">
     <implClass>oracle.cep.colt.functions.CEPNormal1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPNormal1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function normal1(c1 double, c2 double, c3 double) return double as language java name "oracle.cep.colt.functions.CEPNormal1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="abs2(float)">
     <implClass>oracle.cep.colt.functions.CEPAbs2</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>oracle.cep.colt.functions.CEPAbs2</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function abs2(c1 float) return float as language java name "oracle.cep.colt.functions.CEPAbs2"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="negativeBinomial(int,int,double)">
     <implClass>oracle.cep.colt.functions.CEPNegativeBinomial</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPNegativeBinomial</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function negativeBinomial(c1 integer, c2 integer, c3 double) return double as language java name "oracle.cep.colt.functions.CEPNegativeBinomial"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="initcap(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function initcap(c1 char) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="toRadians(double)">
     <implClass>oracle.cep.colt.functions.CEPToRadians</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPToRadians</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function toRadians(c1 double) return double as language java name "oracle.cep.colt.functions.CEPToRadians"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="lt(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lt(c1 bigint, c2 bigint) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="gtet(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gtet(c1 int, c2 int) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="hypot(double,double)">
     <implClass>oracle.cep.colt.functions.CEPHypot</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPHypot</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function hypot(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPHypot"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="divide(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function divide(c1 bigint, c2 bigint) return bigint as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="net(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function net(c1 float, c2 float) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="nvl(timestamp,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function nvl(c1 timestamp, c2 timestamp) return timestamp as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="k1e(double)">
     <implClass>oracle.cep.colt.functions.CEPK1e</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPK1e</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function k1e(c1 double) return double as language java name "oracle.cep.colt.functions.CEPK1e"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="to_double(float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function to_double(c1 float) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="cosh(double)">
     <implClass>oracle.cep.colt.functions.CEPCosh</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPCosh</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function cosh(c1 double) return double as language java name "oracle.cep.colt.functions.CEPCosh"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="multiply(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function multiply(c1 float, c2 float) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="signum1(float)">
     <implClass>oracle.cep.colt.functions.CEPSignum1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>oracle.cep.colt.functions.CEPSignum1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function signum1(c1 float) return float as language java name "oracle.cep.colt.functions.CEPSignum1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="rpad(char,int,char)">
     <implClass>oracle.cep.extensibility.functions.builtin.Rpad</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Rpad</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function rpad(c1 char, c2 int, c3 char) return char as language java name "oracle.cep.extensibility.functions.builtin.Rpad"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="multiply(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function multiply(c1 double, c2 double) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="is_null(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function is_null(c1 char) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="expm1(double)">
     <implClass>oracle.cep.colt.functions.CEPExpm1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPExpm1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function expm1(c1 double) return double as language java name "oracle.cep.colt.functions.CEPExpm1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="to_double(bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function to_double(c1 bigint) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="et(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function et(c1 int, c2 int) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="to_timestamp(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function to_timestamp(c1 char) return timestamp as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="et(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function et(c1 bigint, c2 bigint) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="k0(double)">
     <implClass>oracle.cep.colt.functions.CEPK0</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPK0</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function k0(c1 double) return double as language java name "oracle.cep.colt.functions.CEPK0"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="nvl(interval,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function nvl(c1 interval, c2 interval) return interval as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="lt(timestamp,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lt(c1 timestamp, c2 timestamp) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="hash2(int)">
     <implClass>oracle.cep.colt.functions.CEPHash2</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.colt.functions.CEPHash2</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function hash2(c1 integer) return integer as language java name "oracle.cep.colt.functions.CEPHash2"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="tan(double)">
     <implClass>oracle.cep.colt.functions.CEPTan</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPTan</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function tan(c1 double) return double as language java name "oracle.cep.colt.functions.CEPTan"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="lt(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lt(c1 char, c2 char) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="ltet(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ltet(c1 double, c2 double) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="translate(char,char,char)">
     <implClass>oracle.cep.extensibility.functions.builtin.Translate</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Translate</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function translate(c1 char, c2 char, c3 char) return char as language java name "oracle.cep.extensibility.functions.builtin.Translate"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(float,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 float, n int) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="beta(double,double)">
     <implClass>oracle.cep.colt.functions.CEPBeta</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPBeta</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function beta(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPBeta"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="systimestamp()">
     <implClass>null</implClass>
     <paramList >
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function systimestamp return timestamp as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(byte,int,int,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>3</position>
       <name>c4</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 byte, n int, c3 int, c4 timestamp) return byte as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="logGamma(double)">
     <implClass>oracle.cep.colt.functions.CEPLogGamma</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPLogGamma</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function logGamma(c1 double) return double as language java name "oracle.cep.colt.functions.CEPLogGamma"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="ulp(double)">
     <implClass>oracle.cep.colt.functions.CEPUlp</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPUlp</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ulp(c1 double) return double as language java name "oracle.cep.colt.functions.CEPUlp"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="sin(double)">
     <implClass>oracle.cep.colt.functions.CEPSin</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPSin</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function sin(c1 double) return double as language java name "oracle.cep.colt.functions.CEPSin"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="plus(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function plus(c1 bigint, c2 bigint) return bigint as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="toDegrees(double)">
     <implClass>oracle.cep.colt.functions.CEPToDegrees</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPToDegrees</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function toDegrees(c1 double) return double as language java name "oracle.cep.colt.functions.CEPToDegrees"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="ltrim(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ltrim(c1 char) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="lower(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lower(c1 char) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="leastSignificantBit(int)">
     <implClass>oracle.cep.colt.functions.CEPLeastSignificantBit</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.colt.functions.CEPLeastSignificantBit</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function leastSignificantBit(c1 integer) return integer as language java name "oracle.cep.colt.functions.CEPLeastSignificantBit"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="gtet(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gtet(c1 char, c2 char) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="cos(double)">
     <implClass>oracle.cep.colt.functions.CEPCos</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPCos</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function cos(c1 double) return double as language java name "oracle.cep.colt.functions.CEPCos"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="length(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function length(c char) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="k0e(double)">
     <implClass>oracle.cep.colt.functions.CEPK0e</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPK0e</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function k0e(c1 double) return double as language java name "oracle.cep.colt.functions.CEPK0e"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="to_float(bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function to_float(c1 bigint) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="multiply(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function multiply(c1 bigint, c2 bigint) return bigint as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="net(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function net(c1 double, c2 double) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="gt(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gt(c1 int, c2 int) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="mostSignificantBit(int)">
     <implClass>oracle.cep.colt.functions.CEPMostSignificantBit</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.colt.functions.CEPMostSignificantBit</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function mostSignificantBit(c1 integer) return integer as language java name "oracle.cep.colt.functions.CEPMostSignificantBit"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="nvl(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function nvl(c1 double, c2 double) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="et(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function et(c1 char, c2 char) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="lt(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lt(c1 int, c2 int) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="gtet(timestamp,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gtet(c1 timestamp, c2 timestamp) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="signum(double)">
     <implClass>oracle.cep.colt.functions.CEPSignum</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPSignum</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function signum(c1 double) return double as language java name "oracle.cep.colt.functions.CEPSignum"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 bigint) return bigint as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="j0(double)">
     <implClass>oracle.cep.colt.functions.CEPJ0</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPJ0</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function j0(c1 double) return double as language java name "oracle.cep.colt.functions.CEPJ0"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="ceil1(double)">
     <implClass>oracle.cep.colt.functions.CEPCeil1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPCeil1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ceil1(c1 double) return double as language java name "oracle.cep.colt.functions.CEPCeil1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="abs(int)">
     <implClass>oracle.cep.colt.functions.CEPAbs</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.colt.functions.CEPAbs</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function abs(c1 integer) return integer as language java name "oracle.cep.colt.functions.CEPAbs"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="ceil(double)">
     <implClass>oracle.cep.colt.functions.CEPCeil</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>oracle.cep.colt.functions.CEPCeil</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ceil(c1 double) return bigint as language java name "oracle.cep.colt.functions.CEPCeil"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="gt(interval,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gt(c1 interval, c2 interval) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="subtract(timestamp,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function subtract(c1 timestamp, c2 timestamp) return interval as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="ltet(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ltet(c1 bigint, c2 bigint) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(float,int,int,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>3</position>
       <name>c4</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 float, n int, c3 int, c4 timestamp) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="betaComplemented(double,double,double)">
     <implClass>oracle.cep.colt.functions.CEPBetaComplemented</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPBetaComplemented</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function betaComplemented(c1 double, c2 double, c3 double) return double as language java name "oracle.cep.colt.functions.CEPBetaComplemented"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="floor1(double)">
     <implClass>oracle.cep.colt.functions.CEPFloor1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPFloor1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function floor1(c1 double) return double as language java name "oracle.cep.colt.functions.CEPFloor1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="plus(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function plus(c1 int, c2 int) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="concat(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function concat(c1 char, c2 char) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="gtet(interval,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gtet(c1 interval, c2 interval) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(int,int,int,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>3</position>
       <name>c4</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 int, n int, c3 int, c4 timestamp) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="plus(timestamp,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function plus(c1 timestamp, c2 interval) return timestamp as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="k1(double)">
     <implClass>oracle.cep.colt.functions.CEPK1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPK1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function k1(c1 double) return double as language java name "oracle.cep.colt.functions.CEPK1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="chiSquareComplemented(double,double)">
     <implClass>oracle.cep.colt.functions.CEPChiSquareComplemented</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPChiSquareComplemented</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function chiSquareComplemented(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPChiSquareComplemented"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="kn(int,double)">
     <implClass>oracle.cep.colt.functions.CEPKn</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPKn</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function kn(c1 integer, c2 double) return double as language java name "oracle.cep.colt.functions.CEPKn"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="hextoraw(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function hextoraw(c char) return byte as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="mod(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function mod(c1 double, c2 double) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="et(byte,byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function et(c1 byte, c2 byte) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="hash1(float)">
     <implClass>oracle.cep.colt.functions.CEPHash1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.colt.functions.CEPHash1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function hash1(c1 float) return integer as language java name "oracle.cep.colt.functions.CEPHash1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="factorial(int)">
     <implClass>oracle.cep.colt.functions.CEPFactorial</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPFactorial</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function factorial(c1 integer) return double as language java name "oracle.cep.colt.functions.CEPFactorial"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="lt(byte,byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lt(c1 byte, c2 byte) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="to_float(int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function to_float(c1 int) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="j1(double)">
     <implClass>oracle.cep.colt.functions.CEPJ1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPJ1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function j1(c1 double) return double as language java name "oracle.cep.colt.functions.CEPJ1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="poisson(int,double)">
     <implClass>oracle.cep.colt.functions.CEPPoisson</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPPoisson</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function poisson(c1 integer, c2 double) return double as language java name "oracle.cep.colt.functions.CEPPoisson"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="mod(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function mod(c1 bigint, c2 bigint) return bigint as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="multiply(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function multiply(c1 int, c2 int) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="longFactorial(int)">
     <implClass>oracle.cep.colt.functions.CEPLongFactorial</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>oracle.cep.colt.functions.CEPLongFactorial</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function longFactorial(c1 integer) return bigint as language java name "oracle.cep.colt.functions.CEPLongFactorial"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="subtract(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function subtract(c1 double, c2 double) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 byte) return byte as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="exp(double)">
     <implClass>oracle.cep.colt.functions.CEPExp</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPExp</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function exp(c1 double) return double as language java name "oracle.cep.colt.functions.CEPExp"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="XMLQUERY(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>xmltype</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function XMLQUERY(c1 char) return xmltype as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="ltet(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ltet(c1 char, c2 char) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="net(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function net(c1 bigint, c2 bigint) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="binomial(double,bigint)">
     <implClass>oracle.cep.colt.functions.CEPBinomial</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPBinomial</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function binomial(c1 double, c2 bigint) return double as language java name "oracle.cep.colt.functions.CEPBinomial"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="net(timestamp,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function net(c1 timestamp, c2 timestamp) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="gtet(byte,byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gtet(c1 byte, c2 byte) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="nvl(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function nvl(c1 bigint, c2 bigint) return bigint as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 int) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="log10(double)">
     <implClass>oracle.cep.colt.functions.CEPLog10</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPLog10</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function log10(c1 double) return double as language java name "oracle.cep.colt.functions.CEPLog10"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="log1p(double)">
     <implClass>oracle.cep.colt.functions.CEPLog1p</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPLog1p</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function log1p(c1 double) return double as language java name "oracle.cep.colt.functions.CEPLog1p"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="errorFunctionComplemented(double)">
     <implClass>oracle.cep.colt.functions.CEPErrorFunctionComplemented</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPErrorFunctionComplemented</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function errorFunctionComplemented(c1 double) return double as language java name "oracle.cep.colt.functions.CEPErrorFunctionComplemented"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="sqrt(double)">
     <implClass>oracle.cep.colt.functions.CEPSqrt</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPSqrt</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function sqrt(c1 double) return double as language java name "oracle.cep.colt.functions.CEPSqrt"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="is_null(timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function is_null(c1 timestamp) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="i0(double)">
     <implClass>oracle.cep.colt.functions.CEPI0</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPI0</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function i0(c1 double) return double as language java name "oracle.cep.colt.functions.CEPI0"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="divide(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function divide(c1 int, c2 int) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="abs3(double)">
     <implClass>oracle.cep.colt.functions.CEPAbs3</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPAbs3</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function abs3(c1 double) return double as language java name "oracle.cep.colt.functions.CEPAbs3"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="beta1(double,double,double)">
     <implClass>oracle.cep.colt.functions.CEPBeta1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPBeta1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function beta1(c1 double, c2 double, c3 double) return double as language java name "oracle.cep.colt.functions.CEPBeta1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="gt(timestamp,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gt(c1 timestamp, c2 timestamp) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="substr(char,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function substr(c1 char, c2 int) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="subtract(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function subtract(c1 float, c2 float) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="log_xor(boolean,boolean)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>boolean</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>boolean</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function log_xor(c1 boolean, c2 boolean) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="net(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function net(c1 int, c2 int) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="pow(double,double)">
     <implClass>oracle.cep.colt.functions.CEPPow</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPPow</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function pow(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPPow"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="rawtohex(byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>b</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function rawtohex(b byte) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(char,int,int,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>3</position>
       <name>c4</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 char, n int, c3 int, c4 timestamp) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="ltet(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ltet(c1 int, c2 int) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="gtet(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gtet(c1 float, c2 float) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="ltet(byte,byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ltet(c1 byte, c2 byte) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="plus(interval,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function plus(c1 interval, c2 timestamp) return timestamp as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="is_null(interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function is_null(c1 interval) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="binomial1(bigint,bigint)">
     <implClass>oracle.cep.colt.functions.CEPBinomial1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPBinomial1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function binomial1(c1 bigint, c2 bigint) return double as language java name "oracle.cep.colt.functions.CEPBinomial1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="normal(double)">
     <implClass>oracle.cep.colt.functions.CEPNormal</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPNormal</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function normal(c1 double) return double as language java name "oracle.cep.colt.functions.CEPNormal"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="yn(int,double)">
     <implClass>oracle.cep.colt.functions.CEPYn</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPYn</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function yn(c1 integer, c2 double) return double as language java name "oracle.cep.colt.functions.CEPYn"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(byte,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 byte, n int) return byte as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="plus(interval,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function plus(c1 interval, c2 interval) return interval as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="floor(double)">
     <implClass>oracle.cep.colt.functions.CEPFloor</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>oracle.cep.colt.functions.CEPFloor</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function floor(c1 double) return bigint as language java name "oracle.cep.colt.functions.CEPFloor"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="stirlingCorrection(int)">
     <implClass>oracle.cep.colt.functions.CEPStirlingCorrection</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPStirlingCorrection</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function stirlingCorrection(c1 integer) return double as language java name "oracle.cep.colt.functions.CEPStirlingCorrection"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="mod(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function mod(c1 float, c2 float) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="ltet(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ltet(c1 float, c2 float) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="i1(double)">
     <implClass>oracle.cep.colt.functions.CEPI1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPI1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function i1(c1 double) return double as language java name "oracle.cep.colt.functions.CEPI1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="hash(double)">
     <implClass>oracle.cep.colt.functions.CEPHash</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.colt.functions.CEPHash</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function hash(c1 double) return integer as language java name "oracle.cep.colt.functions.CEPHash"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 float) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="concat(byte,byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>b1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>b2</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function concat(b1 byte, b2 byte) return byte as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 timestamp) return timestamp as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="plus(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function plus(c1 float, c2 float) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="subtract(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function subtract(c1 bigint, c2 bigint) return bigint as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="subtract(interval,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function subtract(c1 interval, c2 interval) return interval as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 char) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="upper(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function upper(c1 char) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="errorFunction(double)">
     <implClass>oracle.cep.colt.functions.CEPErrorFunction</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPErrorFunction</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function errorFunction(c1 double) return double as language java name "oracle.cep.colt.functions.CEPErrorFunction"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="incompleteGammaComplement(double,double)">
     <implClass>oracle.cep.colt.functions.CEPIncompleteGammaComplement</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPIncompleteGammaComplement</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function incompleteGammaComplement(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPIncompleteGammaComplement"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(interval,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 interval, n int) return interval as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="is_null(double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function is_null(c1 double) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="to_timestamp(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function to_timestamp(c1 char, c2 char) return timestamp as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="atan(double)">
     <implClass>oracle.cep.colt.functions.CEPAtan</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPAtan</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function atan(c1 double) return double as language java name "oracle.cep.colt.functions.CEPAtan"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="et(boolean,boolean)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>boolean</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>boolean</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function et(c1 boolean, c2 boolean) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="net(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function net(c1 char, c2 char) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="abs1(bigint)">
     <implClass>oracle.cep.colt.functions.CEPAbs1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>oracle.cep.colt.functions.CEPAbs1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function abs1(c1 bigint) return bigint as language java name "oracle.cep.colt.functions.CEPAbs1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="lk(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lk(c1 char, c2 char) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="gt(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gt(c1 char, c2 char) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(bigint,int,int,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>3</position>
       <name>c4</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 bigint, n int, c3 int, c4 timestamp) return bigint as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="net(interval,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function net(c1 interval, c2 interval) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="asin(double)">
     <implClass>oracle.cep.colt.functions.CEPAsin</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPAsin</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function asin(c1 double) return double as language java name "oracle.cep.colt.functions.CEPAsin"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="mod(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function mod(c1 int, c2 int) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 interval) return interval as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="bitMaskWithBitsSetFromTo(int,int)">
     <implClass>oracle.cep.colt.functions.CEPBitMaskWithBitsSetFromTo</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>oracle.cep.colt.functions.CEPBitMaskWithBitsSetFromTo</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function bitMaskWithBitsSetFromTo(c1 integer, c2 integer) return bigint as language java name "oracle.cep.colt.functions.CEPBitMaskWithBitsSetFromTo"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="log1(double)">
     <implClass>oracle.cep.colt.functions.CEPLog1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPLog1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function log1(c1 double) return double as language java name "oracle.cep.colt.functions.CEPLog1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="log_or(boolean,boolean)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>boolean</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>boolean</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function log_or(c1 boolean, c2 boolean) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="hash3(bigint)">
     <implClass>oracle.cep.colt.functions.CEPHash3</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.colt.functions.CEPHash3</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function hash3(c1 bigint) return integer as language java name "oracle.cep.colt.functions.CEPHash3"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="rpad(char,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function rpad(c1 char, c2 int) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="y0(double)">
     <implClass>oracle.cep.colt.functions.CEPY0</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPY0</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function y0(c1 double) return double as language java name "oracle.cep.colt.functions.CEPY0"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="XMLEXISTS(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function XMLEXISTS(c1 char) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="jn(int,double)">
     <implClass>oracle.cep.colt.functions.CEPJn</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPJn</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function jn(c1 integer, c2 double) return double as language java name "oracle.cep.colt.functions.CEPJn"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="acos(double)">
     <implClass>oracle.cep.colt.functions.CEPAcos</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPAcos</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function acos(c1 double) return double as language java name "oracle.cep.colt.functions.CEPAcos"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 int, n int) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="binomialComplemented(int,int,double)">
     <implClass>oracle.cep.colt.functions.CEPBinomialComplemented</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPBinomialComplemented</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function binomialComplemented(c1 integer, c2 integer, c3 double) return double as language java name "oracle.cep.colt.functions.CEPBinomialComplemented"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="incompleteGamma(double,double)">
     <implClass>oracle.cep.colt.functions.CEPIncompleteGamma</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPIncompleteGamma</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function incompleteGamma(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPIncompleteGamma"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="rtrim(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function rtrim(c1 char, c2 char) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="lt(interval,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lt(c1 interval, c2 interval) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="is_null(int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function is_null(c1 int) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="gt(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gt(c1 float, c2 float) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="log(double,double)">
     <implClass>oracle.cep.colt.functions.CEPLog</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPLog</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function log(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPLog"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="nvl(char,char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function nvl(c1 char, c2 char) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="is_null(byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function is_null(c1 byte) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="chiSquare(double,double)">
     <implClass>oracle.cep.colt.functions.CEPChiSquare</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPChiSquare</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function chiSquare(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPChiSquare"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="gamma1(double,double,double)">
     <implClass>oracle.cep.colt.functions.CEPGamma1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPGamma1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gamma1(c1 double, c2 double, c3 double) return double as language java name "oracle.cep.colt.functions.CEPGamma1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="gt(byte,byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gt(c1 byte, c2 byte) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="log_not(boolean)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>boolean</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function log_not(c1 boolean) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="lpad(char,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lpad(c1 char, c2 int) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="gamma(double)">
     <implClass>oracle.cep.colt.functions.CEPGamma</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPGamma</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gamma(c1 double) return double as language java name "oracle.cep.colt.functions.CEPGamma"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="tanh(double)">
     <implClass>oracle.cep.colt.functions.CEPTanh</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPTanh</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function tanh(c1 double) return double as language java name "oracle.cep.colt.functions.CEPTanh"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="normalInverse(double)">
     <implClass>oracle.cep.colt.functions.CEPNormalInverse</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPNormalInverse</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function normalInverse(c1 double) return double as language java name "oracle.cep.colt.functions.CEPNormalInverse"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="getSeedAtRowColumn(int,int)">
     <implClass>oracle.cep.colt.functions.CEPGetSeedAtRowColumn</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.colt.functions.CEPGetSeedAtRowColumn</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function getSeedAtRowColumn(c1 integer, c2 integer) return integer as language java name "oracle.cep.colt.functions.CEPGetSeedAtRowColumn"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="round(float)">
     <implClass>oracle.cep.colt.functions.CEPRound</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.colt.functions.CEPRound</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function round(c1 float) return integer as language java name "oracle.cep.colt.functions.CEPRound"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="gtet(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gtet(c1 double, c2 double) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="negativeBinomialComplemented(int,int,double)">
     <implClass>oracle.cep.colt.functions.CEPNegativeBinomialComplemented</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPNegativeBinomialComplemented</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function negativeBinomialComplemented(c1 integer, c2 integer, c3 double) return double as language java name "oracle.cep.colt.functions.CEPNegativeBinomialComplemented"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="log2(double)">
     <implClass>oracle.cep.colt.functions.CEPLog2</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPLog2</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function log2(c1 double) return double as language java name "oracle.cep.colt.functions.CEPLog2"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="lt(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lt(c1 float, c2 float) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="y1(double)">
     <implClass>oracle.cep.colt.functions.CEPY1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPY1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function y1(c1 double) return double as language java name "oracle.cep.colt.functions.CEPY1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="round1(double)">
     <implClass>oracle.cep.colt.functions.CEPRound1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>oracle.cep.colt.functions.CEPRound1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function round1(c1 double) return bigint as language java name "oracle.cep.colt.functions.CEPRound1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="log101(double)">
     <implClass>oracle.cep.colt.functions.CEPLog101</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPLog101</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function log101(c1 double) return double as language java name "oracle.cep.colt.functions.CEPLog101"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="studentT(double,double)">
     <implClass>oracle.cep.colt.functions.CEPStudentT</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPStudentT</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function studentT(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPStudentT"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="cbrt(double)">
     <implClass>oracle.cep.colt.functions.CEPCbrt</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPCbrt</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function cbrt(c1 double) return double as language java name "oracle.cep.colt.functions.CEPCbrt"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="is_null(float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function is_null(c1 float) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="binomial2(int,int,double)">
     <implClass>oracle.cep.colt.functions.CEPBinomial2</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPBinomial2</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function binomial2(c1 integer, c2 integer, c3 double) return double as language java name "oracle.cep.colt.functions.CEPBinomial2"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="IEEEremainder(double,double)">
     <implClass>oracle.cep.colt.functions.CEPIEEEremainder</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPIEEEremainder</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function IEEEremainder(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPIEEEremainder"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="to_bigint(int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function to_bigint(c1 int) return bigint as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(bigint,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 bigint, n int) return bigint as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="studentTInverse(double,int)">
     <implClass>oracle.cep.colt.functions.CEPStudentTInverse</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPStudentTInverse</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function studentTInverse(c1 double, c2 integer) return double as language java name "oracle.cep.colt.functions.CEPStudentTInverse"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="ltet(timestamp,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ltet(c1 timestamp, c2 timestamp) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="rtrim(char)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function rtrim(c1 char) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="gammaComplemented(double,double,double)">
     <implClass>oracle.cep.colt.functions.CEPGammaComplemented</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPGammaComplemented</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gammaComplemented(c1 double, c2 double, c3 double) return double as language java name "oracle.cep.colt.functions.CEPGammaComplemented"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="et(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function et(c1 float, c2 float) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="lt(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lt(c1 double, c2 double) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="rint(double)">
     <implClass>oracle.cep.colt.functions.CEPRint</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPRint</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function rint(c1 double) return double as language java name "oracle.cep.colt.functions.CEPRint"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="sinh(double)">
     <implClass>oracle.cep.colt.functions.CEPSinh</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPSinh</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function sinh(c1 double) return double as language java name "oracle.cep.colt.functions.CEPSinh"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 double) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(interval,int,int,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>3</position>
       <name>c4</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 interval, n int, c3 int, c4 timestamp) return interval as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="substr(char,int,int)">
     <implClass>oracle.cep.extensibility.functions.builtin.SubStr</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.SubStr</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function substr(c1 char, c2 int, c3 int) return char as language java name "oracle.cep.extensibility.functions.builtin.SubStr"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="length(byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>b</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function length(b byte) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="divide(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function divide(c1 double, c2 double) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="i1e(double)">
     <implClass>oracle.cep.colt.functions.CEPI1e</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPI1e</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function i1e(c1 double) return double as language java name "oracle.cep.colt.functions.CEPI1e"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="is_null(bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function is_null(c1 bigint) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="subtract(timestamp,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function subtract(c1 timestamp, c2 interval) return timestamp as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="lpad(char,int,char)">
     <implClass>oracle.cep.extensibility.functions.builtin.Lpad</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Lpad</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function lpad(c1 char, c2 int, c3 char) return char as language java name "oracle.cep.extensibility.functions.builtin.Lpad"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="atan2(double,double)">
     <implClass>oracle.cep.colt.functions.CEPAtan2</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPAtan2</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function atan2(c1 double, c2 double) return double as language java name "oracle.cep.colt.functions.CEPAtan2"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="subtract(int,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function subtract(c1 int, c2 int) return int as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="net(byte,byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function net(c1 byte, c2 byte) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(double,int,int,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>3</position>
       <name>c4</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 double, n int, c3 int, c4 timestamp) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="et(timestamp,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function et(c1 timestamp, c2 timestamp) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="nvl(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function nvl(c1 float, c2 float) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(timestamp,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 timestamp, n int) return timestamp as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="i0e(double)">
     <implClass>oracle.cep.colt.functions.CEPI0e</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPI0e</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function i0e(c1 double) return double as language java name "oracle.cep.colt.functions.CEPI0e"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="et(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function et(c1 double, c2 double) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="logFactorial(int)">
     <implClass>oracle.cep.colt.functions.CEPLogFactorial</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.functions.CEPLogFactorial</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function logFactorial(c1 integer) return double as language java name "oracle.cep.colt.functions.CEPLogFactorial"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="et(interval,interval)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function et(c1 interval, c2 interval) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(char,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 char, n int) return char as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="ulp1(float)">
     <implClass>oracle.cep.colt.functions.CEPUlp1</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>oracle.cep.colt.functions.CEPUlp1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function ulp1(c1 float) return float as language java name "oracle.cep.colt.functions.CEPUlp1"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="divide(float,float)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function divide(c1 float, c2 float) return float as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="to_double(int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function to_double(c1 int) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="gtet(bigint,bigint)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gtet(c1 bigint, c2 bigint) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(double,int)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 double, n int) return double as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="gt(double,double)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function gt(c1 double, c2 double) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="log_and(boolean,boolean)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>boolean</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>boolean</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>boolean</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function log_and(c1 boolean, c2 boolean) return boolean as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="prev(timestamp,int,int,timestamp)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>3</position>
       <name>c4</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function prev(c1 timestamp, n int, c3 int, c4 timestamp) return timestamp as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
    <SimpleFunction Key="nvl(byte,byte)">
     <implClass>null</implClass>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function nvl(c1 byte, c2 byte) return byte as language java name "$dummy"</creationTxt>
     <typ>SINGLE_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunction>
   </SingleFunctions>
   <SimpleFunctions >
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>385</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>431</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>253</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>411</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>219</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>255</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>23</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>263</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>281</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>313</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>128</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>41</funcsElem>
      <funcsElem>43</funcsElem>
      <funcsElem>44</funcsElem>
      <funcsElem>45</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>351</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>403</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>285</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>423</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>5</funcsElem>
      <funcsElem>7</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>339</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>108</funcsElem>
      <funcsElem>110</funcsElem>
      <funcsElem>111</funcsElem>
      <funcsElem>112</funcsElem>
      <funcsElem>113</funcsElem>
      <funcsElem>114</funcsElem>
      <funcsElem>115</funcsElem>
      <funcsElem>116</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>345</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>299</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>10</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>283</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>399</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>249</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>130</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>409</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>217</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>259</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>251</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>261</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>279</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>257</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>363</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>311</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>25</funcsElem>
      <funcsElem>27</funcsElem>
      <funcsElem>28</funcsElem>
      <funcsElem>29</funcsElem>
      <funcsElem>30</funcsElem>
      <funcsElem>31</funcsElem>
      <funcsElem>32</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>297</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>134</funcsElem>
      <funcsElem>136</funcsElem>
      <funcsElem>137</funcsElem>
      <funcsElem>138</funcsElem>
      <funcsElem>139</funcsElem>
      <funcsElem>140</funcsElem>
      <funcsElem>141</funcsElem>
      <funcsElem>142</funcsElem>
      <funcsElem>143</funcsElem>
      <funcsElem>144</funcsElem>
      <funcsElem>145</funcsElem>
      <funcsElem>146</funcsElem>
      <funcsElem>147</funcsElem>
      <funcsElem>148</funcsElem>
      <funcsElem>149</funcsElem>
      <funcsElem>150</funcsElem>
      <funcsElem>151</funcsElem>
      <funcsElem>152</funcsElem>
      <funcsElem>153</funcsElem>
      <funcsElem>154</funcsElem>
      <funcsElem>155</funcsElem>
      <funcsElem>156</funcsElem>
      <funcsElem>157</funcsElem>
      <funcsElem>158</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>122</funcsElem>
      <funcsElem>124</funcsElem>
      <funcsElem>125</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>365</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>353</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>393</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>397</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>307</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>221</funcsElem>
      <funcsElem>223</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>287</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>232</funcsElem>
      <funcsElem>234</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>383</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>12</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>117</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>377</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>213</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>379</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>289</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>99</funcsElem>
      <funcsElem>101</funcsElem>
      <funcsElem>102</funcsElem>
      <funcsElem>103</funcsElem>
      <funcsElem>104</funcsElem>
      <funcsElem>105</funcsElem>
      <funcsElem>106</funcsElem>
      <funcsElem>107</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>381</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>331</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>335</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>329</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>245</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>413</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>341</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>395</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>407</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>51</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>3</funcsElem>
      <funcsElem>9</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>375</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>1</funcsElem>
      <funcsElem>8</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>333</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>132</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>415</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>14</funcsElem>
      <funcsElem>16</funcsElem>
      <funcsElem>17</funcsElem>
      <funcsElem>18</funcsElem>
      <funcsElem>19</funcsElem>
      <funcsElem>20</funcsElem>
      <funcsElem>21</funcsElem>
      <funcsElem>22</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>425</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>235</funcsElem>
      <funcsElem>237</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>355</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>53</funcsElem>
      <funcsElem>55</funcsElem>
      <funcsElem>56</funcsElem>
      <funcsElem>57</funcsElem>
      <funcsElem>58</funcsElem>
      <funcsElem>59</funcsElem>
      <funcsElem>60</funcsElem>
      <funcsElem>61</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>417</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>301</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>419</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>62</funcsElem>
      <funcsElem>64</funcsElem>
      <funcsElem>65</funcsElem>
      <funcsElem>66</funcsElem>
      <funcsElem>67</funcsElem>
      <funcsElem>68</funcsElem>
      <funcsElem>69</funcsElem>
      <funcsElem>70</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>321</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>89</funcsElem>
      <funcsElem>91</funcsElem>
      <funcsElem>92</funcsElem>
      <funcsElem>93</funcsElem>
      <funcsElem>94</funcsElem>
      <funcsElem>95</funcsElem>
      <funcsElem>96</funcsElem>
      <funcsElem>97</funcsElem>
      <funcsElem>98</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>347</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>305</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>315</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>343</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>229</funcsElem>
      <funcsElem>231</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>391</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>309</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>401</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>389</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>427</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>371</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>349</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>323</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>224</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>269</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>265</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>327</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>291</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>46</funcsElem>
      <funcsElem>48</funcsElem>
      <funcsElem>49</funcsElem>
      <funcsElem>50</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>271</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>293</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>126</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>337</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>33</funcsElem>
      <funcsElem>35</funcsElem>
      <funcsElem>36</funcsElem>
      <funcsElem>37</funcsElem>
      <funcsElem>38</funcsElem>
      <funcsElem>39</funcsElem>
      <funcsElem>40</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>215</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>369</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>429</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>367</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>238</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>247</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>405</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>319</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>273</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>303</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>421</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>71</funcsElem>
      <funcsElem>73</funcsElem>
      <funcsElem>74</funcsElem>
      <funcsElem>75</funcsElem>
      <funcsElem>76</funcsElem>
      <funcsElem>77</funcsElem>
      <funcsElem>78</funcsElem>
      <funcsElem>79</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>119</funcsElem>
      <funcsElem>121</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>267</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>275</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>357</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>295</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>80</funcsElem>
      <funcsElem>82</funcsElem>
      <funcsElem>83</funcsElem>
      <funcsElem>84</funcsElem>
      <funcsElem>85</funcsElem>
      <funcsElem>86</funcsElem>
      <funcsElem>87</funcsElem>
      <funcsElem>88</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>277</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>359</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>226</funcsElem>
      <funcsElem>228</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>373</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>361</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>240</funcsElem>
      <funcsElem>242</funcsElem>
      <funcsElem>243</funcsElem>
      <funcsElem>244</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>325</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>317</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
    <SimpleFunctionSet>
     <funcs >
      <funcsElem>387</funcsElem>
     </funcs>
     <typ>SIMPLE_FUNCTION_SET</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </SimpleFunctionSet>
   </SimpleFunctions>
   <AggrFunctions >
    <AggFunction Key="trimmedMean(double,int,int)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPTrimmedMean</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  trimmedMean(c1 double, c2 int, c3 int) return double  aggregate using "oracle.cep.colt.aggr.CEPTrimmedMean" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="SUM(float)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function sum(c1 float) return float aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="autoCorrelation(double,int)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPAutoCorrelation</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  autoCorrelation(c1 double, c2 int) return double  aggregate using "oracle.cep.colt.aggr.CEPAutoCorrelation" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="COUNT(byte)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function count(c1 byte) return int aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="AVG(bigint)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function avg(c1 bigint) return float aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="MAX(char)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function max(c1 char) return char aggregate using"$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="MAX(bigint)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function max(c1 bigint) return bigint aggregate using "$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="COUNT(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function count(c1 double) return int aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="tklog_secondMax(timestamp)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>oracle.cep.test.userfunctions.TkUsrSecondMax</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt> create function tklog_secondMax(c1 timestamp) return timestamp aggregate using "oracle.cep.test.userfunctions.TkUsrSecondMax" </creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="MIN(char)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function min(c1 char) return char aggregate using"$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="sumOfSquares(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSumOfSquares</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sumOfSquares(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSumOfSquares" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="sampleStandardDeviation(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSampleStandardDeviation</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sampleStandardDeviation(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSampleStandardDeviation" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="MIN(timestamp)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function min(c1 timestamp) return timestamp aggregate using"$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="sumOfInversions(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSumOfInversions</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sumOfInversions(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSumOfInversions" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="MAX(float)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function max(c1 float) return float aggregate using "$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="sumOfSquaredDeviations(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSumOfSquaredDeviations</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sumOfSquaredDeviations(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSumOfSquaredDeviations" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="MIN(interval)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function min(c1 interval) return interval aggregate using"$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="sumOfPowerDeviations(double,int,double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSumOfPowerDeviations</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sumOfPowerDeviations(c1 double, c2 int, c3 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSumOfPowerDeviations" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="COUNT(char)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function count(c1 char) return int aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="kurtosis(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPKurtosis</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  kurtosis(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPKurtosis" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="sumOfPowers(double,int)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSumOfPowers</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sumOfPowers(c1 double, c2 int) return double  aggregate using "oracle.cep.colt.aggr.CEPSumOfPowers" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="LAST(byte,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Last</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function last(c1 byte, n int) return byte aggregate using "oracle.cep.extensibility.functions.builtin.Last"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="tklog_secondMax(interval)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>oracle.cep.test.userfunctions.TkUsrSecondMax</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt> create function tklog_secondMax(c1 interval) return interval aggregate using "oracle.cep.test.userfunctions.TkUsrSecondMax" </creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="LAST(int,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Last</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function last(c1 int, n int) return int aggregate using "oracle.cep.extensibility.functions.builtin.Last"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="moment(double,int,double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPMoment</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  moment(c1 double, c2 int, c3 double) return double  aggregate using "oracle.cep.colt.aggr.CEPMoment" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="MAX(int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function max(c1 int) return int aggregate using "$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="tklog_secondMax(float)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>oracle.cep.test.userfunctions.TkUsrSecondMax</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
      <destQueriesElem>494</destQueriesElem>
     </destQueries>
     <creationTxt> create function tklog_secondMax(c1 float) return float aggregate using "oracle.cep.test.userfunctions.TkUsrSecondMax" </creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="COUNT(float)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function count(c1 float) return int aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="variance(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPVariance</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  variance(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPVariance" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="lag1(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPLag1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  lag1(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPLag1" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="median(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPMedian</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  median(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPMedian" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="FIRST(char,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.First</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function first(c1 char, n int) return char aggregate using "oracle.cep.extensibility.functions.builtin.First"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="SUM(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function sum(c1 double) return double aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="MAX(interval)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function max(c1 interval) return interval aggregate using"$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="meanDeviation(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPMeanDeviation</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  meanDeviation(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPMeanDeviation" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="MIN(bigint)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function min(c1 bigint) return bigint aggregate using "$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="LAST(interval,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Last</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function last(c1 interval, n int) return interval aggregate using "oracle.cep.extensibility.functions.builtin.Last"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="correlation(double,double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPCorrelation</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  correlation(c1 double, c2 double) return double  aggregate using "oracle.cep.colt.aggr.CEPCorrelation" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="AVG(float)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function avg(c1 float) return float aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="sampleKurtosisStandardError(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSampleKurtosisStandardError</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sampleKurtosisStandardError(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSampleKurtosisStandardError" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="sampleSkew(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSampleSkew</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sampleSkew(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSampleSkew" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="sampleSkewStandardError(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSampleSkewStandardError</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sampleSkewStandardError(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSampleSkewStandardError" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="FIRST(bigint,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.First</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function first(c1 bigint, n int) return bigint aggregate using "oracle.cep.extensibility.functions.builtin.First"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="FIRST(float,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.First</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function first(c1 float, n int) return float aggregate using "oracle.cep.extensibility.functions.builtin.First"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="weightedMean(double,double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPWeightedMean</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  weightedMean(c1 double, c2 double) return double  aggregate using "oracle.cep.colt.aggr.CEPWeightedMean" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="COUNT(bigint)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function count(c1 bigint) return int aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="rms(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPRms</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  rms(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPRms" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="FIRST(int,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.First</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function first(c1 int, n int) return int aggregate using "oracle.cep.extensibility.functions.builtin.First"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="MIN(float)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function min(c1 float) return float aggregate using "$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="pooledMean(double,double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPPooledMean</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  pooledMean(c1 double, c2 double) return double  aggregate using "oracle.cep.colt.aggr.CEPPooledMean" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="standardError(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPStandardError</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  standardError(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPStandardError" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="winsorizedMean(double,int,int)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>2</position>
       <name>c3</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPWinsorizedMean</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  winsorizedMean(c1 double, c2 int, c3 int) return double  aggregate using "oracle.cep.colt.aggr.CEPWinsorizedMean" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="MAX(timestamp)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function max(c1 timestamp) return timestamp aggregate using"$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="MIN(int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function min(c1 int) return int aggregate using "$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="FIRST(double,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.First</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function first(c1 double, n int) return double aggregate using "oracle.cep.extensibility.functions.builtin.First"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="geometricMean(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPGeometricMean</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  geometricMean(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPGeometricMean" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="FIRST(timestamp,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.First</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function first(c1 timestamp, n int) return timestamp aggregate using "oracle.cep.extensibility.functions.builtin.First"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="LAST(float,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>float</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Last</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function last(c1 float, n int) return float aggregate using "oracle.cep.extensibility.functions.builtin.Last"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="SUM(int)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function sum(c1 int) return int aggregate using "$dummy" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="product(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPProduct</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  product(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPProduct" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="COUNT(int)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function count(c1 int) return int aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="rankInterpolated(double,double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPRankInterpolated</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  rankInterpolated(c1 double, c2 double) return double  aggregate using "oracle.cep.colt.aggr.CEPRankInterpolated" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="skew(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSkew</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  skew(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSkew" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="AVG(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function avg(c1 double) return double aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="pooledVariance(double,double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPPooledVariance</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  pooledVariance(c1 double, c2 double) return double  aggregate using "oracle.cep.colt.aggr.CEPPooledVariance" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="MAX(double)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function max(c1 double) return double aggregate using "$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="geometricMean1(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPGeometricMean1</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  geometricMean1(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPGeometricMean1" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="durbinWatson(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPDurbinWatson</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  durbinWatson(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPDurbinWatson" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="tklog_secondMax(byte)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>oracle.cep.test.userfunctions.TkUsrSecondMax</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt> create function tklog_secondMax(c1 byte) return byte aggregate using "oracle.cep.test.userfunctions.TkUsrSecondMax" </creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="COUNT(timestamp)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function count(c1 timestamp) return int aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="MIN(byte)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function min(c1 byte) return byte aggregate using"$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="SUM(bigint)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function sum(c1 bigint) return bigint aggregate using "$dummy" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="standardDeviation(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPStandardDeviation</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  standardDeviation(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPStandardDeviation" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="LAST(char,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Last</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function last(c1 char, n int) return char aggregate using "oracle.cep.extensibility.functions.builtin.Last"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="FIRST(byte,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.First</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function first(c1 byte, n int) return byte aggregate using "oracle.cep.extensibility.functions.builtin.First"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="AVG(int)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>float</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function avg(c1 int) return float aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="MAX(byte)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>byte</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>byte</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function max(c1 byte) return byte aggregate using"$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="COUNT(interval)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>int</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function count(c1 interval) return int aggregate using "$dummy"  supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="sampleKurtosis(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSampleKurtosis</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sampleKurtosis(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSampleKurtosis" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="LAST(bigint,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>bigint</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>bigint</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Last</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function last(c1 bigint, n int) return bigint aggregate using "oracle.cep.extensibility.functions.builtin.Last"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="quantile(double,double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPQuantile</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  quantile(c1 double, c2 double) return double  aggregate using "oracle.cep.colt.aggr.CEPQuantile" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="LAST(timestamp,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>timestamp</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>timestamp</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Last</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function last(c1 timestamp, n int) return timestamp aggregate using "oracle.cep.extensibility.functions.builtin.Last"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="sumOfLogarithms(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSumOfLogarithms</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sumOfLogarithms(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSumOfLogarithms" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="tklog_secondMax(char)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>char</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>char</returnType>
     <implClassName>oracle.cep.test.userfunctions.TkUsrSecondMax</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt> create function tklog_secondMax(c1 char) return char aggregate using "oracle.cep.test.userfunctions.TkUsrSecondMax" </creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="covariance(double,double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPCovariance</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  covariance(c1 double, c2 double) return double  aggregate using "oracle.cep.colt.aggr.CEPCovariance" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="mean(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPMean</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  mean(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPMean" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="harmonicMean(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPHarmonicMean</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  harmonicMean(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPHarmonicMean" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="quantileInverse(double,double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPQuantileInverse</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  quantileInverse(c1 double, c2 double) return double  aggregate using "oracle.cep.colt.aggr.CEPQuantileInverse" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="sampleVariance(double)">
     <supportsIncremental>true</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.colt.aggr.CEPSampleVariance</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function  sampleVariance(c1 double) return double  aggregate using "oracle.cep.colt.aggr.CEPSampleVariance" supports incremental computation</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="MIN(double)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>$dummy</implClassName>
     <builtIn>true</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function min(c1 double) return double aggregate using "$dummy"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="LAST(double,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>double</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>double</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.Last</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function last(c1 double, n int) return double aggregate using "oracle.cep.extensibility.functions.builtin.Last"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
    <AggFunction Key="FIRST(interval,int)">
     <supportsIncremental>false</supportsIncremental>
     <factory>null</factory>
     <paramList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>interval</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>n</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </paramList>
     <returnType>interval</returnType>
     <implClassName>oracle.cep.extensibility.functions.builtin.First</implClassName>
     <builtIn>false</builtIn>
     <destQueries >
     </destQueries>
     <creationTxt>create function first(c1 interval, n int) return interval aggregate using "oracle.cep.extensibility.functions.builtin.First"</creationTxt>
     <typ>AGGR_FUNCTION</typ>
     <nameSpace>USERFUNCTION</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </AggFunction>
   </AggrFunctions>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=METADATA_VIEW event=DUMP target=ViewManager levels=2 3 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="0" TargetName="ViewManager">
  <Level Name="MVIEW_INFO" Value="2">
   <Views >
    <View Key="tklog_v2">
     <queryId>483</queryId>
     <destQueries >
      <destQueriesElem>488</destQueriesElem>
     </destQueries>
     <attrList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </attrList>
     <bStream>true</bStream>
     <isExternal>false</isExternal>
     <typ>VIEW</typ>
     <nameSpace>SOURCE</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </View>
    <View Key="tklog_v1">
     <queryId>481</queryId>
     <destQueries >
      <destQueriesElem>486</destQueriesElem>
      <destQueriesElem>487</destQueriesElem>
     </destQueries>
     <attrList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </attrList>
     <bStream>false</bStream>
     <isExternal>false</isExternal>
     <typ>VIEW</typ>
     <nameSpace>SOURCE</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
    </View>
   </Views>
  </Level>
  <Level Name="MVIEW_LOCKINFO" Value="3">
   <Views >
    <View Key="tklog_v2">
     <queryId>483</queryId>
     <destQueries >
      <destQueriesElem>488</destQueriesElem>
     </destQueries>
     <attrList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
     </attrList>
     <bStream>true</bStream>
     <isExternal>false</isExternal>
     <typ>VIEW</typ>
     <nameSpace>SOURCE</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </View>
    <View Key="tklog_v1">
     <queryId>481</queryId>
     <destQueries >
      <destQueriesElem>486</destQueriesElem>
      <destQueriesElem>487</destQueriesElem>
     </destQueries>
     <attrList >
      <Attribute>
       <position>0</position>
       <name>c1</name>
       <type>int</type>
       /maxLength>
      </Attribute>
      <Attribute>
       <position>1</position>
       <name>c2</name>
       <type>float</type>
       /maxLength>
      </Attribute>
     </attrList>
     <bStream>false</bStream>
     <isExternal>false</isExternal>
     <typ>VIEW</typ>
     <nameSpace>SOURCE</nameSpace>
     <bDirty>false</bDirty>
     <bLoaded>true</bLoaded>
     <change>NONE</change>
     <lock>java.util.concurrent.locks.ReentrantReadWriteLock[Write locks = 0, Read locks = 0]</lock>
     <refCount>0</refCount>
    </View>
   </Views>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=RelSource levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="0" TargetName="tklog_R#0">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <RelSource Type="EXEC_RELN_SOURCE" Name="tklog_R#0">
    <RelSourceState>
     <lastOutputTs>1</lastOutputTs>
     <inputTs>1</inputTs>
     <inputTuple>null</inputTuple>
     <outputTuple>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <char>abc</char>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </outputTuple>
     <minusTuple>null</minusTuple>
     E_PLUS tuple= '10,char[3]=abc,byte[1],' ts=1</outputElement>
     <outputTs>1</outputTs>
     <stubIds>{}</stubIds>
     <searchedTuple>null</searchedTuple>
     <isPlusProcessed>false</isPlusProcessed>
     <isUpdateTuple>false</isUpdateTuple>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>1</numExecutions>
      <numInputs>1</numInputs>
      <numOutputs>1</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>1</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </RelSourceState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter1.xml</SharedQueueWriter>
    <RelationSynopsisImpl PhyId="0" StubId="0">
     <RelStoreImpl>oracle/work/cep/diag/trc/RelStoreImpl2.xml</RelStoreImpl>
    </RelationSynopsisImpl>
   </RelSource>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=StreamSource levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="1" TargetName="tklog_S#1">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <StreamSource Type="EXEC_STREAM_SOURCE" Name="tklog_S#1">
    <StreamSourceState>
     <lastInputTs>0</lastInputTs>
     <lastOutputTs>0</lastOutputTs>
     <inputTs>0</inputTs>
     <inputTuple>null</inputTuple>
     <outputTuple>null</outputTuple>
     <timestampTuple>null</timestampTuple>
      null ts=0</outputElement>
     <outputTs>0</outputTs>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </StreamSourceState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter3.xml</SharedQueueWriter>
   </StreamSource>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=RangeWindow levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="2" TargetName="PO_RANGE_WIN#2">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <RangeWindow Type="EXEC_RANGE_WIN" Name="PO_RANGE_WIN#2">
    <RangeWindowState>
     <lastOutputTs>0</lastOutputTs>
     <inputElement>null</inputElement>
     <inputTuple>null</inputTuple>
     <inputKind>null</inputKind>
     <inputTs>0</inputTs>
      null ts=0</outputElement>
     <outputTs>0</outputTs>
     <expiredTuple>null</expiredTuple>
     <expiredTimeStamp>0</expiredTimeStamp>
     <batchEndTime>0</batchEndTime>
     <visTs>1969-12-31 16:00:00.0</visTs>
     <expTs>1969-12-31 16:00:00.0</expTs>
     <tempTs>1969-12-31 16:00:00.0</tempTs>
     <state>S_PROPAGATE_OLD_DATA</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>S_INIT</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </RangeWindowState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter4.xml</SharedQueueWriter>
    <WindowSynopsisImpl PhyId="1" StubId="0">
     <WinStoreImpl>oracle/work/cep/diag/trc/WinStoreImpl5.xml</WinStoreImpl>
    </WindowSynopsisImpl>
   </RangeWindow>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=Output levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="3" TargetName="PO_OUTPUT#3">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <Output Type="EXEC_OUTPUT" Name="PO_OUTPUT#3">
    <OutputState>
     <inputElement>null</inputElement>
     <outputTuple>null</outputTuple>
     <inputTuple>null</inputTuple>
     <inputTs>0</inputTs>
     <searchedTuple>null</searchedTuple>
     <plusIter>null</plusIter>
     <minusIter>null</minusIter>
     <outIter>null</outIter>
     <plusTuple>null</plusTuple>
     <minusTuple>null</minusTuple>
     <outTuple>null</outTuple>
     <outState>S_INIT</outState>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </OutputState>
   </Output>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=BinJoin levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="4" TargetName="PO_JOIN_PROJECT#4">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <BinJoin Type="EXEC_BIN_JOIN" Name="PO_JOIN_PROJECT#4">
    <BinJoinState>
     <lastOutputTs>0</lastOutputTs>
     <lastOuterTs>0</lastOuterTs>
     <lastInnerTs>0</lastInnerTs>
     <outerTs>0</outerTs>
     <innerTs>0</innerTs>
     <outerMinTs>0</outerMinTs>
     <innerMinTs>0</innerMinTs>
     <outerElement>null</outerElement>
     <innerElement>null</innerElement>
      null ts=0</outputElement>
     <outerTuple>null</outerTuple>
     <innerTuple>null</innerTuple>
     <outputTuple>null</outputTuple>
     <tmpState>null</tmpState>
     <tmpOuterTuple>null</tmpOuterTuple>
     <tmpInnerTuple>null</tmpInnerTuple>
     <outerPeekElement>null</outerPeekElement>
     <innerPeekElement>null</innerPeekElement>
     <nextOutputTs>0</nextOutputTs>
     <outputTs>0</outputTs>
     <nextElementKind>null</nextElementKind>
     <tmpElementKind>null</tmpElementKind>
     <outerMatchCount>0</outerMatchCount>
     <innerMatchCount>0</innerMatchCount>
     <innerScanEmpty>false</innerScanEmpty>
     <outerScanEmpty>false</outerScanEmpty>
     <outputNegNullInner>false</outputNegNullInner>
     <outputPosNullInner>false</outputPosNullInner>
     <outputNegOuterNull>false</outputNegOuterNull>
     <outputPosOuterNull>false</outputPosOuterNull>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </BinJoinState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter6.xml</SharedQueueWriter>
    <RelationSynopsisImpl PhyId="2" StubId="1">
     <WinStoreImpl>oracle/work/cep/diag/trc/WinStoreImpl7.xml</WinStoreImpl>
    </RelationSynopsisImpl>
    <RelationSynopsisImpl PhyId="3" StubId="1">
     <RelStoreImpl>oracle/work/cep/diag/trc/RelStoreImpl8.xml</RelStoreImpl>
    </RelationSynopsisImpl>
    <LineageSynopsisImpl PhyId="4" StubId="0">
     <LineageStoreImpl>oracle/work/cep/diag/trc/LineageStoreImpl9.xml</LineageStoreImpl>
    </LineageSynopsisImpl>
   </BinJoin>
   <InnerMatchHash >
   </InnerMatchHash>
   <OuterMatchHash >
   </OuterMatchHash>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=RelSource levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="5" TargetName="tklog_R1#5">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <RelSource Type="EXEC_RELN_SOURCE" Name="tklog_R1#5">
    <RelSourceState>
     <lastOutputTs>251</lastOutputTs>
     <inputTs>251</inputTs>
     <inputTuple>null</inputTuple>
     <outputTuple>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </outputTuple>
     <minusTuple>null</minusTuple>
     E_PLUS tuple= '10,0.3,byte[1],' ts=251</outputElement>
     <outputTs>251</outputTs>
     <stubIds>{}</stubIds>
     <searchedTuple>null</searchedTuple>
     <isPlusProcessed>false</isPlusProcessed>
     <isUpdateTuple>false</isUpdateTuple>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>1</numExecutions>
      <numInputs>250</numInputs>
      <numOutputs>250</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>S_INIT</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>251</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </RelSourceState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter11.xml</SharedQueueWriter>
    <RelationSynopsisImpl PhyId="6" StubId="0">
     <RelStoreImpl>oracle/work/cep/diag/trc/RelStoreImpl12.xml</RelStoreImpl>
    </RelationSynopsisImpl>
   </RelSource>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=Project levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="6" TargetName="PO_PROJECT#6">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <Project Type="EXEC_PROJECT" Name="PO_PROJECT#6">
    <ProjectState>
     <inputTs>0</inputTs>
     <lastOutputTs>0</lastOutputTs>
     <inputElement>null</inputElement>
     <inputTuple>null</inputTuple>
      null ts=0</outputElement>
     <outputTuple>null</outputTuple>
     <outputKind>null</outputKind>
     <tupleLineage >
      <tupleLineageElem>null</tupleLineageElem>
     </tupleLineage>
     <scan>null</scan>
     <state>S_PROPAGATE_OLD_DATA</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>S_INIT</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </ProjectState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter13.xml</SharedQueueWriter>
    <LineageSynopsisImpl PhyId="5" StubId="0">
     <LineageStoreImpl>oracle/work/cep/diag/trc/LineageStoreImpl14.xml</LineageStoreImpl>
    </LineageSynopsisImpl>
   </Project>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=Union levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="7" TargetName="PO_UNION#7">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <Union Type="EXEC_UNION" Name="PO_UNION#7">
    <UnionState>
     <lastOutputTs>0</lastOutputTs>
     <lastLeftTs>0</lastLeftTs>
     <lastRightTs>0</lastRightTs>
     <leftTs>0</leftTs>
     <rightTs>0</rightTs>
     <leftMinTs>0</leftMinTs>
     <rightMinTs>0</rightMinTs>
     <leftElement>null</leftElement>
     <rightElement>null</rightElement>
      null ts=0</outputElement>
     <leftTuple>null</leftTuple>
     <rightTuple>null</rightTuple>
     <outputTuple>null</outputTuple>
     <nextOutputTs>0</nextOutputTs>
     <outputTs>0</outputTs>
     <nextElementKind>null</nextElementKind>
     <tmpState>null</tmpState>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </UnionState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter16.xml</SharedQueueWriter>
    <LineageSynopsisImpl PhyId="7" StubId="0">
     <LineageStoreImpl>oracle/work/cep/diag/trc/LineageStoreImpl17.xml</LineageStoreImpl>
    </LineageSynopsisImpl>
   </Union>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=Output levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="8" TargetName="PO_OUTPUT#8">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <Output Type="EXEC_OUTPUT" Name="PO_OUTPUT#8">
    <OutputState>
     <inputElement>null</inputElement>
     <outputTuple>null</outputTuple>
     <inputTuple>null</inputTuple>
     <inputTs>0</inputTs>
     <searchedTuple>null</searchedTuple>
     <plusIter>null</plusIter>
     <minusIter>null</minusIter>
     <outIter>null</outIter>
     <plusTuple>null</plusTuple>
     <minusTuple>null</minusTuple>
     <outTuple>null</outTuple>
     <outState>S_INIT</outState>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </OutputState>
   </Output>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=Except levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="9" TargetName="PO_EXCEPT#9">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <Except Type="EXEC_EXCEPT" Name="PO_EXCEPT#9">
    <ExceptState>
     <tmpState>null</tmpState>
     <lastOutputTs>0</lastOutputTs>
     <lastLeftTs>0</lastLeftTs>
     <lastRightTs>0</lastRightTs>
     <leftTs>0</leftTs>
     <rightTs>0</rightTs>
     <leftMinTs>0</leftMinTs>
     <rightMinTs>0</rightMinTs>
     <leftElement>null</leftElement>
     <rightElement>null</rightElement>
     <outScanId>0</outScanId>
     <countScanId>0</countScanId>
     <leftTuple>null</leftTuple>
     <rightTuple>null</rightTuple>
     <countTuple>null</countTuple>
     <outputTuple>null</outputTuple>
     <nextOutputTs>0</nextOutputTs>
     <outputTs>0</outputTs>
     <nextElementKind>null</nextElementKind>
      null ts=0</outputElement>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </ExceptState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter19.xml</SharedQueueWriter>
    <RelationSynopsisImpl PhyId="8" StubId="0">
     <RelStoreImpl>oracle/work/cep/diag/trc/RelStoreImpl20.xml</RelStoreImpl>
    </RelationSynopsisImpl>
   </Except>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=Output levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="10" TargetName="PO_OUTPUT#10">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <Output Type="EXEC_OUTPUT" Name="PO_OUTPUT#10">
    <OutputState>
     <inputElement>null</inputElement>
     <outputTuple>null</outputTuple>
     <inputTuple>null</inputTuple>
     <inputTs>0</inputTs>
     <searchedTuple>null</searchedTuple>
     <plusIter>null</plusIter>
     <minusIter>null</minusIter>
     <outIter>null</outIter>
     <plusTuple>null</plusTuple>
     <minusTuple>null</minusTuple>
     <outTuple>null</outTuple>
     <outState>S_INIT</outState>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </OutputState>
   </Output>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=StreamSource levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="11" TargetName="tklog_S1#11">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <StreamSource Type="EXEC_STREAM_SOURCE" Name="tklog_S1#11">
    <StreamSourceState>
     <lastInputTs>0</lastInputTs>
     <lastOutputTs>0</lastOutputTs>
     <inputTs>0</inputTs>
     <inputTuple>null</inputTuple>
     <outputTuple>null</outputTuple>
     <timestampTuple>null</timestampTuple>
      null ts=0</outputElement>
     <outputTs>0</outputTs>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </StreamSourceState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter21.xml</SharedQueueWriter>
   </StreamSource>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=RangeWindow levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="12" TargetName="PO_RANGE_WIN#12">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <RangeWindow Type="EXEC_RANGE_WIN" Name="PO_RANGE_WIN#12">
    <RangeWindowState>
     <lastOutputTs>0</lastOutputTs>
     <inputElement>null</inputElement>
     <inputTuple>null</inputTuple>
     <inputKind>null</inputKind>
     <inputTs>0</inputTs>
      null ts=0</outputElement>
     <outputTs>0</outputTs>
     <expiredTuple>null</expiredTuple>
     <expiredTimeStamp>0</expiredTimeStamp>
     <batchEndTime>0</batchEndTime>
     <visTs>1969-12-31 16:00:00.0</visTs>
     <expTs>1969-12-31 16:00:00.0</expTs>
     <tempTs>1969-12-31 16:00:00.0</tempTs>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </RangeWindowState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter22.xml</SharedQueueWriter>
    <WindowSynopsisImpl PhyId="10" StubId="0">
     <WinStoreImpl>oracle/work/cep/diag/trc/WinStoreImpl23.xml</WinStoreImpl>
    </WindowSynopsisImpl>
   </RangeWindow>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=Project levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="13" TargetName="PO_PROJECT#13">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <Project Type="EXEC_PROJECT" Name="PO_PROJECT#13">
    <ProjectState>
     <inputTs>0</inputTs>
     <lastOutputTs>0</lastOutputTs>
     <inputElement>null</inputElement>
     <inputTuple>null</inputTuple>
      null ts=0</outputElement>
     <outputTuple>null</outputTuple>
     <outputKind>null</outputKind>
     <tupleLineage >
      <tupleLineageElem>null</tupleLineageElem>
     </tupleLineage>
     <scan>null</scan>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </ProjectState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter24.xml</SharedQueueWriter>
    <LineageSynopsisImpl PhyId="11" StubId="0">
     <LineageStoreImpl>oracle/work/cep/diag/trc/LineageStoreImpl25.xml</LineageStoreImpl>
    </LineageSynopsisImpl>
   </Project>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=IStream levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="14" TargetName="PO_ISTREAM#14">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <IStream Type="EXEC_ISTREAM" Name="PO_ISTREAM#14">
    <XStreamState>
     <inputTs>0</inputTs>
     <lastInputTs>0</lastInputTs>
     <nextOutputTs>0</nextOutputTs>
     <processSilnReln>false</processSilnReln>
     <inputElement>null</inputElement>
     <inputTuple>null</inputTuple>
     <outputTs>0</outputTs>
      null ts=0</outputElement>
     <outputTuple>null</outputTuple>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </XStreamState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter27.xml</SharedQueueWriter>
    <RelationSynopsisImpl PhyId="12" StubId="0">
     <RelStoreImpl>oracle/work/cep/diag/trc/RelStoreImpl28.xml</RelStoreImpl>
    </RelationSynopsisImpl>
   </IStream>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=ViewStrmSrc levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="15" TargetName="tklog_v2#15">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <ViewStrmSrc Type="EXEC_VIEW_STRM_SRC" Name="tklog_v2#15">
    <ViewStrmSrcState>
     <inputElement>null</inputElement>
      null ts=0</outputElement>
     <inputTs>0</inputTs>
     <lastInputTs>0</lastInputTs>
     <lastOutputTs>0</lastOutputTs>
     <inputTuple>null</inputTuple>
     <outputTuple>null</outputTuple>
     <outputKind>null</outputKind>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </ViewStrmSrcState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter29.xml</SharedQueueWriter>
   </ViewStrmSrc>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=Output levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="16" TargetName="PO_OUTPUT#16">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <Output Type="EXEC_OUTPUT" Name="PO_OUTPUT#16">
    <OutputState>
     <inputElement>null</inputElement>
     <outputTuple>null</outputTuple>
     <inputTuple>null</inputTuple>
     <inputTs>0</inputTs>
     <searchedTuple>null</searchedTuple>
     <plusIter>null</plusIter>
     <minusIter>null</minusIter>
     <outIter>null</outIter>
     <plusTuple>null</plusTuple>
     <minusTuple>null</minusTuple>
     <outTuple>null</outTuple>
     <outState>S_INIT</outState>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </OutputState>
   </Output>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=StreamSource levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="17" TargetName="tklog_S0#17">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <StreamSource Type="EXEC_STREAM_SOURCE" Name="tklog_S0#17">
    <StreamSourceState>
     <lastInputTs>0</lastInputTs>
     <lastOutputTs>0</lastOutputTs>
     <inputTs>0</inputTs>
     <inputTuple>null</inputTuple>
     <outputTuple>null</outputTuple>
     <timestampTuple>null</timestampTuple>
      null ts=0</outputElement>
     <outputTs>0</outputTs>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </StreamSourceState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter30.xml</SharedQueueWriter>
   </StreamSource>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=PatternStrmClassB levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="18" TargetName="PO_PATTERN_STRM_CLASSB#18">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <PatternStrmClassB Type="EXEC_PATTERN_STRM_CLASSB" Name="PO_PATTERN_STRM_CLASSB#18">
    <PatternStrmClassBState>
     <inputTuple>null</inputTuple>
     <inputElement>null</inputElement>
      null ts=0</outputElement>
     <lastOutputTs>0</lastOutputTs>
     <outputTuple>null</outputTuple>
     <outputKind>null</outputKind>
     <inputTs>0</inputTs>
     <sequence>0</sequence>
     <prevTuple>
      <TuplePtr>
       <Tuple>
        <int>null</int>
        <float>null</float>
        <timestamp>null</timestamp>
       </Tuple>
      </TuplePtr>
     </prevTuple>
     <tempConsumed>false</tempConsumed>
     <state>S_PRE_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </PatternStrmClassBState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter31.xml</SharedQueueWriter>
    <BindingSynopsisImpl PhyId="13" StubId="0">
     <ActiveBindList >
     </ActiveBindList>
     <UnsureList >
     </UnsureList>
     <BindStoreImpl>oracle/work/cep/diag/trc/BindStoreImpl32.xml</BindStoreImpl>
    </BindingSynopsisImpl>
   </PatternStrmClassB>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=Project levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="19" TargetName="PO_PROJECT#19">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <Project Type="EXEC_PROJECT" Name="PO_PROJECT#19">
    <ProjectState>
     <inputTs>0</inputTs>
     <lastOutputTs>0</lastOutputTs>
     <inputElement>null</inputElement>
     <inputTuple>null</inputTuple>
      null ts=0</outputElement>
     <outputTuple>null</outputTuple>
     <outputKind>null</outputKind>
     <tupleLineage >
      <tupleLineageElem>null</tupleLineageElem>
     </tupleLineage>
     <scan>null</scan>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </ProjectState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter33.xml</SharedQueueWriter>
   </Project>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=Output levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="20" TargetName="PO_OUTPUT#20">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <Output Type="EXEC_OUTPUT" Name="PO_OUTPUT#20">
    <OutputState>
     <inputElement>null</inputElement>
     <outputTuple>null</outputTuple>
     <inputTuple>null</inputTuple>
     <inputTs>0</inputTs>
     <searchedTuple>null</searchedTuple>
     <plusIter>null</plusIter>
     <minusIter>null</minusIter>
     <outIter>null</outIter>
     <plusTuple>null</plusTuple>
     <minusTuple>null</minusTuple>
     <outTuple>null</outTuple>
     <outState>S_INIT</outState>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </OutputState>
   </Output>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=StreamSource levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="21" TargetName="tklog_S5#21">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <StreamSource Type="EXEC_STREAM_SOURCE" Name="tklog_S5#21">
    <StreamSourceState>
     <lastInputTs>0</lastInputTs>
     <lastOutputTs>0</lastOutputTs>
     <inputTs>0</inputTs>
     <inputTuple>null</inputTuple>
     <outputTuple>null</outputTuple>
     <timestampTuple>null</timestampTuple>
      null ts=0</outputElement>
     <outputTs>0</outputTs>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </StreamSourceState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter34.xml</SharedQueueWriter>
   </StreamSource>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=PatternStrmClassB levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="22" TargetName="PO_PATTERN_STRM_CLASSB#22">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <PatternStrmClassB Type="EXEC_PATTERN_STRM_CLASSB" Name="PO_PATTERN_STRM_CLASSB#22">
    <PatternStrmClassBState>
     <inputTuple>null</inputTuple>
     <inputElement>null</inputElement>
      null ts=0</outputElement>
     <lastOutputTs>0</lastOutputTs>
     <outputTuple>null</outputTuple>
     <outputKind>null</outputKind>
     <inputTs>0</inputTs>
     <sequence>0</sequence>
     <prevTuple>
      <TuplePtr>
       <Tuple>
        <int>null</int>
        <float>null</float>
        <timestamp>null</timestamp>
       </Tuple>
      </TuplePtr>
     </prevTuple>
     <tempConsumed>false</tempConsumed>
     <state>S_PRE_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </PatternStrmClassBState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter35.xml</SharedQueueWriter>
    <BindingSynopsisImpl PhyId="14" StubId="0">
     <ActiveBindList >
     </ActiveBindList>
     <UnsureList >
     </UnsureList>
     <BindStoreImpl>oracle/work/cep/diag/trc/BindStoreImpl36.xml</BindStoreImpl>
    </BindingSynopsisImpl>
   </PatternStrmClassB>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=Project levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="23" TargetName="PO_PROJECT#23">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <Project Type="EXEC_PROJECT" Name="PO_PROJECT#23">
    <ProjectState>
     <inputTs>0</inputTs>
     <lastOutputTs>0</lastOutputTs>
     <inputElement>null</inputElement>
     <inputTuple>null</inputTuple>
      null ts=0</outputElement>
     <outputTuple>null</outputTuple>
     <outputKind>null</outputKind>
     <tupleLineage >
      <tupleLineageElem>null</tupleLineageElem>
     </tupleLineage>
     <scan>null</scan>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </ProjectState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter37.xml</SharedQueueWriter>
   </Project>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=Output levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="24" TargetName="PO_OUTPUT#24">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <Output Type="EXEC_OUTPUT" Name="PO_OUTPUT#24">
    <OutputState>
     <inputElement>null</inputElement>
     <outputTuple>null</outputTuple>
     <inputTuple>null</inputTuple>
     <inputTs>0</inputTs>
     <searchedTuple>null</searchedTuple>
     <plusIter>null</plusIter>
     <minusIter>null</minusIter>
     <outIter>null</outIter>
     <plusTuple>null</plusTuple>
     <minusTuple>null</minusTuple>
     <outTuple>null</outTuple>
     <outState>S_INIT</outState>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </OutputState>
   </Output>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=StreamSource levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="25" TargetName="tklog_S3#25">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <StreamSource Type="EXEC_STREAM_SOURCE" Name="tklog_S3#25">
    <StreamSourceState>
     <lastInputTs>0</lastInputTs>
     <lastOutputTs>0</lastOutputTs>
     <inputTs>0</inputTs>
     <inputTuple>null</inputTuple>
     <outputTuple>null</outputTuple>
     <timestampTuple>null</timestampTuple>
      null ts=0</outputElement>
     <outputTs>0</outputTs>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </StreamSourceState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter38.xml</SharedQueueWriter>
   </StreamSource>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=RangeWindow levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="26" TargetName="PO_RANGE_WIN#26">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <RangeWindow Type="EXEC_RANGE_WIN" Name="PO_RANGE_WIN#26">
    <RangeWindowState>
     <lastOutputTs>0</lastOutputTs>
     <inputElement>null</inputElement>
     <inputTuple>null</inputTuple>
     <inputKind>null</inputKind>
     <inputTs>0</inputTs>
      null ts=0</outputElement>
     <outputTs>0</outputTs>
     <expiredTuple>null</expiredTuple>
     <expiredTimeStamp>0</expiredTimeStamp>
     <batchEndTime>0</batchEndTime>
     <visTs>1969-12-31 16:00:00.0</visTs>
     <expTs>1969-12-31 16:00:00.0</expTs>
     <tempTs>1969-12-31 16:00:00.0</tempTs>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </RangeWindowState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter39.xml</SharedQueueWriter>
    <WindowSynopsisImpl PhyId="15" StubId="0">
     <WinStoreImpl>oracle/work/cep/diag/trc/WinStoreImpl40.xml</WinStoreImpl>
    </WindowSynopsisImpl>
   </RangeWindow>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=GroupAggr levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="27" TargetName="PO_GROUP_AGGR#27">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <GroupAggr Type="EXEC_GROUP_AGGR" Name="PO_GROUP_AGGR#27">
    <GroupAggrState>
     <inputTs>0</inputTs>
     <inputElement>null</inputElement>
     <inputTuple>null</inputTuple>
     <outputTs>0</outputTs>
     <lastOutputTs>0</lastOutputTs>
      null ts=0</outputElement>
     <outputTuple>null</outputTuple>
     <oldAggrTuple>null</oldAggrTuple>
     <isInitNullRowEmitted>false</isInitNullRowEmitted>
     <isGroupEmpty>false</isGroupEmpty>
     <nextUDAIndex>0</nextUDAIndex>
     <isDirty>false</isDirty>
     <plusState>S_INIT</plusState>
     <minusState>S_INIT</minusState>
     <dirtyOutputState>S_INIT</dirtyOutputState>
     <oldState>S_INIT</oldState>
     <inTuple>null</inTuple>
     <outDirtyTuple>null</outDirtyTuple>
     <dirtyTuple>null</dirtyTuple>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </GroupAggrState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter41.xml</SharedQueueWriter>
    <RelationSynopsisImpl PhyId="16" StubId="0">
     <RelStoreImpl>oracle/work/cep/diag/trc/RelStoreImpl42.xml</RelStoreImpl>
    </RelationSynopsisImpl>
    <RelationSynopsisImpl PhyId="18" StubId="1">
     <RelStoreImpl>oracle/work/cep/diag/trc/RelStoreImpl43.xml</RelStoreImpl>
    </RelationSynopsisImpl>
   </GroupAggr>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=Project levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="28" TargetName="PO_PROJECT#28">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <Project Type="EXEC_PROJECT" Name="PO_PROJECT#28">
    <ProjectState>
     <inputTs>0</inputTs>
     <lastOutputTs>0</lastOutputTs>
     <inputElement>null</inputElement>
     <inputTuple>null</inputTuple>
      null ts=0</outputElement>
     <outputTuple>null</outputTuple>
     <outputKind>null</outputKind>
     <tupleLineage >
      <tupleLineageElem>null</tupleLineageElem>
     </tupleLineage>
     <scan>null</scan>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </ProjectState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter44.xml</SharedQueueWriter>
    <LineageSynopsisImpl PhyId="19" StubId="0">
     <LineageStoreImpl>oracle/work/cep/diag/trc/LineageStoreImpl45.xml</LineageStoreImpl>
    </LineageSynopsisImpl>
   </Project>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=Output levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="29" TargetName="PO_OUTPUT#29">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <Output Type="EXEC_OUTPUT" Name="PO_OUTPUT#29">
    <OutputState>
     <inputElement>null</inputElement>
     <outputTuple>null</outputTuple>
     <inputTuple>null</inputTuple>
     <inputTs>0</inputTs>
     <searchedTuple>null</searchedTuple>
     <plusIter>null</plusIter>
     <minusIter>null</minusIter>
     <outIter>null</outIter>
     <plusTuple>null</plusTuple>
     <minusTuple>null</minusTuple>
     <outTuple>null</outTuple>
     <outState>S_INIT</outState>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </OutputState>
   </Output>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=StreamSource levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="30" TargetName="tklog_S12#30">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <StreamSource Type="EXEC_STREAM_SOURCE" Name="tklog_S12#30">
    <StreamSourceState>
     <lastInputTs>0</lastInputTs>
     <lastOutputTs>0</lastOutputTs>
     <inputTs>0</inputTs>
     <inputTuple>null</inputTuple>
     <outputTuple>null</outputTuple>
     <timestampTuple>null</timestampTuple>
      null ts=0</outputElement>
     <outputTs>0</outputTs>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </StreamSourceState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter47.xml</SharedQueueWriter>
   </StreamSource>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=RangeWindow levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="31" TargetName="PO_RANGE_WIN#31">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <RangeWindow Type="EXEC_RANGE_WIN" Name="PO_RANGE_WIN#31">
    <RangeWindowState>
     <lastOutputTs>0</lastOutputTs>
     <inputElement>null</inputElement>
     <inputTuple>null</inputTuple>
     <inputKind>null</inputKind>
     <inputTs>0</inputTs>
      null ts=0</outputElement>
     <outputTs>0</outputTs>
     <expiredTuple>null</expiredTuple>
     <expiredTimeStamp>0</expiredTimeStamp>
     <batchEndTime>0</batchEndTime>
     <visTs>1969-12-31 16:00:00.0</visTs>
     <expTs>1969-12-31 16:00:00.0</expTs>
     <tempTs>1969-12-31 16:00:00.0</tempTs>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </RangeWindowState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter48.xml</SharedQueueWriter>
    <WindowSynopsisImpl PhyId="20" StubId="0">
     <WinStoreImpl>oracle/work/cep/diag/trc/WinStoreImpl49.xml</WinStoreImpl>
    </WindowSynopsisImpl>
   </RangeWindow>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=Project levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="32" TargetName="PO_PROJECT#32">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <Project Type="EXEC_PROJECT" Name="PO_PROJECT#32">
    <ProjectState>
     <inputTs>0</inputTs>
     <lastOutputTs>0</lastOutputTs>
     <inputElement>null</inputElement>
     <inputTuple>null</inputTuple>
      null ts=0</outputElement>
     <outputTuple>null</outputTuple>
     <outputKind>null</outputKind>
     <tupleLineage >
      <tupleLineageElem>null</tupleLineageElem>
     </tupleLineage>
     <scan>null</scan>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </ProjectState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter50.xml</SharedQueueWriter>
    <LineageSynopsisImpl PhyId="21" StubId="0">
     <LineageStoreImpl>oracle/work/cep/diag/trc/LineageStoreImpl51.xml</LineageStoreImpl>
    </LineageSynopsisImpl>
   </Project>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=Output levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="33" TargetName="PO_OUTPUT#33">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <Output Type="EXEC_OUTPUT" Name="PO_OUTPUT#33">
    <OutputState>
     <inputElement>null</inputElement>
     <outputTuple>null</outputTuple>
     <inputTuple>null</inputTuple>
     <inputTs>0</inputTs>
     <searchedTuple>null</searchedTuple>
     <plusIter>null</plusIter>
     <minusIter>null</minusIter>
     <outIter>null</outIter>
     <plusTuple>null</plusTuple>
     <minusTuple>null</minusTuple>
     <outTuple>null</outTuple>
     <outState>S_INIT</outState>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </OutputState>
   </Output>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueWriter levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="1" TargetName="SharedQueueWriter">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueWriterId>0</SharedQueueWriterId>
   <SharedQueueWriterPhyId>1</SharedQueueWriterPhyId>
   <numElementsWriter>1</numElementsWriter>
   <numPosElementsWriter>1</numPosElementsWriter>
   <numNegElementsWriter>0</numNegElementsWriter>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter53.xml</SharedQueueWriter>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=SYNOPSIS event=DUMP target=RelationSynopsisImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="0" TargetName="RelationSynopsisImpl">
  <Level Name="SYNOPSIS_STATS" Value="4">
  </Level>
  <Level Name="SYNOPSIS_DUMPELEMS" Value="6">
   <RelationSynopsisImpl PhyId="0" StubId="0">
    <RelStoreImpl>oracle/work/cep/diag/trc/RelStoreImpl54.xml</RelStoreImpl>
   </RelationSynopsisImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=INDEX event=DUMP target=HashIndex levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="1" TargetName="HashIndex">
  <Level Name="INDEX_STATS" Value="4">
  </Level>
  <Level Name="INDEX_DUMPELEMS" Value="6">
   <HashIndex>oracle/work/cep/diag/trc/HashIndex55.xml</HashIndex>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=STORE event=DUMP target=RelStoreImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="0" TargetName="RelStoreImpl">
  <Level Name="STORE_STATS" Value="4">
  </Level>
  <Level Name="STORE_DUMPELEMS" Value="6">
   <RelStoreImpl>oracle/work/cep/diag/trc/RelStoreImpl56.xml</RelStoreImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=RelSource levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="0" TargetName="tklog_R#0">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <RelSource Type="EXEC_RELN_SOURCE" Name="tklog_R#0">
    <RelSourceState>
     <lastOutputTs>1</lastOutputTs>
     <inputTs>1</inputTs>
     <inputTuple>null</inputTuple>
     <outputTuple>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <char>abc</char>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </outputTuple>
     <minusTuple>null</minusTuple>
     E_PLUS tuple= '10,char[3]=abc,byte[1],' ts=1</outputElement>
     <outputTs>1</outputTs>
     <stubIds>{}</stubIds>
     <searchedTuple>null</searchedTuple>
     <isPlusProcessed>false</isPlusProcessed>
     <isUpdateTuple>false</isUpdateTuple>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>1</numExecutions>
      <numInputs>1</numInputs>
      <numOutputs>1</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>1</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </RelSourceState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter57.xml</SharedQueueWriter>
    <RelationSynopsisImpl PhyId="0" StubId="0">
     <RelStoreImpl>oracle/work/cep/diag/trc/RelStoreImpl58.xml</RelStoreImpl>
    </RelationSynopsisImpl>
   </RelSource>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueWriter levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="2" TargetName="SharedQueueWriter">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueWriterId>1</SharedQueueWriterId>
   <SharedQueueWriterPhyId>2</SharedQueueWriterPhyId>
   <numElementsWriter>0</numElementsWriter>
   <numPosElementsWriter>0</numPosElementsWriter>
   <numNegElementsWriter>0</numNegElementsWriter>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter59.xml</SharedQueueWriter>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=STORE event=DUMP target=WinStoreImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="1" TargetName="WinStoreImpl">
  <Level Name="STORE_STATS" Value="4">
  </Level>
  <Level Name="STORE_DUMPELEMS" Value="6">
   <WinStoreImpl>oracle/work/cep/diag/trc/WinStoreImpl60.xml</WinStoreImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=StreamSource levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="1" TargetName="tklog_S#1">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <StreamSource Type="EXEC_STREAM_SOURCE" Name="tklog_S#1">
    <StreamSourceState>
     <lastInputTs>0</lastInputTs>
     <lastOutputTs>0</lastOutputTs>
     <inputTs>0</inputTs>
     <inputTuple>null</inputTuple>
     <outputTuple>null</outputTuple>
     <timestampTuple>null</timestampTuple>
      null ts=0</outputElement>
     <outputTs>0</outputTs>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </StreamSourceState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter61.xml</SharedQueueWriter>
   </StreamSource>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueReader levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="4" TargetName="SharedQueueReader">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueReaderId>0</SharedQueueReaderId>
   <SharedQueueReaderPhyId>4</SharedQueueReaderPhyId>
   <numElementsReader>0</numElementsReader>
   <numPosElementsReader>0</numPosElementsReader>
   <numNegElementsReader>0</numNegElementsReader>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueReader>oracle/work/cep/diag/trc/SharedQueueReader62.xml</SharedQueueReader>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueWriter levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="3" TargetName="SharedQueueWriter">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueWriterId>2</SharedQueueWriterId>
   <SharedQueueWriterPhyId>3</SharedQueueWriterPhyId>
   <numElementsWriter>0</numElementsWriter>
   <numPosElementsWriter>0</numPosElementsWriter>
   <numNegElementsWriter>0</numNegElementsWriter>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter63.xml</SharedQueueWriter>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=SYNOPSIS event=DUMP target=WindowSynopsisImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="1" TargetName="WindowSynopsisImpl">
  <Level Name="SYNOPSIS_STATS" Value="4">
  </Level>
  <Level Name="SYNOPSIS_DUMPELEMS" Value="6">
   <WindowSynopsisImpl PhyId="1" StubId="0">
    <WinStoreImpl>oracle/work/cep/diag/trc/WinStoreImpl64.xml</WinStoreImpl>
   </WindowSynopsisImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=RangeWindow levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="2" TargetName="PO_RANGE_WIN#2">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <RangeWindow Type="EXEC_RANGE_WIN" Name="PO_RANGE_WIN#2">
    <RangeWindowState>
     <lastOutputTs>0</lastOutputTs>
     <inputElement>null</inputElement>
     <inputTuple>null</inputTuple>
     <inputKind>null</inputKind>
     <inputTs>0</inputTs>
      null ts=0</outputElement>
     <outputTs>0</outputTs>
     <expiredTuple>null</expiredTuple>
     <expiredTimeStamp>0</expiredTimeStamp>
     <batchEndTime>0</batchEndTime>
     <visTs>1969-12-31 16:00:00.0</visTs>
     <expTs>1969-12-31 16:00:00.0</expTs>
     <tempTs>1969-12-31 16:00:00.0</tempTs>
     <state>S_PROPAGATE_OLD_DATA</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>S_INIT</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </RangeWindowState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter65.xml</SharedQueueWriter>
    <WindowSynopsisImpl PhyId="1" StubId="0">
     <WinStoreImpl>oracle/work/cep/diag/trc/WinStoreImpl66.xml</WinStoreImpl>
    </WindowSynopsisImpl>
   </RangeWindow>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueReader levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="8" TargetName="SharedQueueReader">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueReaderId>3</SharedQueueReaderId>
   <SharedQueueReaderPhyId>8</SharedQueueReaderPhyId>
   <numElementsReader>0</numElementsReader>
   <numPosElementsReader>0</numPosElementsReader>
   <numNegElementsReader>0</numNegElementsReader>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueReader>oracle/work/cep/diag/trc/SharedQueueReader67.xml</SharedQueueReader>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=Output levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="3" TargetName="PO_OUTPUT#3">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <Output Type="EXEC_OUTPUT" Name="PO_OUTPUT#3">
    <OutputState>
     <inputElement>null</inputElement>
     <outputTuple>null</outputTuple>
     <inputTuple>null</inputTuple>
     <inputTs>0</inputTs>
     <searchedTuple>null</searchedTuple>
     <plusIter>null</plusIter>
     <minusIter>null</minusIter>
     <outIter>null</outIter>
     <plusTuple>null</plusTuple>
     <minusTuple>null</minusTuple>
     <outTuple>null</outTuple>
     <outState>S_INIT</outState>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </OutputState>
   </Output>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueReader levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="6" TargetName="SharedQueueReader">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueReaderId>1</SharedQueueReaderId>
   <SharedQueueReaderPhyId>6</SharedQueueReaderPhyId>
   <numElementsReader>1</numElementsReader>
   <numPosElementsReader>1</numPosElementsReader>
   <numNegElementsReader>0</numNegElementsReader>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueReader>oracle/work/cep/diag/trc/SharedQueueReader68.xml</SharedQueueReader>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueReader levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="7" TargetName="SharedQueueReader">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueReaderId>2</SharedQueueReaderId>
   <SharedQueueReaderPhyId>7</SharedQueueReaderPhyId>
   <numElementsReader>0</numElementsReader>
   <numPosElementsReader>0</numPosElementsReader>
   <numNegElementsReader>0</numNegElementsReader>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueReader>oracle/work/cep/diag/trc/SharedQueueReader69.xml</SharedQueueReader>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueWriter levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="5" TargetName="SharedQueueWriter">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueWriterId>3</SharedQueueWriterId>
   <SharedQueueWriterPhyId>5</SharedQueueWriterPhyId>
   <numElementsWriter>0</numElementsWriter>
   <numPosElementsWriter>0</numPosElementsWriter>
   <numNegElementsWriter>0</numNegElementsWriter>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter70.xml</SharedQueueWriter>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=SYNOPSIS event=DUMP target=RelationSynopsisImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="2" TargetName="RelationSynopsisImpl">
  <Level Name="SYNOPSIS_STATS" Value="4">
  </Level>
  <Level Name="SYNOPSIS_DUMPELEMS" Value="6">
   <RelationSynopsisImpl PhyId="2" StubId="1">
    <WinStoreImpl>oracle/work/cep/diag/trc/WinStoreImpl71.xml</WinStoreImpl>
   </RelationSynopsisImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=INDEX event=DUMP target=HashIndex levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="5" TargetName="HashIndex">
  <Level Name="INDEX_STATS" Value="4">
  </Level>
  <Level Name="INDEX_DUMPELEMS" Value="6">
   <HashIndex>oracle/work/cep/diag/trc/HashIndex72.xml</HashIndex>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=SYNOPSIS event=DUMP target=RelationSynopsisImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="3" TargetName="RelationSynopsisImpl">
  <Level Name="SYNOPSIS_STATS" Value="4">
  </Level>
  <Level Name="SYNOPSIS_DUMPELEMS" Value="6">
   <RelationSynopsisImpl PhyId="3" StubId="1">
    <RelStoreImpl>oracle/work/cep/diag/trc/RelStoreImpl73.xml</RelStoreImpl>
   </RelationSynopsisImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=INDEX event=DUMP target=HashIndex levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="4" TargetName="HashIndex">
  <Level Name="INDEX_STATS" Value="4">
  </Level>
  <Level Name="INDEX_DUMPELEMS" Value="6">
   <HashIndex>oracle/work/cep/diag/trc/HashIndex74.xml</HashIndex>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=SYNOPSIS event=DUMP target=LineageSynopsisImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="4" TargetName="LineageSynopsisImpl">
  <Level Name="SYNOPSIS_STATS" Value="4">
  </Level>
  <Level Name="SYNOPSIS_DUMPELEMS" Value="6">
   <LineageSynopsisImpl PhyId="4" StubId="0">
    <LineageStoreImpl>oracle/work/cep/diag/trc/LineageStoreImpl75.xml</LineageStoreImpl>
   </LineageSynopsisImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=STORE event=DUMP target=LineageStoreImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="2" TargetName="LineageStoreImpl">
  <Level Name="STORE_STATS" Value="4">
  </Level>
  <Level Name="STORE_DUMPELEMS" Value="6">
   <LineageStoreImpl>oracle/work/cep/diag/trc/LineageStoreImpl77.xml</LineageStoreImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=INDEX event=DUMP target=HashIndex levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="3" TargetName="HashIndex">
  <Level Name="INDEX_STATS" Value="4">
  </Level>
  <Level Name="INDEX_DUMPELEMS" Value="6">
   <HashIndex>oracle/work/cep/diag/trc/HashIndex79.xml</HashIndex>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=BinJoin levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="4" TargetName="PO_JOIN_PROJECT#4">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <BinJoin Type="EXEC_BIN_JOIN" Name="PO_JOIN_PROJECT#4">
    <BinJoinState>
     <lastOutputTs>0</lastOutputTs>
     <lastOuterTs>0</lastOuterTs>
     <lastInnerTs>0</lastInnerTs>
     <outerTs>0</outerTs>
     <innerTs>0</innerTs>
     <outerMinTs>0</outerMinTs>
     <innerMinTs>0</innerMinTs>
     <outerElement>null</outerElement>
     <innerElement>null</innerElement>
      null ts=0</outputElement>
     <outerTuple>null</outerTuple>
     <innerTuple>null</innerTuple>
     <outputTuple>null</outputTuple>
     <tmpState>null</tmpState>
     <tmpOuterTuple>null</tmpOuterTuple>
     <tmpInnerTuple>null</tmpInnerTuple>
     <outerPeekElement>null</outerPeekElement>
     <innerPeekElement>null</innerPeekElement>
     <nextOutputTs>0</nextOutputTs>
     <outputTs>0</outputTs>
     <nextElementKind>null</nextElementKind>
     <tmpElementKind>null</tmpElementKind>
     <outerMatchCount>0</outerMatchCount>
     <innerMatchCount>0</innerMatchCount>
     <innerScanEmpty>false</innerScanEmpty>
     <outerScanEmpty>false</outerScanEmpty>
     <outputNegNullInner>false</outputNegNullInner>
     <outputPosNullInner>false</outputPosNullInner>
     <outputNegOuterNull>false</outputNegOuterNull>
     <outputPosOuterNull>false</outputPosOuterNull>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </BinJoinState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter80.xml</SharedQueueWriter>
    <RelationSynopsisImpl PhyId="2" StubId="1">
     <WinStoreImpl>oracle/work/cep/diag/trc/WinStoreImpl81.xml</WinStoreImpl>
    </RelationSynopsisImpl>
    <RelationSynopsisImpl PhyId="3" StubId="1">
     <RelStoreImpl>oracle/work/cep/diag/trc/RelStoreImpl82.xml</RelStoreImpl>
    </RelationSynopsisImpl>
    <LineageSynopsisImpl PhyId="4" StubId="0">
     <LineageStoreImpl>oracle/work/cep/diag/trc/LineageStoreImpl83.xml</LineageStoreImpl>
    </LineageSynopsisImpl>
   </BinJoin>
   <InnerMatchHash >
   </InnerMatchHash>
   <OuterMatchHash >
   </OuterMatchHash>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueWriter levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="11" TargetName="SharedQueueWriter">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueWriterId>5</SharedQueueWriterId>
   <SharedQueueWriterPhyId>11</SharedQueueWriterPhyId>
   <numElementsWriter>250</numElementsWriter>
   <numPosElementsWriter>250</numPosElementsWriter>
   <numNegElementsWriter>0</numNegElementsWriter>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter85.xml</SharedQueueWriter>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=SYNOPSIS event=DUMP target=RelationSynopsisImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="6" TargetName="RelationSynopsisImpl">
  <Level Name="SYNOPSIS_STATS" Value="4">
  </Level>
  <Level Name="SYNOPSIS_DUMPELEMS" Value="6">
   <RelationSynopsisImpl PhyId="6" StubId="0">
    <RelStoreImpl>oracle/work/cep/diag/trc/RelStoreImpl86.xml</RelStoreImpl>
   </RelationSynopsisImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=INDEX event=DUMP target=HashIndex levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="7" TargetName="HashIndex">
  <Level Name="INDEX_STATS" Value="4">
  </Level>
  <Level Name="INDEX_DUMPELEMS" Value="6">
   <HashIndex>oracle/work/cep/diag/trc/HashIndex87.xml</HashIndex>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=STORE event=DUMP target=RelStoreImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="4" TargetName="RelStoreImpl">
  <Level Name="STORE_STATS" Value="4">
  </Level>
  <Level Name="STORE_DUMPELEMS" Value="6">
   <RelStoreImpl>oracle/work/cep/diag/trc/RelStoreImpl88.xml</RelStoreImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=RelSource levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="5" TargetName="tklog_R1#5">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <RelSource Type="EXEC_RELN_SOURCE" Name="tklog_R1#5">
    <RelSourceState>
     <lastOutputTs>251</lastOutputTs>
     <inputTs>251</inputTs>
     <inputTuple>null</inputTuple>
     <outputTuple>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </outputTuple>
     <minusTuple>null</minusTuple>
     E_PLUS tuple= '10,0.3,byte[1],' ts=251</outputElement>
     <outputTs>251</outputTs>
     <stubIds>{}</stubIds>
     <searchedTuple>null</searchedTuple>
     <isPlusProcessed>false</isPlusProcessed>
     <isUpdateTuple>false</isUpdateTuple>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>1</numExecutions>
      <numInputs>250</numInputs>
      <numOutputs>250</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>S_INIT</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>251</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </RelSourceState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter89.xml</SharedQueueWriter>
    <RelationSynopsisImpl PhyId="6" StubId="0">
     <RelStoreImpl>oracle/work/cep/diag/trc/RelStoreImpl90.xml</RelStoreImpl>
    </RelationSynopsisImpl>
   </RelSource>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueReader levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="10" TargetName="SharedQueueReader">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueReaderId>4</SharedQueueReaderId>
   <SharedQueueReaderPhyId>10</SharedQueueReaderPhyId>
   <numElementsReader>0</numElementsReader>
   <numPosElementsReader>0</numPosElementsReader>
   <numNegElementsReader>0</numNegElementsReader>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueReader>oracle/work/cep/diag/trc/SharedQueueReader91.xml</SharedQueueReader>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueWriter levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="9" TargetName="SharedQueueWriter">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueWriterId>4</SharedQueueWriterId>
   <SharedQueueWriterPhyId>9</SharedQueueWriterPhyId>
   <numElementsWriter>0</numElementsWriter>
   <numPosElementsWriter>0</numPosElementsWriter>
   <numNegElementsWriter>0</numNegElementsWriter>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter92.xml</SharedQueueWriter>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=SYNOPSIS event=DUMP target=LineageSynopsisImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="5" TargetName="LineageSynopsisImpl">
  <Level Name="SYNOPSIS_STATS" Value="4">
  </Level>
  <Level Name="SYNOPSIS_DUMPELEMS" Value="6">
   <LineageSynopsisImpl PhyId="5" StubId="0">
    <LineageStoreImpl>oracle/work/cep/diag/trc/LineageStoreImpl93.xml</LineageStoreImpl>
   </LineageSynopsisImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=STORE event=DUMP target=LineageStoreImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="3" TargetName="LineageStoreImpl">
  <Level Name="STORE_STATS" Value="4">
  </Level>
  <Level Name="STORE_DUMPELEMS" Value="6">
   <LineageStoreImpl>oracle/work/cep/diag/trc/LineageStoreImpl95.xml</LineageStoreImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=INDEX event=DUMP target=HashIndex levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="6" TargetName="HashIndex">
  <Level Name="INDEX_STATS" Value="4">
  </Level>
  <Level Name="INDEX_DUMPELEMS" Value="6">
   <HashIndex>oracle/work/cep/diag/trc/HashIndex97.xml</HashIndex>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=Project levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="6" TargetName="PO_PROJECT#6">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <Project Type="EXEC_PROJECT" Name="PO_PROJECT#6">
    <ProjectState>
     <inputTs>0</inputTs>
     <lastOutputTs>0</lastOutputTs>
     <inputElement>null</inputElement>
     <inputTuple>null</inputTuple>
      null ts=0</outputElement>
     <outputTuple>null</outputTuple>
     <outputKind>null</outputKind>
     <tupleLineage >
      <tupleLineageElem>null</tupleLineageElem>
     </tupleLineage>
     <scan>null</scan>
     <state>S_PROPAGATE_OLD_DATA</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>S_INIT</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </ProjectState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter98.xml</SharedQueueWriter>
    <LineageSynopsisImpl PhyId="5" StubId="0">
     <LineageStoreImpl>oracle/work/cep/diag/trc/LineageStoreImpl99.xml</LineageStoreImpl>
    </LineageSynopsisImpl>
   </Project>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueReader levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="13" TargetName="SharedQueueReader">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueReaderId>5</SharedQueueReaderId>
   <SharedQueueReaderPhyId>13</SharedQueueReaderPhyId>
   <numElementsReader>250</numElementsReader>
   <numPosElementsReader>250</numPosElementsReader>
   <numNegElementsReader>0</numNegElementsReader>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueReader>oracle/work/cep/diag/trc/SharedQueueReader101.xml</SharedQueueReader>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueReader levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="14" TargetName="SharedQueueReader">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueReaderId>6</SharedQueueReaderId>
   <SharedQueueReaderPhyId>14</SharedQueueReaderPhyId>
   <numElementsReader>0</numElementsReader>
   <numPosElementsReader>0</numPosElementsReader>
   <numNegElementsReader>0</numNegElementsReader>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueReader>oracle/work/cep/diag/trc/SharedQueueReader102.xml</SharedQueueReader>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueWriter levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="12" TargetName="SharedQueueWriter">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueWriterId>6</SharedQueueWriterId>
   <SharedQueueWriterPhyId>12</SharedQueueWriterPhyId>
   <numElementsWriter>0</numElementsWriter>
   <numPosElementsWriter>0</numPosElementsWriter>
   <numNegElementsWriter>0</numNegElementsWriter>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter103.xml</SharedQueueWriter>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=SYNOPSIS event=DUMP target=LineageSynopsisImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="7" TargetName="LineageSynopsisImpl">
  <Level Name="SYNOPSIS_STATS" Value="4">
  </Level>
  <Level Name="SYNOPSIS_DUMPELEMS" Value="6">
   <LineageSynopsisImpl PhyId="7" StubId="0">
    <LineageStoreImpl>oracle/work/cep/diag/trc/LineageStoreImpl104.xml</LineageStoreImpl>
   </LineageSynopsisImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=STORE event=DUMP target=LineageStoreImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="5" TargetName="LineageStoreImpl">
  <Level Name="STORE_STATS" Value="4">
  </Level>
  <Level Name="STORE_DUMPELEMS" Value="6">
   <LineageStoreImpl>oracle/work/cep/diag/trc/LineageStoreImpl106.xml</LineageStoreImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=INDEX event=DUMP target=HashIndex levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="9" TargetName="HashIndex">
  <Level Name="INDEX_STATS" Value="4">
  </Level>
  <Level Name="INDEX_DUMPELEMS" Value="6">
   <HashIndex>oracle/work/cep/diag/trc/HashIndex108.xml</HashIndex>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=Union levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="7" TargetName="PO_UNION#7">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <Union Type="EXEC_UNION" Name="PO_UNION#7">
    <UnionState>
     <lastOutputTs>0</lastOutputTs>
     <lastLeftTs>0</lastLeftTs>
     <lastRightTs>0</lastRightTs>
     <leftTs>0</leftTs>
     <rightTs>0</rightTs>
     <leftMinTs>0</leftMinTs>
     <rightMinTs>0</rightMinTs>
     <leftElement>null</leftElement>
     <rightElement>null</rightElement>
      null ts=0</outputElement>
     <leftTuple>null</leftTuple>
     <rightTuple>null</rightTuple>
     <outputTuple>null</outputTuple>
     <nextOutputTs>0</nextOutputTs>
     <outputTs>0</outputTs>
     <nextElementKind>null</nextElementKind>
     <tmpState>null</tmpState>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </UnionState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter109.xml</SharedQueueWriter>
    <LineageSynopsisImpl PhyId="7" StubId="0">
     <LineageStoreImpl>oracle/work/cep/diag/trc/LineageStoreImpl110.xml</LineageStoreImpl>
    </LineageSynopsisImpl>
   </Union>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueReader levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="15" TargetName="SharedQueueReader">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueReaderId>7</SharedQueueReaderId>
   <SharedQueueReaderPhyId>15</SharedQueueReaderPhyId>
   <numElementsReader>0</numElementsReader>
   <numPosElementsReader>0</numPosElementsReader>
   <numNegElementsReader>0</numNegElementsReader>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueReader>oracle/work/cep/diag/trc/SharedQueueReader112.xml</SharedQueueReader>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=Output levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="8" TargetName="PO_OUTPUT#8">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <Output Type="EXEC_OUTPUT" Name="PO_OUTPUT#8">
    <OutputState>
     <inputElement>null</inputElement>
     <outputTuple>null</outputTuple>
     <inputTuple>null</inputTuple>
     <inputTs>0</inputTs>
     <searchedTuple>null</searchedTuple>
     <plusIter>null</plusIter>
     <minusIter>null</minusIter>
     <outIter>null</outIter>
     <plusTuple>null</plusTuple>
     <minusTuple>null</minusTuple>
     <outTuple>null</outTuple>
     <outState>S_INIT</outState>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </OutputState>
   </Output>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueReader levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="17" TargetName="SharedQueueReader">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueReaderId>8</SharedQueueReaderId>
   <SharedQueueReaderPhyId>17</SharedQueueReaderPhyId>
   <numElementsReader>250</numElementsReader>
   <numPosElementsReader>250</numPosElementsReader>
   <numNegElementsReader>0</numNegElementsReader>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueReader>oracle/work/cep/diag/trc/SharedQueueReader113.xml</SharedQueueReader>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueReader levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="18" TargetName="SharedQueueReader">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueReaderId>9</SharedQueueReaderId>
   <SharedQueueReaderPhyId>18</SharedQueueReaderPhyId>
   <numElementsReader>0</numElementsReader>
   <numPosElementsReader>0</numPosElementsReader>
   <numNegElementsReader>0</numNegElementsReader>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueReader>oracle/work/cep/diag/trc/SharedQueueReader114.xml</SharedQueueReader>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueWriter levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="16" TargetName="SharedQueueWriter">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueWriterId>7</SharedQueueWriterId>
   <SharedQueueWriterPhyId>16</SharedQueueWriterPhyId>
   <numElementsWriter>0</numElementsWriter>
   <numPosElementsWriter>0</numPosElementsWriter>
   <numNegElementsWriter>0</numNegElementsWriter>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter115.xml</SharedQueueWriter>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=SYNOPSIS event=DUMP target=RelationSynopsisImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="8" TargetName="RelationSynopsisImpl">
  <Level Name="SYNOPSIS_STATS" Value="4">
  </Level>
  <Level Name="SYNOPSIS_DUMPELEMS" Value="6">
   <RelationSynopsisImpl PhyId="8" StubId="0">
    <RelStoreImpl>oracle/work/cep/diag/trc/RelStoreImpl116.xml</RelStoreImpl>
   </RelationSynopsisImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=INDEX event=DUMP target=HashIndex levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="11" TargetName="HashIndex">
  <Level Name="INDEX_STATS" Value="4">
  </Level>
  <Level Name="INDEX_DUMPELEMS" Value="6">
   <HashIndex>oracle/work/cep/diag/trc/HashIndex117.xml</HashIndex>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=STORE event=DUMP target=RelStoreImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="6" TargetName="RelStoreImpl">
  <Level Name="STORE_STATS" Value="4">
  </Level>
  <Level Name="STORE_DUMPELEMS" Value="6">
   <RelStoreImpl>oracle/work/cep/diag/trc/RelStoreImpl118.xml</RelStoreImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=STORE event=DUMP target=RelStoreImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="7" TargetName="RelStoreImpl">
  <Level Name="STORE_STATS" Value="4">
  </Level>
  <Level Name="STORE_DUMPELEMS" Value="6">
   <RelStoreImpl>oracle/work/cep/diag/trc/RelStoreImpl119.xml</RelStoreImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=Except levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="9" TargetName="PO_EXCEPT#9">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <Except Type="EXEC_EXCEPT" Name="PO_EXCEPT#9">
    <ExceptState>
     <tmpState>null</tmpState>
     <lastOutputTs>0</lastOutputTs>
     <lastLeftTs>0</lastLeftTs>
     <lastRightTs>0</lastRightTs>
     <leftTs>0</leftTs>
     <rightTs>0</rightTs>
     <leftMinTs>0</leftMinTs>
     <rightMinTs>0</rightMinTs>
     <leftElement>null</leftElement>
     <rightElement>null</rightElement>
     <outScanId>0</outScanId>
     <countScanId>0</countScanId>
     <leftTuple>null</leftTuple>
     <rightTuple>null</rightTuple>
     <countTuple>null</countTuple>
     <outputTuple>null</outputTuple>
     <nextOutputTs>0</nextOutputTs>
     <outputTs>0</outputTs>
     <nextElementKind>null</nextElementKind>
      null ts=0</outputElement>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </ExceptState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter120.xml</SharedQueueWriter>
    <RelationSynopsisImpl PhyId="8" StubId="0">
     <RelStoreImpl>oracle/work/cep/diag/trc/RelStoreImpl121.xml</RelStoreImpl>
    </RelationSynopsisImpl>
   </Except>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueReader levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="19" TargetName="SharedQueueReader">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueReaderId>10</SharedQueueReaderId>
   <SharedQueueReaderPhyId>19</SharedQueueReaderPhyId>
   <numElementsReader>0</numElementsReader>
   <numPosElementsReader>0</numPosElementsReader>
   <numNegElementsReader>0</numNegElementsReader>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueReader>oracle/work/cep/diag/trc/SharedQueueReader122.xml</SharedQueueReader>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=Output levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="10" TargetName="PO_OUTPUT#10">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <Output Type="EXEC_OUTPUT" Name="PO_OUTPUT#10">
    <OutputState>
     <inputElement>null</inputElement>
     <outputTuple>null</outputTuple>
     <inputTuple>null</inputTuple>
     <inputTs>0</inputTs>
     <searchedTuple>null</searchedTuple>
     <plusIter>null</plusIter>
     <minusIter>null</minusIter>
     <outIter>null</outIter>
     <plusTuple>null</plusTuple>
     <minusTuple>null</minusTuple>
     <outTuple>null</outTuple>
     <outState>S_INIT</outState>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </OutputState>
   </Output>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueWriter levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="20" TargetName="SharedQueueWriter">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueWriterId>8</SharedQueueWriterId>
   <SharedQueueWriterPhyId>20</SharedQueueWriterPhyId>
   <numElementsWriter>0</numElementsWriter>
   <numPosElementsWriter>0</numPosElementsWriter>
   <numNegElementsWriter>0</numNegElementsWriter>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter123.xml</SharedQueueWriter>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=STORE event=DUMP target=WinStoreImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="8" TargetName="WinStoreImpl">
  <Level Name="STORE_STATS" Value="4">
  </Level>
  <Level Name="STORE_DUMPELEMS" Value="6">
   <WinStoreImpl>oracle/work/cep/diag/trc/WinStoreImpl124.xml</WinStoreImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=StreamSource levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="11" TargetName="tklog_S1#11">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <StreamSource Type="EXEC_STREAM_SOURCE" Name="tklog_S1#11">
    <StreamSourceState>
     <lastInputTs>0</lastInputTs>
     <lastOutputTs>0</lastOutputTs>
     <inputTs>0</inputTs>
     <inputTuple>null</inputTuple>
     <outputTuple>null</outputTuple>
     <timestampTuple>null</timestampTuple>
      null ts=0</outputElement>
     <outputTs>0</outputTs>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </StreamSourceState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter125.xml</SharedQueueWriter>
   </StreamSource>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueReader levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="22" TargetName="SharedQueueReader">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueReaderId>11</SharedQueueReaderId>
   <SharedQueueReaderPhyId>22</SharedQueueReaderPhyId>
   <numElementsReader>0</numElementsReader>
   <numPosElementsReader>0</numPosElementsReader>
   <numNegElementsReader>0</numNegElementsReader>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueReader>oracle/work/cep/diag/trc/SharedQueueReader126.xml</SharedQueueReader>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueWriter levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="21" TargetName="SharedQueueWriter">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueWriterId>9</SharedQueueWriterId>
   <SharedQueueWriterPhyId>21</SharedQueueWriterPhyId>
   <numElementsWriter>0</numElementsWriter>
   <numPosElementsWriter>0</numPosElementsWriter>
   <numNegElementsWriter>0</numNegElementsWriter>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter127.xml</SharedQueueWriter>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=SYNOPSIS event=DUMP target=WindowSynopsisImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="10" TargetName="WindowSynopsisImpl">
  <Level Name="SYNOPSIS_STATS" Value="4">
  </Level>
  <Level Name="SYNOPSIS_DUMPELEMS" Value="6">
   <WindowSynopsisImpl PhyId="10" StubId="0">
    <WinStoreImpl>oracle/work/cep/diag/trc/WinStoreImpl128.xml</WinStoreImpl>
   </WindowSynopsisImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=RangeWindow levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="12" TargetName="PO_RANGE_WIN#12">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <RangeWindow Type="EXEC_RANGE_WIN" Name="PO_RANGE_WIN#12">
    <RangeWindowState>
     <lastOutputTs>0</lastOutputTs>
     <inputElement>null</inputElement>
     <inputTuple>null</inputTuple>
     <inputKind>null</inputKind>
     <inputTs>0</inputTs>
      null ts=0</outputElement>
     <outputTs>0</outputTs>
     <expiredTuple>null</expiredTuple>
     <expiredTimeStamp>0</expiredTimeStamp>
     <batchEndTime>0</batchEndTime>
     <visTs>1969-12-31 16:00:00.0</visTs>
     <expTs>1969-12-31 16:00:00.0</expTs>
     <tempTs>1969-12-31 16:00:00.0</tempTs>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </RangeWindowState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter129.xml</SharedQueueWriter>
    <WindowSynopsisImpl PhyId="10" StubId="0">
     <WinStoreImpl>oracle/work/cep/diag/trc/WinStoreImpl130.xml</WinStoreImpl>
    </WindowSynopsisImpl>
   </RangeWindow>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueReader levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="24" TargetName="SharedQueueReader">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueReaderId>12</SharedQueueReaderId>
   <SharedQueueReaderPhyId>24</SharedQueueReaderPhyId>
   <numElementsReader>0</numElementsReader>
   <numPosElementsReader>0</numPosElementsReader>
   <numNegElementsReader>0</numNegElementsReader>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueReader>oracle/work/cep/diag/trc/SharedQueueReader131.xml</SharedQueueReader>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueWriter levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="23" TargetName="SharedQueueWriter">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueWriterId>10</SharedQueueWriterId>
   <SharedQueueWriterPhyId>23</SharedQueueWriterPhyId>
   <numElementsWriter>0</numElementsWriter>
   <numPosElementsWriter>0</numPosElementsWriter>
   <numNegElementsWriter>0</numNegElementsWriter>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter132.xml</SharedQueueWriter>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=SYNOPSIS event=DUMP target=LineageSynopsisImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="11" TargetName="LineageSynopsisImpl">
  <Level Name="SYNOPSIS_STATS" Value="4">
  </Level>
  <Level Name="SYNOPSIS_DUMPELEMS" Value="6">
   <LineageSynopsisImpl PhyId="11" StubId="0">
    <LineageStoreImpl>oracle/work/cep/diag/trc/LineageStoreImpl133.xml</LineageStoreImpl>
   </LineageSynopsisImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=STORE event=DUMP target=LineageStoreImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="9" TargetName="LineageStoreImpl">
  <Level Name="STORE_STATS" Value="4">
  </Level>
  <Level Name="STORE_DUMPELEMS" Value="6">
   <LineageStoreImpl>oracle/work/cep/diag/trc/LineageStoreImpl135.xml</LineageStoreImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=INDEX event=DUMP target=HashIndex levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="13" TargetName="HashIndex">
  <Level Name="INDEX_STATS" Value="4">
  </Level>
  <Level Name="INDEX_DUMPELEMS" Value="6">
   <HashIndex>oracle/work/cep/diag/trc/HashIndex137.xml</HashIndex>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=Project levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="13" TargetName="PO_PROJECT#13">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <Project Type="EXEC_PROJECT" Name="PO_PROJECT#13">
    <ProjectState>
     <inputTs>0</inputTs>
     <lastOutputTs>0</lastOutputTs>
     <inputElement>null</inputElement>
     <inputTuple>null</inputTuple>
      null ts=0</outputElement>
     <outputTuple>null</outputTuple>
     <outputKind>null</outputKind>
     <tupleLineage >
      <tupleLineageElem>null</tupleLineageElem>
     </tupleLineage>
     <scan>null</scan>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </ProjectState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter138.xml</SharedQueueWriter>
    <LineageSynopsisImpl PhyId="11" StubId="0">
     <LineageStoreImpl>oracle/work/cep/diag/trc/LineageStoreImpl139.xml</LineageStoreImpl>
    </LineageSynopsisImpl>
   </Project>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueReader levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="26" TargetName="SharedQueueReader">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueReaderId>13</SharedQueueReaderId>
   <SharedQueueReaderPhyId>26</SharedQueueReaderPhyId>
   <numElementsReader>0</numElementsReader>
   <numPosElementsReader>0</numPosElementsReader>
   <numNegElementsReader>0</numNegElementsReader>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueReader>oracle/work/cep/diag/trc/SharedQueueReader141.xml</SharedQueueReader>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueWriter levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="25" TargetName="SharedQueueWriter">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueWriterId>11</SharedQueueWriterId>
   <SharedQueueWriterPhyId>25</SharedQueueWriterPhyId>
   <numElementsWriter>0</numElementsWriter>
   <numPosElementsWriter>0</numPosElementsWriter>
   <numNegElementsWriter>0</numNegElementsWriter>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter142.xml</SharedQueueWriter>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=SYNOPSIS event=DUMP target=RelationSynopsisImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="12" TargetName="RelationSynopsisImpl">
  <Level Name="SYNOPSIS_STATS" Value="4">
  </Level>
  <Level Name="SYNOPSIS_DUMPELEMS" Value="6">
   <RelationSynopsisImpl PhyId="12" StubId="0">
    <RelStoreImpl>oracle/work/cep/diag/trc/RelStoreImpl143.xml</RelStoreImpl>
   </RelationSynopsisImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=INDEX event=DUMP target=HashIndex levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="14" TargetName="HashIndex">
  <Level Name="INDEX_STATS" Value="4">
  </Level>
  <Level Name="INDEX_DUMPELEMS" Value="6">
   <HashIndex>oracle/work/cep/diag/trc/HashIndex144.xml</HashIndex>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=STORE event=DUMP target=WinStoreImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="10" TargetName="WinStoreImpl">
  <Level Name="STORE_STATS" Value="4">
  </Level>
  <Level Name="STORE_DUMPELEMS" Value="6">
   <WinStoreImpl>oracle/work/cep/diag/trc/WinStoreImpl145.xml</WinStoreImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=STORE event=DUMP target=RelStoreImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="11" TargetName="RelStoreImpl">
  <Level Name="STORE_STATS" Value="4">
  </Level>
  <Level Name="STORE_DUMPELEMS" Value="6">
   <RelStoreImpl>oracle/work/cep/diag/trc/RelStoreImpl146.xml</RelStoreImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=IStream levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="14" TargetName="PO_ISTREAM#14">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <IStream Type="EXEC_ISTREAM" Name="PO_ISTREAM#14">
    <XStreamState>
     <inputTs>0</inputTs>
     <lastInputTs>0</lastInputTs>
     <nextOutputTs>0</nextOutputTs>
     <processSilnReln>false</processSilnReln>
     <inputElement>null</inputElement>
     <inputTuple>null</inputTuple>
     <outputTs>0</outputTs>
      null ts=0</outputElement>
     <outputTuple>null</outputTuple>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </XStreamState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter147.xml</SharedQueueWriter>
    <RelationSynopsisImpl PhyId="12" StubId="0">
     <RelStoreImpl>oracle/work/cep/diag/trc/RelStoreImpl148.xml</RelStoreImpl>
    </RelationSynopsisImpl>
   </IStream>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueReader levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="28" TargetName="SharedQueueReader">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueReaderId>14</SharedQueueReaderId>
   <SharedQueueReaderPhyId>28</SharedQueueReaderPhyId>
   <numElementsReader>0</numElementsReader>
   <numPosElementsReader>0</numPosElementsReader>
   <numNegElementsReader>0</numNegElementsReader>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueReader>oracle/work/cep/diag/trc/SharedQueueReader149.xml</SharedQueueReader>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueWriter levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="27" TargetName="SharedQueueWriter">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueWriterId>12</SharedQueueWriterId>
   <SharedQueueWriterPhyId>27</SharedQueueWriterPhyId>
   <numElementsWriter>0</numElementsWriter>
   <numPosElementsWriter>0</numPosElementsWriter>
   <numNegElementsWriter>0</numNegElementsWriter>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter150.xml</SharedQueueWriter>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=STORE event=DUMP target=WinStoreImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="12" TargetName="WinStoreImpl">
  <Level Name="STORE_STATS" Value="4">
  </Level>
  <Level Name="STORE_DUMPELEMS" Value="6">
   <WinStoreImpl>oracle/work/cep/diag/trc/WinStoreImpl151.xml</WinStoreImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=ViewStrmSrc levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="15" TargetName="tklog_v2#15">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <ViewStrmSrc Type="EXEC_VIEW_STRM_SRC" Name="tklog_v2#15">
    <ViewStrmSrcState>
     <inputElement>null</inputElement>
      null ts=0</outputElement>
     <inputTs>0</inputTs>
     <lastInputTs>0</lastInputTs>
     <lastOutputTs>0</lastOutputTs>
     <inputTuple>null</inputTuple>
     <outputTuple>null</outputTuple>
     <outputKind>null</outputKind>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </ViewStrmSrcState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter152.xml</SharedQueueWriter>
   </ViewStrmSrc>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueReader levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="29" TargetName="SharedQueueReader">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueReaderId>15</SharedQueueReaderId>
   <SharedQueueReaderPhyId>29</SharedQueueReaderPhyId>
   <numElementsReader>0</numElementsReader>
   <numPosElementsReader>0</numPosElementsReader>
   <numNegElementsReader>0</numNegElementsReader>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueReader>oracle/work/cep/diag/trc/SharedQueueReader153.xml</SharedQueueReader>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=Output levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="16" TargetName="PO_OUTPUT#16">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <Output Type="EXEC_OUTPUT" Name="PO_OUTPUT#16">
    <OutputState>
     <inputElement>null</inputElement>
     <outputTuple>null</outputTuple>
     <inputTuple>null</inputTuple>
     <inputTs>0</inputTs>
     <searchedTuple>null</searchedTuple>
     <plusIter>null</plusIter>
     <minusIter>null</minusIter>
     <outIter>null</outIter>
     <plusTuple>null</plusTuple>
     <minusTuple>null</minusTuple>
     <outTuple>null</outTuple>
     <outState>S_INIT</outState>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </OutputState>
   </Output>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueWriter levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="30" TargetName="SharedQueueWriter">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueWriterId>13</SharedQueueWriterId>
   <SharedQueueWriterPhyId>30</SharedQueueWriterPhyId>
   <numElementsWriter>0</numElementsWriter>
   <numPosElementsWriter>0</numPosElementsWriter>
   <numNegElementsWriter>0</numNegElementsWriter>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter154.xml</SharedQueueWriter>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=STORE event=DUMP target=WinStoreImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="13" TargetName="WinStoreImpl">
  <Level Name="STORE_STATS" Value="4">
  </Level>
  <Level Name="STORE_DUMPELEMS" Value="6">
   <WinStoreImpl>oracle/work/cep/diag/trc/WinStoreImpl155.xml</WinStoreImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=StreamSource levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="17" TargetName="tklog_S0#17">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <StreamSource Type="EXEC_STREAM_SOURCE" Name="tklog_S0#17">
    <StreamSourceState>
     <lastInputTs>0</lastInputTs>
     <lastOutputTs>0</lastOutputTs>
     <inputTs>0</inputTs>
     <inputTuple>null</inputTuple>
     <outputTuple>null</outputTuple>
     <timestampTuple>null</timestampTuple>
      null ts=0</outputElement>
     <outputTs>0</outputTs>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </StreamSourceState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter156.xml</SharedQueueWriter>
   </StreamSource>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueReader levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="32" TargetName="SharedQueueReader">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueReaderId>16</SharedQueueReaderId>
   <SharedQueueReaderPhyId>32</SharedQueueReaderPhyId>
   <numElementsReader>0</numElementsReader>
   <numPosElementsReader>0</numPosElementsReader>
   <numNegElementsReader>0</numNegElementsReader>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueReader>oracle/work/cep/diag/trc/SharedQueueReader157.xml</SharedQueueReader>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueWriter levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="31" TargetName="SharedQueueWriter">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueWriterId>14</SharedQueueWriterId>
   <SharedQueueWriterPhyId>31</SharedQueueWriterPhyId>
   <numElementsWriter>0</numElementsWriter>
   <numPosElementsWriter>0</numPosElementsWriter>
   <numNegElementsWriter>0</numNegElementsWriter>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter158.xml</SharedQueueWriter>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=SYNOPSIS event=DUMP target=BindingSynopsisImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="13" TargetName="BindingSynopsisImpl">
  <Level Name="SYNOPSIS_STATS" Value="4">
  </Level>
  <Level Name="SYNOPSIS_DUMPELEMS" Value="6">
   <BindingSynopsisImpl PhyId="13" StubId="0">
    <ActiveBindList >
    </ActiveBindList>
    <UnsureList >
    </UnsureList>
    <BindStoreImpl>oracle/work/cep/diag/trc/BindStoreImpl159.xml</BindStoreImpl>
   </BindingSynopsisImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=STORE event=DUMP target=WinStoreImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="14" TargetName="WinStoreImpl">
  <Level Name="STORE_STATS" Value="4">
  </Level>
  <Level Name="STORE_DUMPELEMS" Value="6">
   <WinStoreImpl>oracle/work/cep/diag/trc/WinStoreImpl160.xml</WinStoreImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=STORE event=DUMP target=BindStoreImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="15" TargetName="BindingStore">
  <Level Name="STORE_STATS" Value="4">
  </Level>
  <Level Name="STORE_DUMPELEMS" Value="6">
   <ActiveBindList >
   </ActiveBindList>
   <UnsureList >
   </UnsureList>
   <BindStoreImpl>oracle/work/cep/diag/trc/BindStoreImpl161.xml</BindStoreImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=PatternStrmClassB levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="18" TargetName="PO_PATTERN_STRM_CLASSB#18">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <PatternStrmClassB Type="EXEC_PATTERN_STRM_CLASSB" Name="PO_PATTERN_STRM_CLASSB#18">
    <PatternStrmClassBState>
     <inputTuple>null</inputTuple>
     <inputElement>null</inputElement>
      null ts=0</outputElement>
     <lastOutputTs>0</lastOutputTs>
     <outputTuple>null</outputTuple>
     <outputKind>null</outputKind>
     <inputTs>0</inputTs>
     <sequence>0</sequence>
     <prevTuple>
      <TuplePtr>
       <Tuple>
        <int>null</int>
        <float>null</float>
        <timestamp>null</timestamp>
       </Tuple>
      </TuplePtr>
     </prevTuple>
     <tempConsumed>false</tempConsumed>
     <state>S_PRE_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </PatternStrmClassBState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter162.xml</SharedQueueWriter>
    <BindingSynopsisImpl PhyId="13" StubId="0">
     <ActiveBindList >
     </ActiveBindList>
     <UnsureList >
     </UnsureList>
     <BindStoreImpl>oracle/work/cep/diag/trc/BindStoreImpl163.xml</BindStoreImpl>
    </BindingSynopsisImpl>
   </PatternStrmClassB>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueReader levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="34" TargetName="SharedQueueReader">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueReaderId>17</SharedQueueReaderId>
   <SharedQueueReaderPhyId>34</SharedQueueReaderPhyId>
   <numElementsReader>0</numElementsReader>
   <numPosElementsReader>0</numPosElementsReader>
   <numNegElementsReader>0</numNegElementsReader>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueReader>oracle/work/cep/diag/trc/SharedQueueReader164.xml</SharedQueueReader>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueWriter levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="33" TargetName="SharedQueueWriter">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueWriterId>15</SharedQueueWriterId>
   <SharedQueueWriterPhyId>33</SharedQueueWriterPhyId>
   <numElementsWriter>0</numElementsWriter>
   <numPosElementsWriter>0</numPosElementsWriter>
   <numNegElementsWriter>0</numNegElementsWriter>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter165.xml</SharedQueueWriter>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=STORE event=DUMP target=WinStoreImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="16" TargetName="WinStoreImpl">
  <Level Name="STORE_STATS" Value="4">
  </Level>
  <Level Name="STORE_DUMPELEMS" Value="6">
   <WinStoreImpl>oracle/work/cep/diag/trc/WinStoreImpl166.xml</WinStoreImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=Project levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="19" TargetName="PO_PROJECT#19">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <Project Type="EXEC_PROJECT" Name="PO_PROJECT#19">
    <ProjectState>
     <inputTs>0</inputTs>
     <lastOutputTs>0</lastOutputTs>
     <inputElement>null</inputElement>
     <inputTuple>null</inputTuple>
      null ts=0</outputElement>
     <outputTuple>null</outputTuple>
     <outputKind>null</outputKind>
     <tupleLineage >
      <tupleLineageElem>null</tupleLineageElem>
     </tupleLineage>
     <scan>null</scan>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </ProjectState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter167.xml</SharedQueueWriter>
   </Project>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueReader levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="35" TargetName="SharedQueueReader">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueReaderId>18</SharedQueueReaderId>
   <SharedQueueReaderPhyId>35</SharedQueueReaderPhyId>
   <numElementsReader>0</numElementsReader>
   <numPosElementsReader>0</numPosElementsReader>
   <numNegElementsReader>0</numNegElementsReader>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueReader>oracle/work/cep/diag/trc/SharedQueueReader168.xml</SharedQueueReader>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=Output levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="20" TargetName="PO_OUTPUT#20">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <Output Type="EXEC_OUTPUT" Name="PO_OUTPUT#20">
    <OutputState>
     <inputElement>null</inputElement>
     <outputTuple>null</outputTuple>
     <inputTuple>null</inputTuple>
     <inputTs>0</inputTs>
     <searchedTuple>null</searchedTuple>
     <plusIter>null</plusIter>
     <minusIter>null</minusIter>
     <outIter>null</outIter>
     <plusTuple>null</plusTuple>
     <minusTuple>null</minusTuple>
     <outTuple>null</outTuple>
     <outState>S_INIT</outState>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </OutputState>
   </Output>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueWriter levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="36" TargetName="SharedQueueWriter">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueWriterId>16</SharedQueueWriterId>
   <SharedQueueWriterPhyId>36</SharedQueueWriterPhyId>
   <numElementsWriter>0</numElementsWriter>
   <numPosElementsWriter>0</numPosElementsWriter>
   <numNegElementsWriter>0</numNegElementsWriter>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter169.xml</SharedQueueWriter>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=STORE event=DUMP target=WinStoreImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="17" TargetName="WinStoreImpl">
  <Level Name="STORE_STATS" Value="4">
  </Level>
  <Level Name="STORE_DUMPELEMS" Value="6">
   <WinStoreImpl>oracle/work/cep/diag/trc/WinStoreImpl170.xml</WinStoreImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=StreamSource levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="21" TargetName="tklog_S5#21">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <StreamSource Type="EXEC_STREAM_SOURCE" Name="tklog_S5#21">
    <StreamSourceState>
     <lastInputTs>0</lastInputTs>
     <lastOutputTs>0</lastOutputTs>
     <inputTs>0</inputTs>
     <inputTuple>null</inputTuple>
     <outputTuple>null</outputTuple>
     <timestampTuple>null</timestampTuple>
      null ts=0</outputElement>
     <outputTs>0</outputTs>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </StreamSourceState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter171.xml</SharedQueueWriter>
   </StreamSource>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueReader levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="38" TargetName="SharedQueueReader">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueReaderId>19</SharedQueueReaderId>
   <SharedQueueReaderPhyId>38</SharedQueueReaderPhyId>
   <numElementsReader>0</numElementsReader>
   <numPosElementsReader>0</numPosElementsReader>
   <numNegElementsReader>0</numNegElementsReader>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueReader>oracle/work/cep/diag/trc/SharedQueueReader172.xml</SharedQueueReader>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueWriter levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="37" TargetName="SharedQueueWriter">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueWriterId>17</SharedQueueWriterId>
   <SharedQueueWriterPhyId>37</SharedQueueWriterPhyId>
   <numElementsWriter>0</numElementsWriter>
   <numPosElementsWriter>0</numPosElementsWriter>
   <numNegElementsWriter>0</numNegElementsWriter>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter173.xml</SharedQueueWriter>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=SYNOPSIS event=DUMP target=BindingSynopsisImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="14" TargetName="BindingSynopsisImpl">
  <Level Name="SYNOPSIS_STATS" Value="4">
  </Level>
  <Level Name="SYNOPSIS_DUMPELEMS" Value="6">
   <BindingSynopsisImpl PhyId="14" StubId="0">
    <ActiveBindList >
    </ActiveBindList>
    <UnsureList >
    </UnsureList>
    <BindStoreImpl>oracle/work/cep/diag/trc/BindStoreImpl174.xml</BindStoreImpl>
   </BindingSynopsisImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=STORE event=DUMP target=WinStoreImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="18" TargetName="WinStoreImpl">
  <Level Name="STORE_STATS" Value="4">
  </Level>
  <Level Name="STORE_DUMPELEMS" Value="6">
   <WinStoreImpl>oracle/work/cep/diag/trc/WinStoreImpl175.xml</WinStoreImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=STORE event=DUMP target=BindStoreImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="19" TargetName="BindingStore">
  <Level Name="STORE_STATS" Value="4">
  </Level>
  <Level Name="STORE_DUMPELEMS" Value="6">
   <ActiveBindList >
   </ActiveBindList>
   <UnsureList >
   </UnsureList>
   <BindStoreImpl>oracle/work/cep/diag/trc/BindStoreImpl176.xml</BindStoreImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=PatternStrmClassB levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="22" TargetName="PO_PATTERN_STRM_CLASSB#22">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <PatternStrmClassB Type="EXEC_PATTERN_STRM_CLASSB" Name="PO_PATTERN_STRM_CLASSB#22">
    <PatternStrmClassBState>
     <inputTuple>null</inputTuple>
     <inputElement>null</inputElement>
      null ts=0</outputElement>
     <lastOutputTs>0</lastOutputTs>
     <outputTuple>null</outputTuple>
     <outputKind>null</outputKind>
     <inputTs>0</inputTs>
     <sequence>0</sequence>
     <prevTuple>
      <TuplePtr>
       <Tuple>
        <int>null</int>
        <float>null</float>
        <timestamp>null</timestamp>
       </Tuple>
      </TuplePtr>
     </prevTuple>
     <tempConsumed>false</tempConsumed>
     <state>S_PRE_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </PatternStrmClassBState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter177.xml</SharedQueueWriter>
    <BindingSynopsisImpl PhyId="14" StubId="0">
     <ActiveBindList >
     </ActiveBindList>
     <UnsureList >
     </UnsureList>
     <BindStoreImpl>oracle/work/cep/diag/trc/BindStoreImpl178.xml</BindStoreImpl>
    </BindingSynopsisImpl>
   </PatternStrmClassB>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueReader levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="40" TargetName="SharedQueueReader">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueReaderId>20</SharedQueueReaderId>
   <SharedQueueReaderPhyId>40</SharedQueueReaderPhyId>
   <numElementsReader>0</numElementsReader>
   <numPosElementsReader>0</numPosElementsReader>
   <numNegElementsReader>0</numNegElementsReader>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueReader>oracle/work/cep/diag/trc/SharedQueueReader179.xml</SharedQueueReader>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueWriter levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="39" TargetName="SharedQueueWriter">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueWriterId>18</SharedQueueWriterId>
   <SharedQueueWriterPhyId>39</SharedQueueWriterPhyId>
   <numElementsWriter>0</numElementsWriter>
   <numPosElementsWriter>0</numPosElementsWriter>
   <numNegElementsWriter>0</numNegElementsWriter>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter180.xml</SharedQueueWriter>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=STORE event=DUMP target=WinStoreImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="20" TargetName="WinStoreImpl">
  <Level Name="STORE_STATS" Value="4">
  </Level>
  <Level Name="STORE_DUMPELEMS" Value="6">
   <WinStoreImpl>oracle/work/cep/diag/trc/WinStoreImpl181.xml</WinStoreImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=Project levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="23" TargetName="PO_PROJECT#23">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <Project Type="EXEC_PROJECT" Name="PO_PROJECT#23">
    <ProjectState>
     <inputTs>0</inputTs>
     <lastOutputTs>0</lastOutputTs>
     <inputElement>null</inputElement>
     <inputTuple>null</inputTuple>
      null ts=0</outputElement>
     <outputTuple>null</outputTuple>
     <outputKind>null</outputKind>
     <tupleLineage >
      <tupleLineageElem>null</tupleLineageElem>
     </tupleLineage>
     <scan>null</scan>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </ProjectState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter182.xml</SharedQueueWriter>
   </Project>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueReader levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="41" TargetName="SharedQueueReader">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueReaderId>21</SharedQueueReaderId>
   <SharedQueueReaderPhyId>41</SharedQueueReaderPhyId>
   <numElementsReader>0</numElementsReader>
   <numPosElementsReader>0</numPosElementsReader>
   <numNegElementsReader>0</numNegElementsReader>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueReader>oracle/work/cep/diag/trc/SharedQueueReader183.xml</SharedQueueReader>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=Output levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="24" TargetName="PO_OUTPUT#24">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <Output Type="EXEC_OUTPUT" Name="PO_OUTPUT#24">
    <OutputState>
     <inputElement>null</inputElement>
     <outputTuple>null</outputTuple>
     <inputTuple>null</inputTuple>
     <inputTs>0</inputTs>
     <searchedTuple>null</searchedTuple>
     <plusIter>null</plusIter>
     <minusIter>null</minusIter>
     <outIter>null</outIter>
     <plusTuple>null</plusTuple>
     <minusTuple>null</minusTuple>
     <outTuple>null</outTuple>
     <outState>S_INIT</outState>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </OutputState>
   </Output>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueWriter levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="42" TargetName="SharedQueueWriter">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueWriterId>19</SharedQueueWriterId>
   <SharedQueueWriterPhyId>42</SharedQueueWriterPhyId>
   <numElementsWriter>0</numElementsWriter>
   <numPosElementsWriter>0</numPosElementsWriter>
   <numNegElementsWriter>0</numNegElementsWriter>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter184.xml</SharedQueueWriter>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=STORE event=DUMP target=WinStoreImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="21" TargetName="WinStoreImpl">
  <Level Name="STORE_STATS" Value="4">
  </Level>
  <Level Name="STORE_DUMPELEMS" Value="6">
   <WinStoreImpl>oracle/work/cep/diag/trc/WinStoreImpl185.xml</WinStoreImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=StreamSource levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="25" TargetName="tklog_S3#25">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <StreamSource Type="EXEC_STREAM_SOURCE" Name="tklog_S3#25">
    <StreamSourceState>
     <lastInputTs>0</lastInputTs>
     <lastOutputTs>0</lastOutputTs>
     <inputTs>0</inputTs>
     <inputTuple>null</inputTuple>
     <outputTuple>null</outputTuple>
     <timestampTuple>null</timestampTuple>
      null ts=0</outputElement>
     <outputTs>0</outputTs>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </StreamSourceState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter186.xml</SharedQueueWriter>
   </StreamSource>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueReader levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="44" TargetName="SharedQueueReader">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueReaderId>22</SharedQueueReaderId>
   <SharedQueueReaderPhyId>44</SharedQueueReaderPhyId>
   <numElementsReader>0</numElementsReader>
   <numPosElementsReader>0</numPosElementsReader>
   <numNegElementsReader>0</numNegElementsReader>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueReader>oracle/work/cep/diag/trc/SharedQueueReader187.xml</SharedQueueReader>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueWriter levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="43" TargetName="SharedQueueWriter">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueWriterId>20</SharedQueueWriterId>
   <SharedQueueWriterPhyId>43</SharedQueueWriterPhyId>
   <numElementsWriter>0</numElementsWriter>
   <numPosElementsWriter>0</numPosElementsWriter>
   <numNegElementsWriter>0</numNegElementsWriter>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter188.xml</SharedQueueWriter>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=SYNOPSIS event=DUMP target=WindowSynopsisImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="15" TargetName="WindowSynopsisImpl">
  <Level Name="SYNOPSIS_STATS" Value="4">
  </Level>
  <Level Name="SYNOPSIS_DUMPELEMS" Value="6">
   <WindowSynopsisImpl PhyId="15" StubId="0">
    <WinStoreImpl>oracle/work/cep/diag/trc/WinStoreImpl189.xml</WinStoreImpl>
   </WindowSynopsisImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=RangeWindow levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="26" TargetName="PO_RANGE_WIN#26">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <RangeWindow Type="EXEC_RANGE_WIN" Name="PO_RANGE_WIN#26">
    <RangeWindowState>
     <lastOutputTs>0</lastOutputTs>
     <inputElement>null</inputElement>
     <inputTuple>null</inputTuple>
     <inputKind>null</inputKind>
     <inputTs>0</inputTs>
      null ts=0</outputElement>
     <outputTs>0</outputTs>
     <expiredTuple>null</expiredTuple>
     <expiredTimeStamp>0</expiredTimeStamp>
     <batchEndTime>0</batchEndTime>
     <visTs>1969-12-31 16:00:00.0</visTs>
     <expTs>1969-12-31 16:00:00.0</expTs>
     <tempTs>1969-12-31 16:00:00.0</tempTs>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </RangeWindowState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter190.xml</SharedQueueWriter>
    <WindowSynopsisImpl PhyId="15" StubId="0">
     <WinStoreImpl>oracle/work/cep/diag/trc/WinStoreImpl191.xml</WinStoreImpl>
    </WindowSynopsisImpl>
   </RangeWindow>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueReader levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="46" TargetName="SharedQueueReader">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueReaderId>23</SharedQueueReaderId>
   <SharedQueueReaderPhyId>46</SharedQueueReaderPhyId>
   <numElementsReader>0</numElementsReader>
   <numPosElementsReader>0</numPosElementsReader>
   <numNegElementsReader>0</numNegElementsReader>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueReader>oracle/work/cep/diag/trc/SharedQueueReader192.xml</SharedQueueReader>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueWriter levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="45" TargetName="SharedQueueWriter">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueWriterId>21</SharedQueueWriterId>
   <SharedQueueWriterPhyId>45</SharedQueueWriterPhyId>
   <numElementsWriter>0</numElementsWriter>
   <numPosElementsWriter>0</numPosElementsWriter>
   <numNegElementsWriter>0</numNegElementsWriter>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter193.xml</SharedQueueWriter>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=SYNOPSIS event=DUMP target=RelationSynopsisImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="16" TargetName="RelationSynopsisImpl">
  <Level Name="SYNOPSIS_STATS" Value="4">
  </Level>
  <Level Name="SYNOPSIS_DUMPELEMS" Value="6">
   <RelationSynopsisImpl PhyId="16" StubId="0">
    <RelStoreImpl>oracle/work/cep/diag/trc/RelStoreImpl194.xml</RelStoreImpl>
   </RelationSynopsisImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=SYNOPSIS event=DUMP target=RelationSynopsisImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="18" TargetName="RelationSynopsisImpl">
  <Level Name="SYNOPSIS_STATS" Value="4">
  </Level>
  <Level Name="SYNOPSIS_DUMPELEMS" Value="6">
   <RelationSynopsisImpl PhyId="18" StubId="1">
    <RelStoreImpl>oracle/work/cep/diag/trc/RelStoreImpl195.xml</RelStoreImpl>
   </RelationSynopsisImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=INDEX event=DUMP target=HashIndex levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="15" TargetName="HashIndex">
  <Level Name="INDEX_STATS" Value="4">
  </Level>
  <Level Name="INDEX_DUMPELEMS" Value="6">
   <HashIndex>oracle/work/cep/diag/trc/HashIndex196.xml</HashIndex>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=STORE event=DUMP target=RelStoreImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="22" TargetName="RelStoreImpl">
  <Level Name="STORE_STATS" Value="4">
  </Level>
  <Level Name="STORE_DUMPELEMS" Value="6">
   <RelStoreImpl>oracle/work/cep/diag/trc/RelStoreImpl197.xml</RelStoreImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=GroupAggr levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="27" TargetName="PO_GROUP_AGGR#27">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <GroupAggr Type="EXEC_GROUP_AGGR" Name="PO_GROUP_AGGR#27">
    <GroupAggrState>
     <inputTs>0</inputTs>
     <inputElement>null</inputElement>
     <inputTuple>null</inputTuple>
     <outputTs>0</outputTs>
     <lastOutputTs>0</lastOutputTs>
      null ts=0</outputElement>
     <outputTuple>null</outputTuple>
     <oldAggrTuple>null</oldAggrTuple>
     <isInitNullRowEmitted>false</isInitNullRowEmitted>
     <isGroupEmpty>false</isGroupEmpty>
     <nextUDAIndex>0</nextUDAIndex>
     <isDirty>false</isDirty>
     <plusState>S_INIT</plusState>
     <minusState>S_INIT</minusState>
     <dirtyOutputState>S_INIT</dirtyOutputState>
     <oldState>S_INIT</oldState>
     <inTuple>null</inTuple>
     <outDirtyTuple>null</outDirtyTuple>
     <dirtyTuple>null</dirtyTuple>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </GroupAggrState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter198.xml</SharedQueueWriter>
    <RelationSynopsisImpl PhyId="16" StubId="0">
     <RelStoreImpl>oracle/work/cep/diag/trc/RelStoreImpl199.xml</RelStoreImpl>
    </RelationSynopsisImpl>
    <RelationSynopsisImpl PhyId="18" StubId="1">
     <RelStoreImpl>oracle/work/cep/diag/trc/RelStoreImpl200.xml</RelStoreImpl>
    </RelationSynopsisImpl>
   </GroupAggr>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueReader levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="48" TargetName="SharedQueueReader">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueReaderId>24</SharedQueueReaderId>
   <SharedQueueReaderPhyId>48</SharedQueueReaderPhyId>
   <numElementsReader>0</numElementsReader>
   <numPosElementsReader>0</numPosElementsReader>
   <numNegElementsReader>0</numNegElementsReader>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueReader>oracle/work/cep/diag/trc/SharedQueueReader201.xml</SharedQueueReader>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueWriter levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="47" TargetName="SharedQueueWriter">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueWriterId>22</SharedQueueWriterId>
   <SharedQueueWriterPhyId>47</SharedQueueWriterPhyId>
   <numElementsWriter>0</numElementsWriter>
   <numPosElementsWriter>0</numPosElementsWriter>
   <numNegElementsWriter>0</numNegElementsWriter>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter202.xml</SharedQueueWriter>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=SYNOPSIS event=DUMP target=LineageSynopsisImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="19" TargetName="LineageSynopsisImpl">
  <Level Name="SYNOPSIS_STATS" Value="4">
  </Level>
  <Level Name="SYNOPSIS_DUMPELEMS" Value="6">
   <LineageSynopsisImpl PhyId="19" StubId="0">
    <LineageStoreImpl>oracle/work/cep/diag/trc/LineageStoreImpl203.xml</LineageStoreImpl>
   </LineageSynopsisImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=STORE event=DUMP target=LineageStoreImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="23" TargetName="LineageStoreImpl">
  <Level Name="STORE_STATS" Value="4">
  </Level>
  <Level Name="STORE_DUMPELEMS" Value="6">
   <LineageStoreImpl>oracle/work/cep/diag/trc/LineageStoreImpl205.xml</LineageStoreImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=INDEX event=DUMP target=HashIndex levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="16" TargetName="HashIndex">
  <Level Name="INDEX_STATS" Value="4">
  </Level>
  <Level Name="INDEX_DUMPELEMS" Value="6">
   <HashIndex>oracle/work/cep/diag/trc/HashIndex207.xml</HashIndex>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=Project levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="28" TargetName="PO_PROJECT#28">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <Project Type="EXEC_PROJECT" Name="PO_PROJECT#28">
    <ProjectState>
     <inputTs>0</inputTs>
     <lastOutputTs>0</lastOutputTs>
     <inputElement>null</inputElement>
     <inputTuple>null</inputTuple>
      null ts=0</outputElement>
     <outputTuple>null</outputTuple>
     <outputKind>null</outputKind>
     <tupleLineage >
      <tupleLineageElem>null</tupleLineageElem>
     </tupleLineage>
     <scan>null</scan>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </ProjectState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter208.xml</SharedQueueWriter>
    <LineageSynopsisImpl PhyId="19" StubId="0">
     <LineageStoreImpl>oracle/work/cep/diag/trc/LineageStoreImpl209.xml</LineageStoreImpl>
    </LineageSynopsisImpl>
   </Project>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueReader levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="49" TargetName="SharedQueueReader">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueReaderId>25</SharedQueueReaderId>
   <SharedQueueReaderPhyId>49</SharedQueueReaderPhyId>
   <numElementsReader>0</numElementsReader>
   <numPosElementsReader>0</numPosElementsReader>
   <numNegElementsReader>0</numNegElementsReader>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueReader>oracle/work/cep/diag/trc/SharedQueueReader211.xml</SharedQueueReader>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=Output levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="29" TargetName="PO_OUTPUT#29">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <Output Type="EXEC_OUTPUT" Name="PO_OUTPUT#29">
    <OutputState>
     <inputElement>null</inputElement>
     <outputTuple>null</outputTuple>
     <inputTuple>null</inputTuple>
     <inputTs>0</inputTs>
     <searchedTuple>null</searchedTuple>
     <plusIter>null</plusIter>
     <minusIter>null</minusIter>
     <outIter>null</outIter>
     <plusTuple>null</plusTuple>
     <minusTuple>null</minusTuple>
     <outTuple>null</outTuple>
     <outState>S_INIT</outState>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </OutputState>
   </Output>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueWriter levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="50" TargetName="SharedQueueWriter">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueWriterId>23</SharedQueueWriterId>
   <SharedQueueWriterPhyId>50</SharedQueueWriterPhyId>
   <numElementsWriter>0</numElementsWriter>
   <numPosElementsWriter>0</numPosElementsWriter>
   <numNegElementsWriter>0</numNegElementsWriter>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter212.xml</SharedQueueWriter>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=STORE event=DUMP target=WinStoreImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="24" TargetName="WinStoreImpl">
  <Level Name="STORE_STATS" Value="4">
  </Level>
  <Level Name="STORE_DUMPELEMS" Value="6">
   <WinStoreImpl>oracle/work/cep/diag/trc/WinStoreImpl213.xml</WinStoreImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=StreamSource levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="30" TargetName="tklog_S12#30">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <StreamSource Type="EXEC_STREAM_SOURCE" Name="tklog_S12#30">
    <StreamSourceState>
     <lastInputTs>0</lastInputTs>
     <lastOutputTs>0</lastOutputTs>
     <inputTs>0</inputTs>
     <inputTuple>null</inputTuple>
     <outputTuple>null</outputTuple>
     <timestampTuple>null</timestampTuple>
      null ts=0</outputElement>
     <outputTs>0</outputTs>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </StreamSourceState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter214.xml</SharedQueueWriter>
   </StreamSource>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueReader levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="52" TargetName="SharedQueueReader">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueReaderId>26</SharedQueueReaderId>
   <SharedQueueReaderPhyId>52</SharedQueueReaderPhyId>
   <numElementsReader>0</numElementsReader>
   <numPosElementsReader>0</numPosElementsReader>
   <numNegElementsReader>0</numNegElementsReader>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueReader>oracle/work/cep/diag/trc/SharedQueueReader215.xml</SharedQueueReader>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueWriter levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="51" TargetName="SharedQueueWriter">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueWriterId>24</SharedQueueWriterId>
   <SharedQueueWriterPhyId>51</SharedQueueWriterPhyId>
   <numElementsWriter>0</numElementsWriter>
   <numPosElementsWriter>0</numPosElementsWriter>
   <numNegElementsWriter>0</numNegElementsWriter>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter216.xml</SharedQueueWriter>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=SYNOPSIS event=DUMP target=WindowSynopsisImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="20" TargetName="WindowSynopsisImpl">
  <Level Name="SYNOPSIS_STATS" Value="4">
  </Level>
  <Level Name="SYNOPSIS_DUMPELEMS" Value="6">
   <WindowSynopsisImpl PhyId="20" StubId="0">
    <WinStoreImpl>oracle/work/cep/diag/trc/WinStoreImpl217.xml</WinStoreImpl>
   </WindowSynopsisImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=RangeWindow levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="31" TargetName="PO_RANGE_WIN#31">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <RangeWindow Type="EXEC_RANGE_WIN" Name="PO_RANGE_WIN#31">
    <RangeWindowState>
     <lastOutputTs>0</lastOutputTs>
     <inputElement>null</inputElement>
     <inputTuple>null</inputTuple>
     <inputKind>null</inputKind>
     <inputTs>0</inputTs>
      null ts=0</outputElement>
     <outputTs>0</outputTs>
     <expiredTuple>null</expiredTuple>
     <expiredTimeStamp>0</expiredTimeStamp>
     <batchEndTime>0</batchEndTime>
     <visTs>1969-12-31 16:00:00.0</visTs>
     <expTs>1969-12-31 16:00:00.0</expTs>
     <tempTs>1969-12-31 16:00:00.0</tempTs>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </RangeWindowState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter218.xml</SharedQueueWriter>
    <WindowSynopsisImpl PhyId="20" StubId="0">
     <WinStoreImpl>oracle/work/cep/diag/trc/WinStoreImpl219.xml</WinStoreImpl>
    </WindowSynopsisImpl>
   </RangeWindow>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueReader levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="54" TargetName="SharedQueueReader">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueReaderId>27</SharedQueueReaderId>
   <SharedQueueReaderPhyId>54</SharedQueueReaderPhyId>
   <numElementsReader>0</numElementsReader>
   <numPosElementsReader>0</numPosElementsReader>
   <numNegElementsReader>0</numNegElementsReader>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueReader>oracle/work/cep/diag/trc/SharedQueueReader220.xml</SharedQueueReader>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueWriter levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="53" TargetName="SharedQueueWriter">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueWriterId>25</SharedQueueWriterId>
   <SharedQueueWriterPhyId>53</SharedQueueWriterPhyId>
   <numElementsWriter>0</numElementsWriter>
   <numPosElementsWriter>0</numPosElementsWriter>
   <numNegElementsWriter>0</numNegElementsWriter>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter221.xml</SharedQueueWriter>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=SYNOPSIS event=DUMP target=LineageSynopsisImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="21" TargetName="LineageSynopsisImpl">
  <Level Name="SYNOPSIS_STATS" Value="4">
  </Level>
  <Level Name="SYNOPSIS_DUMPELEMS" Value="6">
   <LineageSynopsisImpl PhyId="21" StubId="0">
    <LineageStoreImpl>oracle/work/cep/diag/trc/LineageStoreImpl222.xml</LineageStoreImpl>
   </LineageSynopsisImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=STORE event=DUMP target=LineageStoreImpl levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="25" TargetName="LineageStoreImpl">
  <Level Name="STORE_STATS" Value="4">
  </Level>
  <Level Name="STORE_DUMPELEMS" Value="6">
   <LineageStoreImpl>oracle/work/cep/diag/trc/LineageStoreImpl224.xml</LineageStoreImpl>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=INDEX event=DUMP target=HashIndex levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="17" TargetName="HashIndex">
  <Level Name="INDEX_STATS" Value="4">
  </Level>
  <Level Name="INDEX_DUMPELEMS" Value="6">
   <HashIndex>oracle/work/cep/diag/trc/HashIndex226.xml</HashIndex>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=Project levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="32" TargetName="PO_PROJECT#32">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <Project Type="EXEC_PROJECT" Name="PO_PROJECT#32">
    <ProjectState>
     <inputTs>0</inputTs>
     <lastOutputTs>0</lastOutputTs>
     <inputElement>null</inputElement>
     <inputTuple>null</inputTuple>
      null ts=0</outputElement>
     <outputTuple>null</outputTuple>
     <outputKind>null</outputKind>
     <tupleLineage >
      <tupleLineageElem>null</tupleLineageElem>
     </tupleLineage>
     <scan>null</scan>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </ProjectState>
    <SharedQueueWriter>oracle/work/cep/diag/trc/SharedQueueWriter227.xml</SharedQueueWriter>
    <LineageSynopsisImpl PhyId="21" StubId="0">
     <LineageStoreImpl>oracle/work/cep/diag/trc/LineageStoreImpl228.xml</LineageStoreImpl>
    </LineageSynopsisImpl>
   </Project>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=QUEUE event=DUMP target=SharedQueueReader levels=3 4 6 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="55" TargetName="SharedQueueReader">
  <Level Name="QUEUE_STATS" Value="4">
   <SharedQueueReaderId>28</SharedQueueReaderId>
   <SharedQueueReaderPhyId>55</SharedQueueReaderPhyId>
   <numElementsReader>0</numElementsReader>
   <numPosElementsReader>0</numPosElementsReader>
   <numNegElementsReader>0</numNegElementsReader>
   <numHeartbeats>0</numHeartbeats>
  </Level>
  <Level Name="QUEUE_DUMPELEMS" Value="6">
   <SharedQueueReader>oracle/work/cep/diag/trc/SharedQueueReader230.xml</SharedQueueReader>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
FINE: trace : area=OPERATOR event=DUMP target=Output levels=8 
 oracle.cep.logging.LogUtil log
FINE:  <Event Name="DUMP" TargetId="33" TargetName="PO_OUTPUT#33">
  <Level Name="OPERATOR_DUMP_DETAIL" Value="8">
   <Output Type="EXEC_OUTPUT" Name="PO_OUTPUT#33">
    <OutputState>
     <inputElement>null</inputElement>
     <outputTuple>null</outputTuple>
     <inputTuple>null</inputTuple>
     <inputTs>0</inputTs>
     <searchedTuple>null</searchedTuple>
     <plusIter>null</plusIter>
     <minusIter>null</minusIter>
     <outIter>null</outIter>
     <plusTuple>null</plusTuple>
     <minusTuple>null</minusTuple>
     <outTuple>null</outTuple>
     <outState>S_INIT</outState>
     <state>S_INIT</state>
     <ExecStats>
      <sumInputSizes>0</sumInputSizes>
      <numExecutions>0</numExecutions>
      <numInputs>0</numInputs>
      <numOutputs>0</numOutputs>
      /startTime>
      /endTime>
      <numInputsLatest>0</numInputsLatest>
      <numOutputsLatest>0</numOutputsLatest>
      /totalTime>
      <isEnabled>false</isEnabled>
      <latency>0</latency>
     </ExecStats>
     <lastState>null</lastState>
     <tup>null</tup>
     <readerIds>{}</readerIds>
     <lastInputTs>0</lastInputTs>
     <propState>S_PROPAGATE_INIT</propState>
    </OutputState>
   </Output>
  </Level>
 </Event>

 oracle.cep.logging.LogUtil log
INFO: Activate : DDL success
SharedQueueReader230
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueReader PhyId="55" ReaderId="0" WriterId="25">
 </SharedQueueReader>
LineageStoreImpl228
<?xml version="1.0" encoding="utf-8" ?>
 <LineageStoreImpl PhyId="25">
  <ListStore>
   <TupleDoublyList >
   </TupleDoublyList>
  </ListStore>
  <Index>
   <HashIndex>oracle/work/cep/diag/trc/HashIndex229.xml</HashIndex>
  </Index>
 </LineageStoreImpl>
HashIndex229
<?xml version="1.0" encoding="utf-8" ?>
 <HashIndex >
 </HashIndex>
SharedQueueWriter227
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="53" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
HashIndex226
<?xml version="1.0" encoding="utf-8" ?>
 <HashIndex >
 </HashIndex>
LineageStoreImpl224
<?xml version="1.0" encoding="utf-8" ?>
 <LineageStoreImpl PhyId="25">
  <ListStore>
   <TupleDoublyList >
   </TupleDoublyList>
  </ListStore>
  <Index>
   <HashIndex>oracle/work/cep/diag/trc/HashIndex225.xml</HashIndex>
  </Index>
 </LineageStoreImpl>
HashIndex225
<?xml version="1.0" encoding="utf-8" ?>
 <HashIndex >
 </HashIndex>
LineageStoreImpl222
<?xml version="1.0" encoding="utf-8" ?>
 <LineageStoreImpl PhyId="25">
  <ListStore>
   <TupleDoublyList >
   </TupleDoublyList>
  </ListStore>
  <Index>
   <HashIndex>oracle/work/cep/diag/trc/HashIndex223.xml</HashIndex>
  </Index>
 </LineageStoreImpl>
HashIndex223
<?xml version="1.0" encoding="utf-8" ?>
 <HashIndex >
 </HashIndex>
SharedQueueWriter221
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="53" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
SharedQueueReader220
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueReader PhyId="54" ReaderId="0" WriterId="24">
 </SharedQueueReader>
WinStoreImpl219
<?xml version="1.0" encoding="utf-8" ?>
 <WinStoreImpl PhyId="24" NumStubs="1">
  <TimedTupleSinglyList >
   <TimedTupleSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Ts>-1</Ts>
    <Readers>0</Readers>
   </TimedTupleSinglyListNode>
  </TimedTupleSinglyList>
 </WinStoreImpl>
SharedQueueWriter218
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="51" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
WinStoreImpl217
<?xml version="1.0" encoding="utf-8" ?>
 <WinStoreImpl PhyId="24" NumStubs="1">
  <TimedTupleSinglyList >
   <TimedTupleSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Ts>-1</Ts>
    <Readers>0</Readers>
   </TimedTupleSinglyListNode>
  </TimedTupleSinglyList>
 </WinStoreImpl>
SharedQueueWriter216
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="51" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
SharedQueueReader215
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueReader PhyId="52" ReaderId="0" WriterId="23">
 </SharedQueueReader>
SharedQueueWriter214
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="50" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
WinStoreImpl213
<?xml version="1.0" encoding="utf-8" ?>
 <WinStoreImpl PhyId="24" NumStubs="1">
  <TimedTupleSinglyList >
   <TimedTupleSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Ts>-1</Ts>
    <Readers>0</Readers>
   </TimedTupleSinglyListNode>
  </TimedTupleSinglyList>
 </WinStoreImpl>
SharedQueueWriter212
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="50" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
SharedQueueReader211
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueReader PhyId="49" ReaderId="0" WriterId="22">
 </SharedQueueReader>
LineageStoreImpl209
<?xml version="1.0" encoding="utf-8" ?>
 <LineageStoreImpl PhyId="23">
  <ListStore>
   <TupleDoublyList >
   </TupleDoublyList>
  </ListStore>
  <Index>
   <HashIndex>oracle/work/cep/diag/trc/HashIndex210.xml</HashIndex>
  </Index>
 </LineageStoreImpl>
HashIndex210
<?xml version="1.0" encoding="utf-8" ?>
 <HashIndex >
 </HashIndex>
SharedQueueWriter208
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="47" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
HashIndex207
<?xml version="1.0" encoding="utf-8" ?>
 <HashIndex >
 </HashIndex>
LineageStoreImpl205
<?xml version="1.0" encoding="utf-8" ?>
 <LineageStoreImpl PhyId="23">
  <ListStore>
   <TupleDoublyList >
   </TupleDoublyList>
  </ListStore>
  <Index>
   <HashIndex>oracle/work/cep/diag/trc/HashIndex206.xml</HashIndex>
  </Index>
 </LineageStoreImpl>
HashIndex206
<?xml version="1.0" encoding="utf-8" ?>
 <HashIndex >
 </HashIndex>
LineageStoreImpl203
<?xml version="1.0" encoding="utf-8" ?>
 <LineageStoreImpl PhyId="23">
  <ListStore>
   <TupleDoublyList >
   </TupleDoublyList>
  </ListStore>
  <Index>
   <HashIndex>oracle/work/cep/diag/trc/HashIndex204.xml</HashIndex>
  </Index>
 </LineageStoreImpl>
HashIndex204
<?xml version="1.0" encoding="utf-8" ?>
 <HashIndex >
 </HashIndex>
SharedQueueWriter202
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="47" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
SharedQueueReader201
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueReader PhyId="48" ReaderId="0" WriterId="21">
 </SharedQueueReader>
RelStoreImpl200
<?xml version="1.0" encoding="utf-8" ?>
 <RelStoreImpl PhyId="22">
  <TupleDoublyList >
  </TupleDoublyList>
 </RelStoreImpl>
RelStoreImpl199
<?xml version="1.0" encoding="utf-8" ?>
 <RelStoreImpl PhyId="22">
  <TupleDoublyList >
  </TupleDoublyList>
 </RelStoreImpl>
SharedQueueWriter198
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="45" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
RelStoreImpl197
<?xml version="1.0" encoding="utf-8" ?>
 <RelStoreImpl PhyId="22">
  <TupleDoublyList >
  </TupleDoublyList>
 </RelStoreImpl>
HashIndex196
<?xml version="1.0" encoding="utf-8" ?>
 <HashIndex >
 </HashIndex>
RelStoreImpl195
<?xml version="1.0" encoding="utf-8" ?>
 <RelStoreImpl PhyId="22">
  <TupleDoublyList >
  </TupleDoublyList>
 </RelStoreImpl>
RelStoreImpl194
<?xml version="1.0" encoding="utf-8" ?>
 <RelStoreImpl PhyId="22">
  <TupleDoublyList >
  </TupleDoublyList>
 </RelStoreImpl>
SharedQueueWriter193
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="45" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
SharedQueueReader192
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueReader PhyId="46" ReaderId="0" WriterId="20">
 </SharedQueueReader>
WinStoreImpl191
<?xml version="1.0" encoding="utf-8" ?>
 <WinStoreImpl PhyId="21" NumStubs="2">
  <TimedTupleSinglyList >
   <TimedTupleSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Ts>-1</Ts>
    <Readers>0</Readers>
   </TimedTupleSinglyListNode>
  </TimedTupleSinglyList>
 </WinStoreImpl>
SharedQueueWriter190
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="43" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
WinStoreImpl189
<?xml version="1.0" encoding="utf-8" ?>
 <WinStoreImpl PhyId="21" NumStubs="2">
  <TimedTupleSinglyList >
   <TimedTupleSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Ts>-1</Ts>
    <Readers>0</Readers>
   </TimedTupleSinglyListNode>
  </TimedTupleSinglyList>
 </WinStoreImpl>
SharedQueueWriter188
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="43" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
SharedQueueReader187
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueReader PhyId="44" ReaderId="0" WriterId="19">
 </SharedQueueReader>
SharedQueueWriter186
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="42" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
WinStoreImpl185
<?xml version="1.0" encoding="utf-8" ?>
 <WinStoreImpl PhyId="21" NumStubs="2">
  <TimedTupleSinglyList >
   <TimedTupleSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Ts>-1</Ts>
    <Readers>0</Readers>
   </TimedTupleSinglyListNode>
  </TimedTupleSinglyList>
 </WinStoreImpl>
SharedQueueWriter184
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="42" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
SharedQueueReader183
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueReader PhyId="41" ReaderId="0" WriterId="18">
 </SharedQueueReader>
SharedQueueWriter182
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="39" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
WinStoreImpl181
<?xml version="1.0" encoding="utf-8" ?>
 <WinStoreImpl PhyId="20" NumStubs="0">
  <TimedTupleSinglyList >
   <TimedTupleSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Ts>-1</Ts>
    <Readers>0</Readers>
   </TimedTupleSinglyListNode>
  </TimedTupleSinglyList>
 </WinStoreImpl>
SharedQueueWriter180
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="39" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
SharedQueueReader179
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueReader PhyId="40" ReaderId="0" WriterId="17">
 </SharedQueueReader>
BindStoreImpl178
<?xml version="1.0" encoding="utf-8" ?>
 <BindStoreImpl PhyId="19">
 </BindStoreImpl>
SharedQueueWriter177
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="37" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
BindStoreImpl176
<?xml version="1.0" encoding="utf-8" ?>
 <BindStoreImpl PhyId="19">
 </BindStoreImpl>
WinStoreImpl175
<?xml version="1.0" encoding="utf-8" ?>
 <WinStoreImpl PhyId="18" NumStubs="0">
  <TimedTupleSinglyList >
   <TimedTupleSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Ts>-1</Ts>
    <Readers>0</Readers>
   </TimedTupleSinglyListNode>
  </TimedTupleSinglyList>
 </WinStoreImpl>
BindStoreImpl174
<?xml version="1.0" encoding="utf-8" ?>
 <BindStoreImpl PhyId="19">
 </BindStoreImpl>
SharedQueueWriter173
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="37" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
SharedQueueReader172
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueReader PhyId="38" ReaderId="0" WriterId="16">
 </SharedQueueReader>
SharedQueueWriter171
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="36" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
WinStoreImpl170
<?xml version="1.0" encoding="utf-8" ?>
 <WinStoreImpl PhyId="17" NumStubs="0">
  <TimedTupleSinglyList >
   <TimedTupleSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Ts>-1</Ts>
    <Readers>0</Readers>
   </TimedTupleSinglyListNode>
  </TimedTupleSinglyList>
 </WinStoreImpl>
SharedQueueWriter169
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="36" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
SharedQueueReader168
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueReader PhyId="35" ReaderId="0" WriterId="15">
 </SharedQueueReader>
SharedQueueWriter167
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="33" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
WinStoreImpl166
<?xml version="1.0" encoding="utf-8" ?>
 <WinStoreImpl PhyId="16" NumStubs="0">
  <TimedTupleSinglyList >
   <TimedTupleSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Ts>-1</Ts>
    <Readers>0</Readers>
   </TimedTupleSinglyListNode>
  </TimedTupleSinglyList>
 </WinStoreImpl>
SharedQueueWriter165
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="33" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
SharedQueueReader164
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueReader PhyId="34" ReaderId="0" WriterId="14">
 </SharedQueueReader>
BindStoreImpl163
<?xml version="1.0" encoding="utf-8" ?>
 <BindStoreImpl PhyId="15">
 </BindStoreImpl>
SharedQueueWriter162
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="31" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
BindStoreImpl161
<?xml version="1.0" encoding="utf-8" ?>
 <BindStoreImpl PhyId="15">
 </BindStoreImpl>
WinStoreImpl160
<?xml version="1.0" encoding="utf-8" ?>
 <WinStoreImpl PhyId="14" NumStubs="0">
  <TimedTupleSinglyList >
   <TimedTupleSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Ts>-1</Ts>
    <Readers>0</Readers>
   </TimedTupleSinglyListNode>
  </TimedTupleSinglyList>
 </WinStoreImpl>
BindStoreImpl159
<?xml version="1.0" encoding="utf-8" ?>
 <BindStoreImpl PhyId="15">
 </BindStoreImpl>
SharedQueueWriter158
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="31" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
SharedQueueReader157
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueReader PhyId="32" ReaderId="0" WriterId="13">
 </SharedQueueReader>
SharedQueueWriter156
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="30" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
WinStoreImpl155
<?xml version="1.0" encoding="utf-8" ?>
 <WinStoreImpl PhyId="13" NumStubs="0">
  <TimedTupleSinglyList >
   <TimedTupleSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Ts>-1</Ts>
    <Readers>0</Readers>
   </TimedTupleSinglyListNode>
  </TimedTupleSinglyList>
 </WinStoreImpl>
SharedQueueWriter154
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="30" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
SharedQueueReader153
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueReader PhyId="29" ReaderId="0" WriterId="12">
 </SharedQueueReader>
SharedQueueWriter152
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="27" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
WinStoreImpl151
<?xml version="1.0" encoding="utf-8" ?>
 <WinStoreImpl PhyId="12" NumStubs="0">
  <TimedTupleSinglyList >
   <TimedTupleSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Ts>-1</Ts>
    <Readers>0</Readers>
   </TimedTupleSinglyListNode>
  </TimedTupleSinglyList>
 </WinStoreImpl>
SharedQueueWriter150
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="27" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
SharedQueueReader149
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueReader PhyId="28" ReaderId="0" WriterId="11">
 </SharedQueueReader>
RelStoreImpl148
<?xml version="1.0" encoding="utf-8" ?>
 <RelStoreImpl PhyId="11">
  <TupleDoublyList >
  </TupleDoublyList>
 </RelStoreImpl>
SharedQueueWriter147
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="25" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
RelStoreImpl146
<?xml version="1.0" encoding="utf-8" ?>
 <RelStoreImpl PhyId="11">
  <TupleDoublyList >
  </TupleDoublyList>
 </RelStoreImpl>
WinStoreImpl145
<?xml version="1.0" encoding="utf-8" ?>
 <WinStoreImpl PhyId="10" NumStubs="0">
  <TimedTupleSinglyList >
   <TimedTupleSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Ts>-1</Ts>
    <Readers>0</Readers>
   </TimedTupleSinglyListNode>
  </TimedTupleSinglyList>
 </WinStoreImpl>
HashIndex144
<?xml version="1.0" encoding="utf-8" ?>
 <HashIndex >
 </HashIndex>
RelStoreImpl143
<?xml version="1.0" encoding="utf-8" ?>
 <RelStoreImpl PhyId="11">
  <TupleDoublyList >
  </TupleDoublyList>
 </RelStoreImpl>
SharedQueueWriter142
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="25" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
SharedQueueReader141
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueReader PhyId="26" ReaderId="0" WriterId="10">
 </SharedQueueReader>
LineageStoreImpl139
<?xml version="1.0" encoding="utf-8" ?>
 <LineageStoreImpl PhyId="9">
  <ListStore>
   <TupleDoublyList >
   </TupleDoublyList>
  </ListStore>
  <Index>
   <HashIndex>oracle/work/cep/diag/trc/HashIndex140.xml</HashIndex>
  </Index>
 </LineageStoreImpl>
HashIndex140
<?xml version="1.0" encoding="utf-8" ?>
 <HashIndex >
 </HashIndex>
SharedQueueWriter138
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="23" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
HashIndex137
<?xml version="1.0" encoding="utf-8" ?>
 <HashIndex >
 </HashIndex>
LineageStoreImpl135
<?xml version="1.0" encoding="utf-8" ?>
 <LineageStoreImpl PhyId="9">
  <ListStore>
   <TupleDoublyList >
   </TupleDoublyList>
  </ListStore>
  <Index>
   <HashIndex>oracle/work/cep/diag/trc/HashIndex136.xml</HashIndex>
  </Index>
 </LineageStoreImpl>
HashIndex136
<?xml version="1.0" encoding="utf-8" ?>
 <HashIndex >
 </HashIndex>
LineageStoreImpl133
<?xml version="1.0" encoding="utf-8" ?>
 <LineageStoreImpl PhyId="9">
  <ListStore>
   <TupleDoublyList >
   </TupleDoublyList>
  </ListStore>
  <Index>
   <HashIndex>oracle/work/cep/diag/trc/HashIndex134.xml</HashIndex>
  </Index>
 </LineageStoreImpl>
HashIndex134
<?xml version="1.0" encoding="utf-8" ?>
 <HashIndex >
 </HashIndex>
SharedQueueWriter132
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="23" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
SharedQueueReader131
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueReader PhyId="24" ReaderId="0" WriterId="9">
 </SharedQueueReader>
WinStoreImpl130
<?xml version="1.0" encoding="utf-8" ?>
 <WinStoreImpl PhyId="8" NumStubs="1">
  <TimedTupleSinglyList >
   <TimedTupleSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Ts>-1</Ts>
    <Readers>0</Readers>
   </TimedTupleSinglyListNode>
  </TimedTupleSinglyList>
 </WinStoreImpl>
SharedQueueWriter129
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="21" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
WinStoreImpl128
<?xml version="1.0" encoding="utf-8" ?>
 <WinStoreImpl PhyId="8" NumStubs="1">
  <TimedTupleSinglyList >
   <TimedTupleSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Ts>-1</Ts>
    <Readers>0</Readers>
   </TimedTupleSinglyListNode>
  </TimedTupleSinglyList>
 </WinStoreImpl>
SharedQueueWriter127
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="21" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
SharedQueueReader126
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueReader PhyId="22" ReaderId="0" WriterId="8">
 </SharedQueueReader>
SharedQueueWriter125
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="20" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
WinStoreImpl124
<?xml version="1.0" encoding="utf-8" ?>
 <WinStoreImpl PhyId="8" NumStubs="1">
  <TimedTupleSinglyList >
   <TimedTupleSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Ts>-1</Ts>
    <Readers>0</Readers>
   </TimedTupleSinglyListNode>
  </TimedTupleSinglyList>
 </WinStoreImpl>
SharedQueueWriter123
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="20" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
SharedQueueReader122
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueReader PhyId="19" ReaderId="0" WriterId="7">
 </SharedQueueReader>
RelStoreImpl121
<?xml version="1.0" encoding="utf-8" ?>
 <RelStoreImpl PhyId="6">
  <TupleDoublyList >
  </TupleDoublyList>
 </RelStoreImpl>
SharedQueueWriter120
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="16" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
RelStoreImpl119
<?xml version="1.0" encoding="utf-8" ?>
 <RelStoreImpl PhyId="7">
  <TupleDoublyList >
  </TupleDoublyList>
 </RelStoreImpl>
RelStoreImpl118
<?xml version="1.0" encoding="utf-8" ?>
 <RelStoreImpl PhyId="6">
  <TupleDoublyList >
  </TupleDoublyList>
 </RelStoreImpl>
HashIndex117
<?xml version="1.0" encoding="utf-8" ?>
 <HashIndex >
 </HashIndex>
RelStoreImpl116
<?xml version="1.0" encoding="utf-8" ?>
 <RelStoreImpl PhyId="6">
  <TupleDoublyList >
  </TupleDoublyList>
 </RelStoreImpl>
SharedQueueWriter115
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="16" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
SharedQueueReader114
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueReader PhyId="18" ReaderId="1" WriterId="4">
 </SharedQueueReader>
SharedQueueReader113
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueReader PhyId="17" ReaderId="1" WriterId="5">
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>2</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>3</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>4</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>5</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>6</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>7</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>8</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>9</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>10</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>11</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>12</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>13</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>14</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>15</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>16</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>17</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>18</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>19</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>20</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>21</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>22</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>23</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>24</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>25</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>26</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>27</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>28</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>29</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>30</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>31</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>32</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>33</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>34</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>35</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>36</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>37</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>38</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>39</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>40</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>41</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>42</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>43</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>44</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>45</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>46</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>47</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>48</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>49</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>50</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>51</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>52</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>53</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>54</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>55</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>56</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>57</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>58</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>59</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>60</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>61</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>62</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>63</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>64</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>65</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>66</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>67</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>68</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>69</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>70</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>71</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>72</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>73</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>74</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>75</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>76</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>77</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>78</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>79</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>80</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>81</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>82</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>83</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>84</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>85</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>86</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>87</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>88</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>89</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>90</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>91</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>92</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>93</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>94</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>95</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>96</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>97</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>98</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>99</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>100</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>101</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>102</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>103</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>104</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>105</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>106</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>107</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>108</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>109</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>110</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>111</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>112</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>113</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>114</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>115</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>116</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>117</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>118</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>119</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>120</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>121</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>122</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>123</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>124</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>125</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>126</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>127</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>128</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>129</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>130</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>131</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>132</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>133</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>134</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>135</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>136</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>137</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>138</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>139</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>140</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>141</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>142</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>143</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>144</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>145</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>146</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>147</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>148</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>149</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>150</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>151</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>152</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>153</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>154</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>155</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>156</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>157</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>158</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>159</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>160</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>161</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>162</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>163</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>164</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>165</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>166</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>167</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>168</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>169</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>170</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>171</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>172</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>173</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>174</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>175</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>176</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>177</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>178</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>179</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>180</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>181</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>182</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>183</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>184</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>185</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>186</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>187</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>188</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>189</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>190</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>191</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>192</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>193</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>194</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>195</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>196</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>197</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>198</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>199</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>200</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>201</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>202</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>203</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>204</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>205</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>206</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>207</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>208</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>209</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>210</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>211</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>212</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>213</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>214</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>215</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>216</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>217</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>218</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>219</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>220</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>221</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>222</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>223</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>224</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>225</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>226</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>227</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>228</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>229</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>230</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>231</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>232</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>233</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>234</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>235</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>236</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>237</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>238</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>239</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>240</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>241</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>242</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>243</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>244</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>245</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>246</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>247</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>248</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>249</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>250</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>251</Ts>
  </QSinglyListNode>
  <QSinglyListNode Next="-1">
   <Tuple>null</Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>0</Ts>
  </QSinglyListNode>
 </SharedQueueReader>
SharedQueueReader112
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueReader PhyId="15" ReaderId="0" WriterId="6">
 </SharedQueueReader>
LineageStoreImpl110
<?xml version="1.0" encoding="utf-8" ?>
 <LineageStoreImpl PhyId="5">
  <ListStore>
   <TupleDoublyList >
   </TupleDoublyList>
  </ListStore>
  <Index>
   <HashIndex>oracle/work/cep/diag/trc/HashIndex111.xml</HashIndex>
  </Index>
 </LineageStoreImpl>
HashIndex111
<?xml version="1.0" encoding="utf-8" ?>
 <HashIndex >
 </HashIndex>
SharedQueueWriter109
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="12" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
HashIndex108
<?xml version="1.0" encoding="utf-8" ?>
 <HashIndex >
 </HashIndex>
LineageStoreImpl106
<?xml version="1.0" encoding="utf-8" ?>
 <LineageStoreImpl PhyId="5">
  <ListStore>
   <TupleDoublyList >
   </TupleDoublyList>
  </ListStore>
  <Index>
   <HashIndex>oracle/work/cep/diag/trc/HashIndex107.xml</HashIndex>
  </Index>
 </LineageStoreImpl>
HashIndex107
<?xml version="1.0" encoding="utf-8" ?>
 <HashIndex >
 </HashIndex>
LineageStoreImpl104
<?xml version="1.0" encoding="utf-8" ?>
 <LineageStoreImpl PhyId="5">
  <ListStore>
   <TupleDoublyList >
   </TupleDoublyList>
  </ListStore>
  <Index>
   <HashIndex>oracle/work/cep/diag/trc/HashIndex105.xml</HashIndex>
  </Index>
 </LineageStoreImpl>
HashIndex105
<?xml version="1.0" encoding="utf-8" ?>
 <HashIndex >
 </HashIndex>
SharedQueueWriter103
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="12" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
SharedQueueReader102
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueReader PhyId="14" ReaderId="0" WriterId="4">
 </SharedQueueReader>
SharedQueueReader101
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueReader PhyId="13" ReaderId="0" WriterId="5">
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>2</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>3</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>4</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>5</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>6</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>7</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>8</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>9</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>10</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>11</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>12</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>13</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>14</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>15</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>16</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>17</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>18</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>19</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>20</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>21</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>22</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>23</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>24</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>25</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>26</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>27</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>28</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>29</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>30</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>31</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>32</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>33</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>34</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>35</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>36</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>37</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>38</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>39</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>40</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>41</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>42</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>43</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>44</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>45</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>46</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>47</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>48</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>49</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>50</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>51</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>52</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>53</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>54</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>55</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>56</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>57</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>58</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>59</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>60</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>61</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>62</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>63</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>64</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>65</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>66</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>67</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>68</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>69</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>70</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>71</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>72</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>73</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>74</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>75</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>76</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>77</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>78</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>79</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>80</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>81</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>82</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>83</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>84</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>85</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>86</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>87</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>88</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>89</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>90</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>91</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>92</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>93</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>94</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>95</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>96</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>97</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>98</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>99</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>100</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>101</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>102</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>103</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>104</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>105</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>106</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>107</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>108</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>109</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>110</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>111</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>112</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>113</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>114</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>115</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>116</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>117</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>118</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>119</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>120</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>121</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>122</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>123</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>124</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>125</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>126</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>127</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>128</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>129</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>130</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>131</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>132</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>133</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>134</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>135</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>136</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>137</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>138</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>139</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>140</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>141</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>142</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>143</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>144</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>145</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>146</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>147</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>148</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>149</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>150</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>151</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>152</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>153</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>154</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>155</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>156</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>157</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>158</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>159</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>160</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>161</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>162</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>163</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>164</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>165</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>166</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>167</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>168</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>169</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>170</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>171</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>172</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>173</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>174</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>175</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>176</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>177</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>178</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>179</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>180</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>181</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>182</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>183</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>184</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>185</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>186</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>187</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>188</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>189</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>190</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>191</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>192</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>193</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>194</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>195</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>196</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>197</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>198</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>199</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>200</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>201</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>202</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>203</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>204</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>205</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>206</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>207</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>208</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>209</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>210</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>211</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>212</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>213</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>214</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>215</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>216</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>217</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>218</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>219</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>220</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>221</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>222</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>223</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>224</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>225</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>226</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>227</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>228</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>229</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>230</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>231</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>232</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>233</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>234</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>235</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>236</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>237</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>238</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>239</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>240</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>241</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>242</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>243</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>244</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>245</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>246</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>247</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>248</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>249</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>250</Ts>
  </QSinglyListNode>
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <float>0.3</float>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>251</Ts>
  </QSinglyListNode>
  <QSinglyListNode Next="-1">
   <Tuple>null</Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>0</Ts>
  </QSinglyListNode>
 </SharedQueueReader>
LineageStoreImpl99
<?xml version="1.0" encoding="utf-8" ?>
 <LineageStoreImpl PhyId="3">
  <ListStore>
   <TupleDoublyList >
   </TupleDoublyList>
  </ListStore>
  <Index>
   <HashIndex>oracle/work/cep/diag/trc/HashIndex100.xml</HashIndex>
  </Index>
 </LineageStoreImpl>
HashIndex100
<?xml version="1.0" encoding="utf-8" ?>
 <HashIndex >
 </HashIndex>
SharedQueueWriter98
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="9" NumReaders="2">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
HashIndex97
<?xml version="1.0" encoding="utf-8" ?>
 <HashIndex >
 </HashIndex>
LineageStoreImpl95
<?xml version="1.0" encoding="utf-8" ?>
 <LineageStoreImpl PhyId="3">
  <ListStore>
   <TupleDoublyList >
   </TupleDoublyList>
  </ListStore>
  <Index>
   <HashIndex>oracle/work/cep/diag/trc/HashIndex96.xml</HashIndex>
  </Index>
 </LineageStoreImpl>
HashIndex96
<?xml version="1.0" encoding="utf-8" ?>
 <HashIndex >
 </HashIndex>
LineageStoreImpl93
<?xml version="1.0" encoding="utf-8" ?>
 <LineageStoreImpl PhyId="3">
  <ListStore>
   <TupleDoublyList >
   </TupleDoublyList>
  </ListStore>
  <Index>
   <HashIndex>oracle/work/cep/diag/trc/HashIndex94.xml</HashIndex>
  </Index>
 </LineageStoreImpl>
HashIndex94
<?xml version="1.0" encoding="utf-8" ?>
 <HashIndex >
 </HashIndex>
SharedQueueWriter92
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="9" NumReaders="2">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
SharedQueueReader91
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueReader PhyId="10" ReaderId="1" WriterId="2">
 </SharedQueueReader>
RelStoreImpl90
<?xml version="1.0" encoding="utf-8" ?>
 <RelStoreImpl PhyId="4">
  <TupleDoublyList >
   <TupleDoublyListNode Prev="-1">
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode Next="-1">
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
  </TupleDoublyList>
 </RelStoreImpl>
SharedQueueWriter89
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="11" NumReaders="2">
  <QSinglyList >
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>2</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>3</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>4</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>5</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>6</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>7</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>8</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>9</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>10</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>11</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>12</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>13</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>14</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>15</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>16</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>17</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>18</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>19</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>20</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>21</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>22</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>23</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>24</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>25</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>26</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>27</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>28</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>29</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>30</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>31</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>32</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>33</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>34</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>35</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>36</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>37</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>38</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>39</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>40</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>41</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>42</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>43</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>44</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>45</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>46</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>47</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>48</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>49</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>50</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>51</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>52</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>53</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>54</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>55</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>56</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>57</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>58</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>59</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>60</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>61</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>62</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>63</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>64</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>65</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>66</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>67</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>68</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>69</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>70</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>71</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>72</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>73</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>74</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>75</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>76</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>77</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>78</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>79</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>80</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>81</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>82</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>83</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>84</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>85</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>86</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>87</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>88</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>89</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>90</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>91</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>92</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>93</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>94</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>95</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>96</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>97</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>98</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>99</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>100</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>101</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>102</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>103</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>104</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>105</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>106</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>107</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>108</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>109</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>110</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>111</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>112</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>113</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>114</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>115</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>116</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>117</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>118</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>119</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>120</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>121</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>122</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>123</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>124</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>125</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>126</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>127</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>128</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>129</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>130</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>131</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>132</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>133</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>134</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>135</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>136</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>137</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>138</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>139</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>140</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>141</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>142</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>143</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>144</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>145</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>146</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>147</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>148</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>149</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>150</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>151</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>152</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>153</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>154</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>155</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>156</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>157</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>158</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>159</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>160</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>161</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>162</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>163</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>164</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>165</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>166</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>167</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>168</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>169</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>170</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>171</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>172</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>173</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>174</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>175</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>176</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>177</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>178</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>179</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>180</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>181</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>182</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>183</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>184</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>185</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>186</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>187</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>188</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>189</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>190</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>191</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>192</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>193</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>194</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>195</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>196</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>197</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>198</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>199</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>200</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>201</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>202</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>203</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>204</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>205</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>206</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>207</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>208</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>209</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>210</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>211</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>212</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>213</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>214</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>215</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>216</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>217</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>218</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>219</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>220</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>221</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>222</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>223</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>224</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>225</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>226</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>227</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>228</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>229</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>230</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>231</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>232</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>233</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>234</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>235</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>236</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>237</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>238</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>239</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>240</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>241</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>242</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>243</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>244</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>245</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>246</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>247</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>248</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>249</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>250</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>251</Ts>
   </QSinglyListNode>
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
RelStoreImpl88
<?xml version="1.0" encoding="utf-8" ?>
 <RelStoreImpl PhyId="4">
  <TupleDoublyList >
   <TupleDoublyListNode Prev="-1">
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode Next="-1">
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
  </TupleDoublyList>
 </RelStoreImpl>
HashIndex87
<?xml version="1.0" encoding="utf-8" ?>
 <HashIndex >
  <IndexEntry Hash="oracle.cep.execution.internals.Hash">
   <TupleDoublyList >
    <TupleDoublyListNode Prev="-1">
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode>
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
    <TupleDoublyListNode Next="-1">
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <float>0.3</float>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
   </TupleDoublyList>
  </HashIndex>
 </HashIndex>
RelStoreImpl86
<?xml version="1.0" encoding="utf-8" ?>
 <RelStoreImpl PhyId="4">
  <TupleDoublyList >
   <TupleDoublyListNode Prev="-1">
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode Next="-1">
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
  </TupleDoublyList>
 </RelStoreImpl>
SharedQueueWriter85
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="11" NumReaders="2">
  <QSinglyList >
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>2</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>3</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>4</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>5</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>6</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>7</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>8</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>9</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>10</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>11</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>12</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>13</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>14</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>15</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>16</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>17</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>18</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>19</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>20</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>21</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>22</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>23</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>24</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>25</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>26</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>27</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>28</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>29</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>30</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>31</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>32</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>33</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>34</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>35</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>36</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>37</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>38</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>39</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>40</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>41</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>42</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>43</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>44</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>45</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>46</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>47</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>48</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>49</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>50</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>51</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>52</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>53</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>54</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>55</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>56</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>57</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>58</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>59</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>60</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>61</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>62</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>63</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>64</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>65</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>66</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>67</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>68</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>69</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>70</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>71</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>72</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>73</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>74</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>75</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>76</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>77</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>78</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>79</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>80</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>81</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>82</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>83</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>84</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>85</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>86</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>87</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>88</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>89</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>90</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>91</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>92</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>93</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>94</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>95</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>96</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>97</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>98</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>99</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>100</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>101</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>102</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>103</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>104</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>105</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>106</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>107</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>108</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>109</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>110</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>111</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>112</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>113</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>114</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>115</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>116</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>117</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>118</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>119</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>120</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>121</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>122</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>123</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>124</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>125</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>126</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>127</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>128</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>129</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>130</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>131</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>132</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>133</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>134</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>135</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>136</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>137</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>138</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>139</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>140</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>141</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>142</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>143</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>144</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>145</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>146</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>147</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>148</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>149</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>150</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>151</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>152</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>153</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>154</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>155</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>156</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>157</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>158</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>159</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>160</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>161</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>162</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>163</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>164</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>165</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>166</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>167</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>168</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>169</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>170</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>171</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>172</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>173</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>174</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>175</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>176</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>177</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>178</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>179</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>180</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>181</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>182</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>183</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>184</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>185</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>186</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>187</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>188</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>189</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>190</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>191</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>192</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>193</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>194</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>195</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>196</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>197</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>198</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>199</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>200</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>201</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>202</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>203</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>204</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>205</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>206</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>207</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>208</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>209</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>210</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>211</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>212</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>213</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>214</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>215</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>216</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>217</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>218</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>219</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>220</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>221</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>222</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>223</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>224</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>225</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>226</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>227</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>228</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>229</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>230</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>231</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>232</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>233</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>234</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>235</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>236</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>237</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>238</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>239</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>240</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>241</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>242</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>243</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>244</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>245</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>246</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>247</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>248</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>249</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>250</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>251</Ts>
   </QSinglyListNode>
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
LineageStoreImpl83
<?xml version="1.0" encoding="utf-8" ?>
 <LineageStoreImpl PhyId="2">
  <ListStore>
   <TupleDoublyList >
   </TupleDoublyList>
  </ListStore>
  <Index>
   <HashIndex>oracle/work/cep/diag/trc/HashIndex84.xml</HashIndex>
  </Index>
 </LineageStoreImpl>
HashIndex84
<?xml version="1.0" encoding="utf-8" ?>
 <HashIndex >
 </HashIndex>
RelStoreImpl82
<?xml version="1.0" encoding="utf-8" ?>
 <RelStoreImpl PhyId="0">
  <TupleDoublyList >
   <TupleDoublyListNode Prev="-1" Next="-1">
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <char>abc</char>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
  </TupleDoublyList>
 </RelStoreImpl>
WinStoreImpl81
<?xml version="1.0" encoding="utf-8" ?>
 <WinStoreImpl PhyId="1" NumStubs="2">
  <TimedTupleSinglyList >
   <TimedTupleSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Ts>-1</Ts>
    <Readers>0</Readers>
   </TimedTupleSinglyListNode>
  </TimedTupleSinglyList>
 </WinStoreImpl>
SharedQueueWriter80
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="5" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
HashIndex79
<?xml version="1.0" encoding="utf-8" ?>
 <HashIndex >
 </HashIndex>
LineageStoreImpl77
<?xml version="1.0" encoding="utf-8" ?>
 <LineageStoreImpl PhyId="2">
  <ListStore>
   <TupleDoublyList >
   </TupleDoublyList>
  </ListStore>
  <Index>
   <HashIndex>oracle/work/cep/diag/trc/HashIndex78.xml</HashIndex>
  </Index>
 </LineageStoreImpl>
HashIndex78
<?xml version="1.0" encoding="utf-8" ?>
 <HashIndex >
 </HashIndex>
LineageStoreImpl75
<?xml version="1.0" encoding="utf-8" ?>
 <LineageStoreImpl PhyId="2">
  <ListStore>
   <TupleDoublyList >
   </TupleDoublyList>
  </ListStore>
  <Index>
   <HashIndex>oracle/work/cep/diag/trc/HashIndex76.xml</HashIndex>
  </Index>
 </LineageStoreImpl>
HashIndex76
<?xml version="1.0" encoding="utf-8" ?>
 <HashIndex >
 </HashIndex>
HashIndex74
<?xml version="1.0" encoding="utf-8" ?>
 <HashIndex >
 </HashIndex>
RelStoreImpl73
<?xml version="1.0" encoding="utf-8" ?>
 <RelStoreImpl PhyId="0">
  <TupleDoublyList >
   <TupleDoublyListNode Prev="-1" Next="-1">
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <char>abc</char>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
  </TupleDoublyList>
 </RelStoreImpl>
HashIndex72
<?xml version="1.0" encoding="utf-8" ?>
 <HashIndex >
 </HashIndex>
WinStoreImpl71
<?xml version="1.0" encoding="utf-8" ?>
 <WinStoreImpl PhyId="1" NumStubs="2">
  <TimedTupleSinglyList >
   <TimedTupleSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Ts>-1</Ts>
    <Readers>0</Readers>
   </TimedTupleSinglyListNode>
  </TimedTupleSinglyList>
 </WinStoreImpl>
SharedQueueWriter70
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="5" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
SharedQueueReader69
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueReader PhyId="7" ReaderId="0" WriterId="2">
 </SharedQueueReader>
SharedQueueReader68
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueReader PhyId="6" ReaderId="0" WriterId="0">
  <QSinglyListNode>
   <Tuple>
    <TuplePtr>
     <Tuple>
      <int>10</int>
      <char>abc</char>
      <byte>byte[1]</byte>
      
     </Tuple>
    </TuplePtr>
   </Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>1</Ts>
  </QSinglyListNode>
  <QSinglyListNode Next="-1">
   <Tuple>null</Tuple>
   <Kind>E_PLUS</Kind>
   <Ts>0</Ts>
  </QSinglyListNode>
 </SharedQueueReader>
SharedQueueReader67
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueReader PhyId="8" ReaderId="0" WriterId="3">
 </SharedQueueReader>
WinStoreImpl66
<?xml version="1.0" encoding="utf-8" ?>
 <WinStoreImpl PhyId="1" NumStubs="2">
  <TimedTupleSinglyList >
   <TimedTupleSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Ts>-1</Ts>
    <Readers>0</Readers>
   </TimedTupleSinglyListNode>
  </TimedTupleSinglyList>
 </WinStoreImpl>
SharedQueueWriter65
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="3" NumReaders="2">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
WinStoreImpl64
<?xml version="1.0" encoding="utf-8" ?>
 <WinStoreImpl PhyId="1" NumStubs="2">
  <TimedTupleSinglyList >
   <TimedTupleSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Ts>-1</Ts>
    <Readers>0</Readers>
   </TimedTupleSinglyListNode>
  </TimedTupleSinglyList>
 </WinStoreImpl>
SharedQueueWriter63
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="3" NumReaders="2">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
SharedQueueReader62
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueReader PhyId="4" ReaderId="0" WriterId="1">
 </SharedQueueReader>
SharedQueueWriter61
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="2" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
WinStoreImpl60
<?xml version="1.0" encoding="utf-8" ?>
 <WinStoreImpl PhyId="1" NumStubs="2">
  <TimedTupleSinglyList >
   <TimedTupleSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Ts>-1</Ts>
    <Readers>0</Readers>
   </TimedTupleSinglyListNode>
  </TimedTupleSinglyList>
 </WinStoreImpl>
SharedQueueWriter59
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="2" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
RelStoreImpl58
<?xml version="1.0" encoding="utf-8" ?>
 <RelStoreImpl PhyId="0">
  <TupleDoublyList >
   <TupleDoublyListNode Prev="-1" Next="-1">
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <char>abc</char>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
  </TupleDoublyList>
 </RelStoreImpl>
SharedQueueWriter57
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="1" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <char>abc</char>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>1</Ts>
   </QSinglyListNode>
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
RelStoreImpl56
<?xml version="1.0" encoding="utf-8" ?>
 <RelStoreImpl PhyId="0">
  <TupleDoublyList >
   <TupleDoublyListNode Prev="-1" Next="-1">
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <char>abc</char>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
  </TupleDoublyList>
 </RelStoreImpl>
HashIndex55
<?xml version="1.0" encoding="utf-8" ?>
 <HashIndex >
  <IndexEntry Hash="oracle.cep.execution.internals.Hash">
   <TupleDoublyList >
    <TupleDoublyListNode Prev="-1" Next="-1">
     <E>
      <TuplePtr>
       <Tuple>
        <int>10</int>
        <char>abc</char>
        <byte>byte[1]</byte>
        
       </Tuple>
      </TuplePtr>
     </E>
    </TupleDoublyListNode>
   </TupleDoublyList>
  </HashIndex>
 </HashIndex>
RelStoreImpl54
<?xml version="1.0" encoding="utf-8" ?>
 <RelStoreImpl PhyId="0">
  <TupleDoublyList >
   <TupleDoublyListNode Prev="-1" Next="-1">
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <char>abc</char>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
  </TupleDoublyList>
 </RelStoreImpl>
SharedQueueWriter53
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="1" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <char>abc</char>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>1</Ts>
   </QSinglyListNode>
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
LineageStoreImpl51
<?xml version="1.0" encoding="utf-8" ?>
 <LineageStoreImpl PhyId="25">
  <ListStore>
   <TupleDoublyList >
   </TupleDoublyList>
  </ListStore>
  <Index>
   <HashIndex>oracle/work/cep/diag/trc/HashIndex52.xml</HashIndex>
  </Index>
 </LineageStoreImpl>
HashIndex52
<?xml version="1.0" encoding="utf-8" ?>
 <HashIndex >
 </HashIndex>
SharedQueueWriter50
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="53" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
WinStoreImpl49
<?xml version="1.0" encoding="utf-8" ?>
 <WinStoreImpl PhyId="24" NumStubs="1">
  <TimedTupleSinglyList >
   <TimedTupleSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Ts>-1</Ts>
    <Readers>0</Readers>
   </TimedTupleSinglyListNode>
  </TimedTupleSinglyList>
 </WinStoreImpl>
SharedQueueWriter48
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="51" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
SharedQueueWriter47
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="50" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
LineageStoreImpl45
<?xml version="1.0" encoding="utf-8" ?>
 <LineageStoreImpl PhyId="23">
  <ListStore>
   <TupleDoublyList >
   </TupleDoublyList>
  </ListStore>
  <Index>
   <HashIndex>oracle/work/cep/diag/trc/HashIndex46.xml</HashIndex>
  </Index>
 </LineageStoreImpl>
HashIndex46
<?xml version="1.0" encoding="utf-8" ?>
 <HashIndex >
 </HashIndex>
SharedQueueWriter44
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="47" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
RelStoreImpl43
<?xml version="1.0" encoding="utf-8" ?>
 <RelStoreImpl PhyId="22">
  <TupleDoublyList >
  </TupleDoublyList>
 </RelStoreImpl>
RelStoreImpl42
<?xml version="1.0" encoding="utf-8" ?>
 <RelStoreImpl PhyId="22">
  <TupleDoublyList >
  </TupleDoublyList>
 </RelStoreImpl>
SharedQueueWriter41
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="45" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
WinStoreImpl40
<?xml version="1.0" encoding="utf-8" ?>
 <WinStoreImpl PhyId="21" NumStubs="2">
  <TimedTupleSinglyList >
   <TimedTupleSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Ts>-1</Ts>
    <Readers>0</Readers>
   </TimedTupleSinglyListNode>
  </TimedTupleSinglyList>
 </WinStoreImpl>
SharedQueueWriter39
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="43" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
SharedQueueWriter38
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="42" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
SharedQueueWriter37
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="39" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
BindStoreImpl36
<?xml version="1.0" encoding="utf-8" ?>
 <BindStoreImpl PhyId="19">
 </BindStoreImpl>
SharedQueueWriter35
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="37" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
SharedQueueWriter34
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="36" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
SharedQueueWriter33
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="33" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
BindStoreImpl32
<?xml version="1.0" encoding="utf-8" ?>
 <BindStoreImpl PhyId="15">
 </BindStoreImpl>
SharedQueueWriter31
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="31" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
SharedQueueWriter30
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="30" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
SharedQueueWriter29
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="27" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
RelStoreImpl28
<?xml version="1.0" encoding="utf-8" ?>
 <RelStoreImpl PhyId="11">
  <TupleDoublyList >
  </TupleDoublyList>
 </RelStoreImpl>
SharedQueueWriter27
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="25" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
LineageStoreImpl25
<?xml version="1.0" encoding="utf-8" ?>
 <LineageStoreImpl PhyId="9">
  <ListStore>
   <TupleDoublyList >
   </TupleDoublyList>
  </ListStore>
  <Index>
   <HashIndex>oracle/work/cep/diag/trc/HashIndex26.xml</HashIndex>
  </Index>
 </LineageStoreImpl>
HashIndex26
<?xml version="1.0" encoding="utf-8" ?>
 <HashIndex >
 </HashIndex>
SharedQueueWriter24
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="23" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
WinStoreImpl23
<?xml version="1.0" encoding="utf-8" ?>
 <WinStoreImpl PhyId="8" NumStubs="1">
  <TimedTupleSinglyList >
   <TimedTupleSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Ts>-1</Ts>
    <Readers>0</Readers>
   </TimedTupleSinglyListNode>
  </TimedTupleSinglyList>
 </WinStoreImpl>
SharedQueueWriter22
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="21" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
SharedQueueWriter21
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="20" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
RelStoreImpl20
<?xml version="1.0" encoding="utf-8" ?>
 <RelStoreImpl PhyId="6">
  <TupleDoublyList >
  </TupleDoublyList>
 </RelStoreImpl>
SharedQueueWriter19
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="16" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
LineageStoreImpl17
<?xml version="1.0" encoding="utf-8" ?>
 <LineageStoreImpl PhyId="5">
  <ListStore>
   <TupleDoublyList >
   </TupleDoublyList>
  </ListStore>
  <Index>
   <HashIndex>oracle/work/cep/diag/trc/HashIndex18.xml</HashIndex>
  </Index>
 </LineageStoreImpl>
HashIndex18
<?xml version="1.0" encoding="utf-8" ?>
 <HashIndex >
 </HashIndex>
SharedQueueWriter16
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="12" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
LineageStoreImpl14
<?xml version="1.0" encoding="utf-8" ?>
 <LineageStoreImpl PhyId="3">
  <ListStore>
   <TupleDoublyList >
   </TupleDoublyList>
  </ListStore>
  <Index>
   <HashIndex>oracle/work/cep/diag/trc/HashIndex15.xml</HashIndex>
  </Index>
 </LineageStoreImpl>
HashIndex15
<?xml version="1.0" encoding="utf-8" ?>
 <HashIndex >
 </HashIndex>
SharedQueueWriter13
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="9" NumReaders="2">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
RelStoreImpl12
<?xml version="1.0" encoding="utf-8" ?>
 <RelStoreImpl PhyId="4">
  <TupleDoublyList >
   <TupleDoublyListNode Prev="-1">
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode>
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
   <TupleDoublyListNode Next="-1">
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
  </TupleDoublyList>
 </RelStoreImpl>
SharedQueueWriter11
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="11" NumReaders="2">
  <QSinglyList >
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>2</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>3</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>4</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>5</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>6</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>7</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>8</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>9</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>10</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>11</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>12</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>13</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>14</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>15</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>16</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>17</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>18</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>19</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>20</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>21</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>22</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>23</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>24</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>25</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>26</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>27</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>28</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>29</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>30</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>31</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>32</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>33</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>34</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>35</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>36</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>37</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>38</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>39</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>40</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>41</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>42</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>43</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>44</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>45</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>46</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>47</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>48</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>49</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>50</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>51</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>52</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>53</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>54</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>55</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>56</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>57</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>58</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>59</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>60</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>61</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>62</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>63</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>64</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>65</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>66</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>67</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>68</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>69</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>70</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>71</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>72</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>73</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>74</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>75</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>76</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>77</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>78</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>79</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>80</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>81</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>82</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>83</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>84</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>85</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>86</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>87</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>88</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>89</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>90</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>91</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>92</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>93</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>94</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>95</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>96</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>97</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>98</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>99</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>100</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>101</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>102</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>103</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>104</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>105</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>106</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>107</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>108</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>109</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>110</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>111</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>112</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>113</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>114</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>115</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>116</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>117</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>118</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>119</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>120</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>121</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>122</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>123</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>124</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>125</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>126</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>127</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>128</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>129</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>130</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>131</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>132</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>133</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>134</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>135</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>136</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>137</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>138</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>139</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>140</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>141</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>142</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>143</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>144</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>145</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>146</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>147</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>148</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>149</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>150</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>151</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>152</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>153</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>154</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>155</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>156</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>157</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>158</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>159</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>160</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>161</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>162</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>163</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>164</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>165</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>166</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>167</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>168</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>169</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>170</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>171</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>172</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>173</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>174</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>175</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>176</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>177</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>178</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>179</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>180</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>181</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>182</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>183</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>184</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>185</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>186</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>187</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>188</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>189</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>190</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>191</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>192</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>193</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>194</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>195</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>196</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>197</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>198</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>199</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>200</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>201</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>202</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>203</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>204</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>205</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>206</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>207</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>208</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>209</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>210</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>211</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>212</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>213</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>214</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>215</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>216</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>217</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>218</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>219</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>220</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>221</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>222</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>223</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>224</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>225</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>226</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>227</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>228</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>229</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>230</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>231</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>232</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>233</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>234</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>235</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>236</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>237</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>238</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>239</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>240</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>241</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>242</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>243</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>244</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>245</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>246</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>247</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>248</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>249</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>250</Ts>
   </QSinglyListNode>
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <float>0.3</float>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>251</Ts>
   </QSinglyListNode>
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
LineageStoreImpl9
<?xml version="1.0" encoding="utf-8" ?>
 <LineageStoreImpl PhyId="2">
  <ListStore>
   <TupleDoublyList >
   </TupleDoublyList>
  </ListStore>
  <Index>
   <HashIndex>oracle/work/cep/diag/trc/HashIndex10.xml</HashIndex>
  </Index>
 </LineageStoreImpl>
HashIndex10
<?xml version="1.0" encoding="utf-8" ?>
 <HashIndex >
 </HashIndex>
RelStoreImpl8
<?xml version="1.0" encoding="utf-8" ?>
 <RelStoreImpl PhyId="0">
  <TupleDoublyList >
   <TupleDoublyListNode Prev="-1" Next="-1">
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <char>abc</char>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
  </TupleDoublyList>
 </RelStoreImpl>
WinStoreImpl7
<?xml version="1.0" encoding="utf-8" ?>
 <WinStoreImpl PhyId="1" NumStubs="2">
  <TimedTupleSinglyList >
   <TimedTupleSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Ts>-1</Ts>
    <Readers>0</Readers>
   </TimedTupleSinglyListNode>
  </TimedTupleSinglyList>
 </WinStoreImpl>
SharedQueueWriter6
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="5" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
WinStoreImpl5
<?xml version="1.0" encoding="utf-8" ?>
 <WinStoreImpl PhyId="1" NumStubs="2">
  <TimedTupleSinglyList >
   <TimedTupleSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Ts>-1</Ts>
    <Readers>0</Readers>
   </TimedTupleSinglyListNode>
  </TimedTupleSinglyList>
 </WinStoreImpl>
SharedQueueWriter4
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="3" NumReaders="2">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
SharedQueueWriter3
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="2" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
RelStoreImpl2
<?xml version="1.0" encoding="utf-8" ?>
 <RelStoreImpl PhyId="0">
  <TupleDoublyList >
   <TupleDoublyListNode Prev="-1" Next="-1">
    <E>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <char>abc</char>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </E>
   </TupleDoublyListNode>
  </TupleDoublyList>
 </RelStoreImpl>
SharedQueueWriter1
<?xml version="1.0" encoding="utf-8" ?>
 <SharedQueueWriter PhyId="1" NumReaders="1">
  <QSinglyList >
   <QSinglyListNode>
    <Tuple>
     <TuplePtr>
      <Tuple>
       <int>10</int>
       <char>abc</char>
       <byte>byte[1]</byte>
       
      </Tuple>
     </TuplePtr>
    </Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>1</Ts>
   </QSinglyListNode>
   <QSinglyListNode Next="-1">
    <Tuple>null</Tuple>
    <Kind>E_PLUS</Kind>
    <Ts>0</Ts>
   </QSinglyListNode>
  </QSinglyList>
 </SharedQueueWriter>
