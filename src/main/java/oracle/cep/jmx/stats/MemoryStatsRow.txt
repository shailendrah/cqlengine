/* $Header: pcbpel/cep/server/src/oracle/cep/jmx/stats/MemoryStatsRow.java /main/2 2008/11/30 13:31:42 parujain Exp $ */

/* Copyright (c) 2007, 2008, Oracle and/or its affiliates.
All rights reserved. */

/*
   DESCRIPTION
    <short description of component this file declares/defines>

   PRIVATE CLASSES
    <list of private classes defined - with one-line descriptions>

   NOTES
    <other useful comments, qualifications, etc.>

   MODIFIED    (MM/DD/YY)
    parujain    11/12/08 - support runtime MBeans
    parujain    10/05/07 - ordering
    hopark      09/24/07 - add hitRatio
    parujain    09/12/07 - remove logging
    hopark      07/13/07 - dump stack trace on exception
    parujain    05/31/07 - cep-em integration
    parujain    04/26/07 - System-wide memmory statistics
    parujain    04/26/07 - Creation
 */

/**
 *  @version $Header: pcbpel/cep/server/src/oracle/cep/jmx/stats/MemoryStatsRow.java /main/2 2008/11/30 13:31:42 parujain Exp $
 *  @author  parujain
 *  @since   release specific (what release of product did this appear in)
 */
package oracle.cep.jmx.stats;

import java.beans.ConstructorProperties;

import javax.management.openmbean.CompositeData;
import javax.management.openmbean.CompositeDataSupport;
import javax.management.openmbean.CompositeType;
import javax.management.openmbean.OpenDataException;
import javax.management.openmbean.OpenType;
import javax.management.openmbean.SimpleType;

import oracle.cep.statistics.IStats;

/**
 * Statistics for Memory: This can be thought of a fixed table with the
 * following columns:
 *
 * ObjectType                 : Type of the object like TUPES, TIMESTAMPS etc.
 * HitRatio                   : hit ratio of pin operations
 *
 */

public class MemoryStatsRow extends StatsRow implements IStats
{
  
  private String objectType;
  private float hitRatio;

  /** 
   * Construct a MemoryStatsRow instance. 
   * The PropertyNames annotation is used 
   * to be able to construct a MemoryStatsRow instance out of a CompositeData
   * instance. See MXBeans documentation for more details.
   */ 
  @ConstructorProperties({"objectType","hitRatio"})
  public MemoryStatsRow(String type, float hr)
  {
    objectType = type;
    hitRatio = hr;
  }
 
  public String getObjectType()
  {
    return objectType ;
  }
  
  public float getHitRatio()
  {
    return hitRatio;
  }
  
  public String toString()
  {
    StringBuilder sb = new StringBuilder();
    sb.append("<MemoryStatistics>");
    sb.append("<Object Type =\"" + objectType + "\" >");
    sb.append("<Hit ratio =\"" + hitRatio + "\" >");
    sb.append("</MemoryStatistics>");
    return sb.toString();
  }
  
  /*
   * JDK 5.0 manual conversion methods. The code
   * below would not be required if we could
   * rely on the MXBean framework
   * 
   * THE REQUIRED METHODS ARE:
   *
   *  public static CompositeType toCompositeType();
   *  public CompositeData toCompositeData(CompositeType ct);
   *  public static MemoryStatsRow from(CompositeData cd);
   *
   */

  // The corresponding CompositeType for this class
  private static CompositeType cType_= null;

  private static final String[] itemNames_= {"objectType","hitRatio"};
  
  static{
    
      try 
      {
        OpenType[] itemTypes = {SimpleType.STRING,
                                SimpleType.FLOAT};
        cType_ = new CompositeType("oracle.cep.statistics.MemoryStatsRow",
                                   "oracle.cep.statistics.MemoryStatsRow",
                                   itemNames_,
                                   itemNames_,
                                   itemTypes);
    }
    catch(OpenDataException ode)
    {
      
    }
  }
  
  /**
   * Returns the CompositeType that describes this model
   * specific class
   */
  public static CompositeType toCompositeType() {
      return cType_;
  }

  /**
   * Convert an instance of this model specific type to 
   * a CompositeData. This ensure that clients that do not
   * have access to the model specific class can still
   * use the MBean. The MXBean framework can perform this
   * conversion automatically. However MXBeans are part of
   * JDK 6.0 and AS11g is required to support JDK 5.0 
   * 
   * @param ct - This parameter is there only for future compatibility reasons
   *             with JDK 6.0. It can be ignored at this point.
   */
   public CompositeData toCompositeData(CompositeType ct) {
     Object[] itemValues = {new String(this.getObjectType()),
                            new Float(this.getHitRatio())};
     
     CompositeData cData= null;
     try {
        cData= new CompositeDataSupport(cType_, itemNames_, itemValues);

    }
    catch( OpenDataException ode) {
      
    }
    return cData;
   }
   

   /**
    * Create an instance of the model specific class out of
    * an associated CompositeData instance
    */
    public static MemoryStatsRow from(CompositeData cd) {
      if (cd==null)
        return null;
      
      return new MemoryStatsRow(((String)cd.get("objectType")).toString(),
                                ((Float)cd.get("hitRatio")).floatValue());
    }

    
}
