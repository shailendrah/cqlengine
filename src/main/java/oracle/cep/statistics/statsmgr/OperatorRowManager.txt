/* $Header: pcbpel/cep/server/src/oracle/cep/statistics/statsmgr/OperatorRowManager.java /main/11 2008/11/30 13:31:43 parujain Exp $ */

/* Copyright (c) 2006, 2008, Oracle and/or its affiliates.
All rights reserved. */

/*
   DESCRIPTION
    <short description of component this file declares/defines>

   PRIVATE CLASSES
    <list of private classes defined - with one-line descriptions>

   NOTES
    <other useful comments, qualifications, etc.>

   MODIFIED    (MM/DD/YY)
    parujain    11/13/08 - Use Factory for Stats generation
    hopark      10/10/08 - remove statics
    hopark      10/09/08 - remove statics
    parujain    07/11/08 - stats cleanup
    parujain    10/09/07 - add stats
    parujain    05/31/07 - cep-em integration
    parujain    05/08/07 - add statistics
    najain      10/16/06 - Creation
 */

/**
 *  @version $Header: pcbpel/cep/server/src/oracle/cep/statistics/statsmgr/OperatorRowManager.java /main/11 2008/11/30 13:31:43 parujain Exp $
 *  @author  najain  
 *  @since   release specific (what release of product did this appear in)
 */

package oracle.cep.statistics.statsmgr;

import java.util.Iterator;

import oracle.cep.execution.operators.ExecOpt;
import oracle.cep.statistics.IStats;
import oracle.cep.jmx.stats.FilterCondition;
import oracle.cep.service.ExecContext;
import oracle.cep.statistics.IStatsFactory;

/**
 * Statistics Manager for the operator
 *
 * @since 1.0
 */

public class OperatorRowManager extends OperatorStatsManager
{
  // iterator to traverse the operator array
  private Iterator<ExecOpt> itr;

  // Loop over all the execution operators and return the statistics 
  // corresponding to them. Note that we deliberately do not take a latch
  // while traversing the operators. So, it is possible that we miss an
  // operator if it gets added in the beginning of the operator array after
  // we have traversed the initial segment of the array. Also, it is possible
  // that the different operators are showing statistics for different 
  // timestamps
  public OperatorRowManager(ExecContext ec, IStatsFactory factory)
  {
    super(ec, factory);
  }
  
  public void init(FilterCondition[] filters)
  {
    super.init(filters);
    itr = execContext.getExecMgr().getExecOpIterator();
  }
  
  public void init()
  {
    this.init(null);
  }

  public IStats getNext()
  {
    if(factory == null)
      return null;
    
    if (itr == null)
      return null;

    ExecOpt op = null;
    boolean found = false;
    IStats opStats = null;
    
    while(!found && itr.hasNext())
    {
    
      op = itr.next();

      if (op == null)
        continue;
    
      opStats = getOpStats(op);
    
      if(hasFilters)
      {
        found = processFilter(opStats, (FilterCondition[])oFilters.toArray(new FilterCondition[0]), types);
      }
      else
        found = true;
    }
    if(found)
      return opStats;
    else
      return null;
  }

  public void close()
  {
    super.close();
    itr = null;
  }
}

