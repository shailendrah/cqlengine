<?xml version="1.0"?>
<xsl:stylesheet version="1.0" 
          xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml" omit-xml-declaration="yes" indent="yes"/>
  
  <xsl:param name="classname"></xsl:param>
  <xsl:param name="compname"></xsl:param>
  <xsl:param name="packagename"></xsl:param>

  <xsl:template match="messages/component">
    //*************************************************************************
    //  !DO NOT EDIT THIS FILE! 
    //
    //  This software is the property of Oracle USA, Inc.
    //  Copyright 2002-2006 Oracle USA, Inc.
    //  All rights reserved.
    //  Proprietary and confidential.
    //
    //  This ResourceBundle file is a generated file.
    //*************************************************************************
    
    package oracle.cep.exceptions<xsl:value-of select="$packagename"></xsl:value-of>;
    
    import java.util.ListResourceBundle;
    
    /**
     * Contains the resources needed to produce strings for the <xsl:value-of select="$compname"></xsl:value-of> component.
     */
    public class <xsl:value-of select="$classname"></xsl:value-of> extends ListResourceBundle
    {
       private final Object[][] contents = { 
         <xsl:for-each select="message">
              <xsl:variable name="msgName" select="name"/>           
              <xsl:if test="contains($msgName, $compname)">
                <xsl:call-template name="message">
                  <xsl:with-param name="compname" select="$compname" />
                  <xsl:with-param name="fullMsgName" select="$msgName" />
                </xsl:call-template>
              </xsl:if>
         </xsl:for-each> 
       };
      
       protected Object[][] getContents()  
       {
         return contents;
       }
    }
     
  </xsl:template>

  <xsl:template name="message"> 
       <xsl:param name="compname"/>
       <xsl:param name="fullMsgName"/>
       <xsl:variable name="msgName">
         <xsl:value-of select="substring-before($fullMsgName, '(')"/>
       </xsl:variable>
         // *Category:   <xsl:value-of select="category"/>
         // *Type:       <xsl:value-of select="type"/>
         // *Level:      <xsl:value-of select="level"/>
         // *Documented: <xsl:value-of select="documented"/>
         <xsl:for-each select="causes/cause">
         // *Cause:  <xsl:value-of select="."/>
         // *Action: <xsl:value-of select="following-sibling::action"/>
         </xsl:for-each>
         {"<xsl:value-of select="$msgName"/>", 
            "<xsl:variable name="vEscape" select="normalize-space(text)"/>
             <xsl:value-of select="prefix"/>-<xsl:value-of select="number"/>: <xsl:call-template name="fixquotes">
                 <xsl:with-param name="value" select="$vEscape"/>
             </xsl:call-template>"} ,
         <xsl:text>&#xA;</xsl:text>
  </xsl:template>
  
  <xsl:template match="text()">
        <xsl:value-of select="translate(., '&#xA;&#xD;', '  ')" />
  </xsl:template>
  
   <xsl:template name="fixquotes">
      <xsl:param name="value"/>
       <xsl:choose>
         <xsl:when test="contains($value, '&quot;')">
           <xsl:value-of select="substring-before($value, '&quot;')"/>
           <xsl:text>\"</xsl:text>
           <xsl:call-template name="fixquotes">
             <xsl:with-param name="value"
               select="substring-after($value, '&quot;')"/>
           </xsl:call-template>
         </xsl:when>
         <xsl:otherwise>
           <xsl:value-of  select="$value"/>
         </xsl:otherwise>
       </xsl:choose>
   </xsl:template> 
  
  
</xsl:stylesheet>
